
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	080023b1 	.word	0x080023b1
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	080021d1 	.word	0x080021d1
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	08001b81 	.word	0x08001b81
 800005c:	08001bf1 	.word	0x08001bf1
 8000060:	08001c61 	.word	0x08001c61
 8000064:	08001cd1 	.word	0x08001cd1
 8000068:	08001d41 	.word	0x08001d41
 800006c:	0800023b 	.word	0x0800023b
 8000070:	0800023b 	.word	0x0800023b
 8000074:	0800023b 	.word	0x0800023b
 8000078:	0800023b 	.word	0x0800023b
 800007c:	0800023b 	.word	0x0800023b
 8000080:	0800023b 	.word	0x0800023b
 8000084:	0800023b 	.word	0x0800023b
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	0800023b 	.word	0x0800023b
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	08001db1 	.word	0x08001db1
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	0800023b 	.word	0x0800023b
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	0800023b 	.word	0x0800023b
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	08001f81 	.word	0x08001f81
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4826      	ldr	r0, [pc, #152]	@ (80001fc <endfiniloop+0x6>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4825      	ldr	r0, [pc, #148]	@ (8000200 <endfiniloop+0xa>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 800016e:	4825      	ldr	r0, [pc, #148]	@ (8000204 <endfiniloop+0xe>)
                ldr     r1, =SCB_VTOR
 8000170:	4925      	ldr	r1, [pc, #148]	@ (8000208 <endfiniloop+0x12>)
                str     r0, [r1]
 8000172:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 8000174:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000176:	f380 8814 	msr	CONTROL, r0
                isb
 800017a:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 800017e:	f001 fcb7 	bl	8001af0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000182:	f002 f86d 	bl	8002260 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000186:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800018a:	4920      	ldr	r1, [pc, #128]	@ (800020c <endfiniloop+0x16>)
                ldr     r2, =__main_stack_end__
 800018c:	4a1b      	ldr	r2, [pc, #108]	@ (80001fc <endfiniloop+0x6>)

0800018e <msloop>:
msloop:
                cmp     r1, r2
 800018e:	4291      	cmp	r1, r2
                itt     lo
 8000190:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000196:	e7fa      	bcc.n	800018e <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000198:	491d      	ldr	r1, [pc, #116]	@ (8000210 <endfiniloop+0x1a>)
                ldr     r2, =__process_stack_end__
 800019a:	4a19      	ldr	r2, [pc, #100]	@ (8000200 <endfiniloop+0xa>)

0800019c <psloop>:
psloop:
                cmp     r1, r2
 800019c:	4291      	cmp	r1, r2
                itt     lo
 800019e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a0:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001a4:	e7fa      	bcc.n	800019c <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 80001a6:	491b      	ldr	r1, [pc, #108]	@ (8000214 <endfiniloop+0x1e>)
                ldr     r2, =__data_base__
 80001a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000218 <endfiniloop+0x22>)
                ldr     r3, =__data_end__
 80001aa:	4b1c      	ldr	r3, [pc, #112]	@ (800021c <endfiniloop+0x26>)

080001ac <dloop>:
dloop:
                cmp     r2, r3
 80001ac:	429a      	cmp	r2, r3
                ittt    lo
 80001ae:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b0:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001b4:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001b8:	e7f8      	bcc.n	80001ac <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 80001ba:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001bc:	4918      	ldr	r1, [pc, #96]	@ (8000220 <endfiniloop+0x2a>)
                ldr     r2, =__bss_end__
 80001be:	4a19      	ldr	r2, [pc, #100]	@ (8000224 <endfiniloop+0x2e>)

080001c0 <bloop>:
bloop:
                cmp     r1, r2
 80001c0:	4291      	cmp	r1, r2
                itt     lo
 80001c2:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001c4:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001c8:	e7fa      	bcc.n	80001c0 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001ca:	f001 fca9 	bl	8001b20 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001ce:	f001 fc97 	bl	8001b00 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d2:	4c15      	ldr	r4, [pc, #84]	@ (8000228 <endfiniloop+0x32>)
                ldr     r5, =__init_array_end__
 80001d4:	4d15      	ldr	r5, [pc, #84]	@ (800022c <endfiniloop+0x36>)

080001d6 <initloop>:
initloop:
                cmp     r4, r5
 80001d6:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001d8:	da03      	bge.n	80001e2 <endinitloop>
                ldr     r1, [r4], #4
 80001da:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001de:	4788      	blx	r1
                b       initloop
 80001e0:	e7f9      	b.n	80001d6 <initloop>

080001e2 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e2:	f002 f8f5 	bl	80023d0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001e6:	4c12      	ldr	r4, [pc, #72]	@ (8000230 <endfiniloop+0x3a>)
                ldr     r5, =__fini_array_end__
 80001e8:	4d12      	ldr	r5, [pc, #72]	@ (8000234 <endfiniloop+0x3e>)

080001ea <finiloop>:
finiloop:
                cmp     r4, r5
 80001ea:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001ec:	da03      	bge.n	80001f6 <endfiniloop>
                ldr     r1, [r4], #4
 80001ee:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f2:	4788      	blx	r1
                b       finiloop
 80001f4:	e7f9      	b.n	80001ea <finiloop>

080001f6 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001f6:	f001 bc8b 	b.w	8001b10 <__default_exit>
 80001fa:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 80001fc:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000200:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000204:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000208:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	08002b2c 	.word	0x08002b2c
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000820 	.word	0x20000820
                ldr     r1, =__bss_base__
 8000220:	20000820 	.word	0x20000820
                ldr     r2, =__bss_end__
 8000224:	20001508 	.word	0x20001508
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f002 f860 	bl	8002320 <chThdExit>

08000260 <.zombies>:
.zombies:       b       .zombies
 8000260:	e7fe      	b.n	8000260 <.zombies>

08000262 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 8000262:	f002 f83d 	bl	80022e0 <chSchDoPreemption>

08000266 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <__port_exit_from_isr+0x2>
 800026a:	0000      	movs	r0, r0
 800026c:	0000      	movs	r0, r0
	...

08000270 <_pal_lld_setgroupmode>:
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8000270:	2300      	movs	r3, #0
                           iomode_t mode) {
 8000272:	b530      	push	{r4, r5, lr}
  cfg = cfgtab[mode];
 8000274:	4d16      	ldr	r5, [pc, #88]	@ (80002d0 <_pal_lld_setgroupmode+0x60>)
  if (mode == PAL_MODE_INPUT_PULLUP)
 8000276:	2a03      	cmp	r2, #3
  cfg = cfgtab[mode];
 8000278:	5cad      	ldrb	r5, [r5, r2]
 800027a:	f04f 0408 	mov.w	r4, #8
  mh = ml = crh = crl = 0;
 800027e:	469c      	mov	ip, r3
 8000280:	461a      	mov	r2, r3
 8000282:	469e      	mov	lr, r3
    port->BSRR = mask;
 8000284:	bf08      	it	eq
 8000286:	6101      	streq	r1, [r0, #16]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 8000288:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ml <<= 4;
 800028c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    crl <<= 4;
 8000290:	ea4f 1303 	mov.w	r3, r3, lsl #4
    crh <<= 4;
 8000294:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    mh <<= 4;
 8000298:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
      ml |= 0xf;
 800029c:	bf0c      	ite	eq
 800029e:	f042 020f 	orreq.w	r2, r2, #15
    else
      crl |= cfg;
 80002a2:	432b      	orrne	r3, r5
    if ((mask & 0x8000) == 0)
 80002a4:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
      mh |= 0xf;
 80002a8:	bf0c      	ite	eq
 80002aa:	f04e 0e0f 	orreq.w	lr, lr, #15
    else
      crh |= cfg;
 80002ae:	ea4c 0c05 	orrne.w	ip, ip, r5
  for (i = 0; i < 8; i++) {
 80002b2:	3c01      	subs	r4, #1
    mask <<= 1;
 80002b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0; i < 8; i++) {
 80002b8:	d1e6      	bne.n	8000288 <_pal_lld_setgroupmode+0x18>
  }
  port->CRH = (port->CRH & mh) | crh;
 80002ba:	6841      	ldr	r1, [r0, #4]
 80002bc:	ea01 010e 	and.w	r1, r1, lr
 80002c0:	ea41 010c 	orr.w	r1, r1, ip
 80002c4:	6041      	str	r1, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 80002c6:	6801      	ldr	r1, [r0, #0]
 80002c8:	400a      	ands	r2, r1
 80002ca:	4313      	orrs	r3, r2
 80002cc:	6003      	str	r3, [r0, #0]
}
 80002ce:	bd30      	pop	{r4, r5, pc}
 80002d0:	08002a98 	.word	0x08002a98
	...

080002e0 <__idle_thread>:
 */
static void __idle_thread(void *p) {

  (void)p;

  while (true) {
 80002e0:	e7fe      	b.n	80002e0 <__idle_thread>
 80002e2:	bf00      	nop
	...

080002f0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80002f0:	4b01      	ldr	r3, [pc, #4]	@ (80002f8 <chTMStartMeasurementX+0x8>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80002f4:	6083      	str	r3, [r0, #8]
}
 80002f6:	4770      	bx	lr
 80002f8:	e0001000 	.word	0xe0001000
 80002fc:	00000000 	.word	0x00000000

08000300 <chTMStopMeasurementX>:
 8000300:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000302:	4a0f      	ldr	r2, [pc, #60]	@ (8000340 <chTMStopMeasurementX+0x40>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	6892      	ldr	r2, [r2, #8]
  tmp->last = (now - tmp->last) - offset;
 8000308:	6881      	ldr	r1, [r0, #8]
 800030a:	1a9b      	subs	r3, r3, r2
 800030c:	1a5b      	subs	r3, r3, r1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800030e:	b410      	push	{r4}
  tmp->n++;
 8000310:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000314:	18d2      	adds	r2, r2, r3
 8000316:	6941      	ldr	r1, [r0, #20]
 8000318:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 800031a:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 800031c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8000320:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000322:	6802      	ldr	r2, [r0, #0]
  tmp->n++;
 8000324:	f104 0401 	add.w	r4, r4, #1
    tmp->worst = tmp->last;
 8000328:	bf88      	it	hi
 800032a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800032c:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 800032e:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000332:	6141      	str	r1, [r0, #20]
}
 8000334:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 8000336:	bf38      	it	cc
 8000338:	6003      	strcc	r3, [r0, #0]
}
 800033a:	4770      	bx	lr
 800033c:	e0001000 	.word	0xe0001000
 8000340:	20001370 	.word	0x20001370
	...

08000350 <chCoreAllocFromTop>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000350:	2330      	movs	r3, #48	@ 0x30
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000352:	b410      	push	{r4}
 8000354:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000358:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <chCoreAllocFromTop+0x38>)
 800035a:	4249      	negs	r1, r1
 800035c:	685c      	ldr	r4, [r3, #4]
 800035e:	1a20      	subs	r0, r4, r0
 8000360:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000362:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 8000364:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000366:	428a      	cmp	r2, r1
 8000368:	d307      	bcc.n	800037a <chCoreAllocFromTop+0x2a>
 800036a:	4294      	cmp	r4, r2
 800036c:	d305      	bcc.n	800037a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	2300      	movs	r3, #0
 8000372:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000376:	bc10      	pop	{r4}
 8000378:	4770      	bx	lr
    return NULL;
 800037a:	2000      	movs	r0, #0
 800037c:	2300      	movs	r3, #0
 800037e:	f383 8811 	msr	BASEPRI, r3
}
 8000382:	bc10      	pop	{r4}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20001368 	.word	0x20001368
 800038c:	00000000 	.word	0x00000000

08000390 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <chCoreAllocAlignedI+0x1c>)
 8000392:	4249      	negs	r1, r1
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	1a10      	subs	r0, r2, r0
 8000398:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800039a:	6819      	ldr	r1, [r3, #0]
 800039c:	4288      	cmp	r0, r1
 800039e:	d303      	bcc.n	80003a8 <chCoreAllocAlignedI+0x18>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	d301      	bcc.n	80003a8 <chCoreAllocAlignedI+0x18>
  ch_memcore.topmem = prev;
 80003a4:	6058      	str	r0, [r3, #4]
  return p;
 80003a6:	4770      	bx	lr
    return NULL;
 80003a8:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80003aa:	4770      	bx	lr
 80003ac:	20001368 	.word	0x20001368

080003b0 <__port_irq_epilogue>:
 80003b0:	2330      	movs	r3, #48	@ 0x30
 80003b2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80003b6:	4b0d      	ldr	r3, [pc, #52]	@ (80003ec <__port_irq_epilogue+0x3c>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80003be:	d102      	bne.n	80003c6 <__port_irq_epilogue+0x16>
 80003c0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80003c4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80003c6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80003ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 80003ce:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80003d0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80003d2:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80003d6:	4a06      	ldr	r2, [pc, #24]	@ (80003f0 <__port_irq_epilogue+0x40>)
 80003d8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80003da:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80003dc:	6889      	ldr	r1, [r1, #8]
 80003de:	6892      	ldr	r2, [r2, #8]
 80003e0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80003e2:	bf8c      	ite	hi
 80003e4:	4a03      	ldrhi	r2, [pc, #12]	@ (80003f4 <__port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80003e6:	4a04      	ldrls	r2, [pc, #16]	@ (80003f8 <__port_irq_epilogue+0x48>)
 80003e8:	619a      	str	r2, [r3, #24]
 80003ea:	4770      	bx	lr
 80003ec:	e000ed00 	.word	0xe000ed00
 80003f0:	20001380 	.word	0x20001380
 80003f4:	08000263 	.word	0x08000263
 80003f8:	08000266 	.word	0x08000266
 80003fc:	00000000 	.word	0x00000000

08000400 <chVTReset>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000400:	2330      	movs	r3, #48	@ 0x30
 8000402:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8000406:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8000408:	b19b      	cbz	r3, 8000432 <chVTReset+0x32>
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @api
 */
static inline void chVTReset(virtual_timer_t *vtp) {
 800040a:	b410      	push	{r4}
  (void) ch_dlist_dequeue(&vtp->dlist);
  vtp->dlist.next = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  vtlp->dlist.delta = (sysinterval_t)-1;
 800040c:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next = NULL;
 8000410:	2400      	movs	r4, #0
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000418:	4462      	add	r2, ip
 800041a:	609a      	str	r2, [r3, #8]
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 800041c:	6842      	ldr	r2, [r0, #4]
 800041e:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8000420:	605a      	str	r2, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <chVTReset+0x3c>)
  vtp->dlist.next = NULL;
 8000424:	6004      	str	r4, [r0, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000426:	6199      	str	r1, [r3, #24]
 8000428:	2300      	movs	r3, #0
 800042a:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chVTResetI(vtp);
  chSysUnlock();
}
 800042e:	bc10      	pop	{r4}
 8000430:	4770      	bx	lr
 8000432:	2300      	movs	r3, #0
 8000434:	f383 8811 	msr	BASEPRI, r3
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	20001380 	.word	0x20001380

08000440 <pauseTimer>:
        default:
    }
}

static void pauseTimer(timer_t vt) {
    switch(vt) {
 8000440:	3802      	subs	r0, #2
static void pauseTimer(timer_t vt) {
 8000442:	b470      	push	{r4, r5, r6}
    switch(vt) {
 8000444:	2803      	cmp	r0, #3
 8000446:	d876      	bhi.n	8000536 <pauseTimer+0xf6>
 8000448:	e8df f000 	tbb	[pc, r0]
 800044c:	022e1b08 	.word	0x022e1b08
                chVTReset(&vt_rinse);
                vt_rinse_paused = true;
            }
            break;
        case CENTRIFUGE_TIMER:
            if (vt_centrifuge_paused == false) {
 8000450:	4d4d      	ldr	r5, [pc, #308]	@ (8000588 <pauseTimer+0x148>)
 8000452:	782a      	ldrb	r2, [r5, #0]
 8000454:	2a00      	cmp	r2, #0
 8000456:	d053      	beq.n	8000500 <pauseTimer+0xc0>
                vt_centrifuge_paused = true;
            }
            break;
        default:
    }
}
 8000458:	bc70      	pop	{r4, r5, r6}
 800045a:	4770      	bx	lr
            if (vt_soak_paused == false) {
 800045c:	4d4b      	ldr	r5, [pc, #300]	@ (800058c <pauseTimer+0x14c>)
 800045e:	782a      	ldrb	r2, [r5, #0]
 8000460:	2a00      	cmp	r2, #0
 8000462:	d1f9      	bne.n	8000458 <pauseTimer+0x18>
  ch_delta_list_t *dlp;

  chDbgCheckClassI();

  delta = (sysinterval_t)0;
  dlp = vtlp->dlist.next;
 8000464:	484a      	ldr	r0, [pc, #296]	@ (8000590 <pauseTimer+0x150>)
 8000466:	4c4b      	ldr	r4, [pc, #300]	@ (8000594 <pauseTimer+0x154>)
 8000468:	4684      	mov	ip, r0
 800046a:	f85c 3f10 	ldr.w	r3, [ip, #16]!
 800046e:	e002      	b.n	8000476 <pauseTimer+0x36>
      return delta - nowdelta;
#else
      return delta;
#endif
    }
    dlp = dlp->next;
 8000470:	681b      	ldr	r3, [r3, #0]
  } while (dlp != &vtlp->dlist);
 8000472:	4563      	cmp	r3, ip
 8000474:	d053      	beq.n	800051e <pauseTimer+0xde>
    delta += dlp->delta;
 8000476:	6899      	ldr	r1, [r3, #8]
    if (dlp == &vtp->dlist) {
 8000478:	42a3      	cmp	r3, r4
    delta += dlp->delta;
 800047a:	440a      	add	r2, r1
    if (dlp == &vtp->dlist) {
 800047c:	d1f8      	bne.n	8000470 <pauseTimer+0x30>
                remainingTime_soak = chVTGetRemainingIntervalI(&vt_soak);
 800047e:	4b46      	ldr	r3, [pc, #280]	@ (8000598 <pauseTimer+0x158>)
 8000480:	e024      	b.n	80004cc <pauseTimer+0x8c>
            if (vt_wash_paused == false) {
 8000482:	4d46      	ldr	r5, [pc, #280]	@ (800059c <pauseTimer+0x15c>)
 8000484:	782a      	ldrb	r2, [r5, #0]
 8000486:	2a00      	cmp	r2, #0
 8000488:	d1e6      	bne.n	8000458 <pauseTimer+0x18>
  dlp = vtlp->dlist.next;
 800048a:	4841      	ldr	r0, [pc, #260]	@ (8000590 <pauseTimer+0x150>)
 800048c:	4c44      	ldr	r4, [pc, #272]	@ (80005a0 <pauseTimer+0x160>)
 800048e:	4684      	mov	ip, r0
 8000490:	f85c 3f10 	ldr.w	r3, [ip, #16]!
 8000494:	e002      	b.n	800049c <pauseTimer+0x5c>
    dlp = dlp->next;
 8000496:	681b      	ldr	r3, [r3, #0]
  } while (dlp != &vtlp->dlist);
 8000498:	4563      	cmp	r3, ip
 800049a:	d049      	beq.n	8000530 <pauseTimer+0xf0>
    delta += dlp->delta;
 800049c:	6899      	ldr	r1, [r3, #8]
    if (dlp == &vtp->dlist) {
 800049e:	42a3      	cmp	r3, r4
    delta += dlp->delta;
 80004a0:	440a      	add	r2, r1
    if (dlp == &vtp->dlist) {
 80004a2:	d1f8      	bne.n	8000496 <pauseTimer+0x56>
                remainingTime_wash = chVTGetRemainingIntervalI(&vt_wash);
 80004a4:	4b3f      	ldr	r3, [pc, #252]	@ (80005a4 <pauseTimer+0x164>)
 80004a6:	e011      	b.n	80004cc <pauseTimer+0x8c>
            if (vt_rinse_paused == false) {
 80004a8:	4d3f      	ldr	r5, [pc, #252]	@ (80005a8 <pauseTimer+0x168>)
 80004aa:	782a      	ldrb	r2, [r5, #0]
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d1d3      	bne.n	8000458 <pauseTimer+0x18>
  dlp = vtlp->dlist.next;
 80004b0:	4837      	ldr	r0, [pc, #220]	@ (8000590 <pauseTimer+0x150>)
 80004b2:	4c3e      	ldr	r4, [pc, #248]	@ (80005ac <pauseTimer+0x16c>)
 80004b4:	4684      	mov	ip, r0
 80004b6:	f85c 3f10 	ldr.w	r3, [ip, #16]!
 80004ba:	e002      	b.n	80004c2 <pauseTimer+0x82>
    dlp = dlp->next;
 80004bc:	681b      	ldr	r3, [r3, #0]
  } while (dlp != &vtlp->dlist);
 80004be:	4563      	cmp	r3, ip
 80004c0:	d033      	beq.n	800052a <pauseTimer+0xea>
    delta += dlp->delta;
 80004c2:	6899      	ldr	r1, [r3, #8]
    if (dlp == &vtp->dlist) {
 80004c4:	42a3      	cmp	r3, r4
    delta += dlp->delta;
 80004c6:	440a      	add	r2, r1
    if (dlp == &vtp->dlist) {
 80004c8:	d1f8      	bne.n	80004bc <pauseTimer+0x7c>
                remainingTime_rinse = chVTGetRemainingIntervalI(&vt_rinse);
 80004ca:	4b39      	ldr	r3, [pc, #228]	@ (80005b0 <pauseTimer+0x170>)
                remainingTime_centrifuge = chVTGetRemainingIntervalI(&vt_centrifuge);
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	2330      	movs	r3, #48	@ 0x30
 80004d0:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80004d4:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 80004d6:	b163      	cbz	r3, 80004f2 <pauseTimer+0xb2>
  vtp->dlist.next = NULL;
 80004d8:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 80004da:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 80004de:	689a      	ldr	r2, [r3, #8]
 80004e0:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80004e4:	4462      	add	r2, ip
 80004e6:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80004e8:	6862      	ldr	r2, [r4, #4]
 80004ea:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80004ec:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 80004ee:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80004f0:	6181      	str	r1, [r0, #24]
 80004f2:	2300      	movs	r3, #0
 80004f4:	f383 8811 	msr	BASEPRI, r3
                vt_centrifuge_paused = true;
 80004f8:	2301      	movs	r3, #1
 80004fa:	702b      	strb	r3, [r5, #0]
}
 80004fc:	bc70      	pop	{r4, r5, r6}
 80004fe:	4770      	bx	lr
  dlp = vtlp->dlist.next;
 8000500:	4823      	ldr	r0, [pc, #140]	@ (8000590 <pauseTimer+0x150>)
 8000502:	4c2c      	ldr	r4, [pc, #176]	@ (80005b4 <pauseTimer+0x174>)
 8000504:	4684      	mov	ip, r0
 8000506:	f85c 3f10 	ldr.w	r3, [ip, #16]!
 800050a:	e002      	b.n	8000512 <pauseTimer+0xd2>
    dlp = dlp->next;
 800050c:	681b      	ldr	r3, [r3, #0]
  } while (dlp != &vtlp->dlist);
 800050e:	4563      	cmp	r3, ip
 8000510:	d008      	beq.n	8000524 <pauseTimer+0xe4>
    delta += dlp->delta;
 8000512:	6899      	ldr	r1, [r3, #8]
    if (dlp == &vtp->dlist) {
 8000514:	42a3      	cmp	r3, r4
    delta += dlp->delta;
 8000516:	440a      	add	r2, r1
    if (dlp == &vtp->dlist) {
 8000518:	d1f8      	bne.n	800050c <pauseTimer+0xcc>
                remainingTime_centrifuge = chVTGetRemainingIntervalI(&vt_centrifuge);
 800051a:	4b27      	ldr	r3, [pc, #156]	@ (80005b8 <pauseTimer+0x178>)
 800051c:	e7d6      	b.n	80004cc <pauseTimer+0x8c>

  chDbgAssert(false, "timer not in list");

  return (sysinterval_t)-1;
 800051e:	f04f 32ff 	mov.w	r2, #4294967295
 8000522:	e7ac      	b.n	800047e <pauseTimer+0x3e>
 8000524:	f04f 32ff 	mov.w	r2, #4294967295
 8000528:	e7f7      	b.n	800051a <pauseTimer+0xda>
 800052a:	f04f 32ff 	mov.w	r2, #4294967295
 800052e:	e7cc      	b.n	80004ca <pauseTimer+0x8a>
 8000530:	f04f 32ff 	mov.w	r2, #4294967295
 8000534:	e7b6      	b.n	80004a4 <pauseTimer+0x64>
            if (vt_motor_paused == false) {
 8000536:	4d21      	ldr	r5, [pc, #132]	@ (80005bc <pauseTimer+0x17c>)
 8000538:	782b      	ldrb	r3, [r5, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d18c      	bne.n	8000458 <pauseTimer+0x18>
  dlp = vtlp->dlist.next;
 800053e:	4814      	ldr	r0, [pc, #80]	@ (8000590 <pauseTimer+0x150>)
 8000540:	4a1f      	ldr	r2, [pc, #124]	@ (80005c0 <pauseTimer+0x180>)
 8000542:	4604      	mov	r4, r0
 8000544:	f854 1f10 	ldr.w	r1, [r4, #16]!
    delta += dlp->delta;
 8000548:	688e      	ldr	r6, [r1, #8]
    if (dlp == &vtp->dlist) {
 800054a:	4291      	cmp	r1, r2
    delta += dlp->delta;
 800054c:	4433      	add	r3, r6
    if (dlp == &vtp->dlist) {
 800054e:	d004      	beq.n	800055a <pauseTimer+0x11a>
    dlp = dlp->next;
 8000550:	6809      	ldr	r1, [r1, #0]
  } while (dlp != &vtlp->dlist);
 8000552:	42a1      	cmp	r1, r4
 8000554:	d1f8      	bne.n	8000548 <pauseTimer+0x108>
  return (sysinterval_t)-1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
                remainingTime_motor = chVTGetRemainingIntervalI(&vt_motor);
 800055a:	491a      	ldr	r1, [pc, #104]	@ (80005c4 <pauseTimer+0x184>)
 800055c:	600b      	str	r3, [r1, #0]
 800055e:	2330      	movs	r3, #48	@ 0x30
 8000560:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000564:	6813      	ldr	r3, [r2, #0]
  if (chVTIsArmedI(vtp)) {
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0c3      	beq.n	80004f2 <pauseTimer+0xb2>
  vtp->dlist.next = NULL;
 800056a:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 800056c:	f04f 34ff 	mov.w	r4, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000570:	6899      	ldr	r1, [r3, #8]
 8000572:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8000576:	4461      	add	r1, ip
 8000578:	6099      	str	r1, [r3, #8]
  dlp->prev->next = dlp->next;
 800057a:	6851      	ldr	r1, [r2, #4]
 800057c:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 800057e:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8000580:	6016      	str	r6, [r2, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000582:	6184      	str	r4, [r0, #24]
}
 8000584:	e7b5      	b.n	80004f2 <pauseTimer+0xb2>
 8000586:	bf00      	nop
 8000588:	200012b4 	.word	0x200012b4
 800058c:	200012cc 	.word	0x200012cc
 8000590:	20001380 	.word	0x20001380
 8000594:	20001320 	.word	0x20001320
 8000598:	200012c8 	.word	0x200012c8
 800059c:	200012c4 	.word	0x200012c4
 80005a0:	20001308 	.word	0x20001308
 80005a4:	200012c0 	.word	0x200012c0
 80005a8:	200012bc 	.word	0x200012bc
 80005ac:	200012f0 	.word	0x200012f0
 80005b0:	200012b8 	.word	0x200012b8
 80005b4:	200012d8 	.word	0x200012d8
 80005b8:	200012b0 	.word	0x200012b0
 80005bc:	200012d4 	.word	0x200012d4
 80005c0:	20001338 	.word	0x20001338
 80005c4:	200012d0 	.word	0x200012d0
	...

080005d0 <_pal_lld_enablepadevent.constprop.0>:
                ((EXTI->FTSR & padmask) == 0U), "channel already in use");

  /* Index and mask of the SYSCFG CR register to be used.*/
  cridx  = (uint32_t)pad >> 2U;
  croff = ((uint32_t)pad & 3U) * 4U;
  crmask = ~(0xFU << croff);
 80005d0:	f04f 0c0f 	mov.w	ip, #15
  padmask = 1U << (uint32_t)pad;
 80005d4:	2201      	movs	r2, #1
void _pal_lld_enablepadevent(ioportid_t port,
 80005d6:	b430      	push	{r4, r5}
  /* Port index is obtained assuming that GPIO ports are placed at regular
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;

  /* Port selection in SYSCFG.*/
  AFIO->EXTICR[cridx] = (AFIO->EXTICR[cridx] & crmask) | (portidx << croff);
 80005d8:	4d0f      	ldr	r5, [pc, #60]	@ (8000618 <_pal_lld_enablepadevent.constprop.0+0x48>)
  croff = ((uint32_t)pad & 3U) * 4U;
 80005da:	f000 0103 	and.w	r1, r0, #3
  AFIO->EXTICR[cridx] = (AFIO->EXTICR[cridx] & crmask) | (portidx << croff);
 80005de:	696c      	ldr	r4, [r5, #20]
  croff = ((uint32_t)pad & 3U) * 4U;
 80005e0:	0089      	lsls	r1, r1, #2
  crmask = ~(0xFU << croff);
 80005e2:	fa0c fc01 	lsl.w	ip, ip, r1
  AFIO->EXTICR[cridx] = (AFIO->EXTICR[cridx] & crmask) | (portidx << croff);
 80005e6:	ea24 040c 	bic.w	r4, r4, ip
 80005ea:	fa02 f101 	lsl.w	r1, r2, r1

  /* Programming edge registers.*/
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
    EXTI->RTSR |= padmask;
  else
    EXTI->RTSR &= ~padmask;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <_pal_lld_enablepadevent.constprop.0+0x4c>)
  AFIO->EXTICR[cridx] = (AFIO->EXTICR[cridx] & crmask) | (portidx << croff);
 80005f0:	430c      	orrs	r4, r1
 80005f2:	616c      	str	r4, [r5, #20]
    EXTI->RTSR &= ~padmask;
 80005f4:	6899      	ldr	r1, [r3, #8]
  padmask = 1U << (uint32_t)pad;
 80005f6:	fa02 f000 	lsl.w	r0, r2, r0
    EXTI->RTSR &= ~padmask;
 80005fa:	ea21 0100 	bic.w	r1, r1, r0
 80005fe:	6099      	str	r1, [r3, #8]
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
    EXTI->FTSR |= padmask;
 8000600:	68da      	ldr	r2, [r3, #12]
    EXTI->FTSR &= ~padmask;

  /* Programming interrupt and event registers.*/
  EXTI->IMR |= padmask;
  EXTI->EMR &= ~padmask;
}
 8000602:	bc30      	pop	{r4, r5}
    EXTI->FTSR |= padmask;
 8000604:	4302      	orrs	r2, r0
 8000606:	60da      	str	r2, [r3, #12]
  EXTI->IMR |= padmask;
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4302      	orrs	r2, r0
 800060c:	601a      	str	r2, [r3, #0]
  EXTI->EMR &= ~padmask;
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	ea22 0200 	bic.w	r2, r2, r0
 8000614:	605a      	str	r2, [r3, #4]
}
 8000616:	4770      	bx	lr
 8000618:	40010000 	.word	0x40010000
 800061c:	40010400 	.word	0x40010400

08000620 <__sch_wakeup>:
 8000620:	2330      	movs	r3, #48	@ 0x30
 8000622:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000626:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
 800062a:	2b0c      	cmp	r3, #12
 800062c:	d810      	bhi.n	8000650 <__sch_wakeup+0x30>
 800062e:	e8df f003 	tbb	[pc, r3]
 8000632:	0f2a      	.short	0x0f2a
 8000634:	070b260f 	.word	0x070b260f
 8000638:	0f0f0b0f 	.word	0x0f0f0b0f
 800063c:	0f0f      	.short	0x0f0f
 800063e:	0b          	.byte	0x0b
 800063f:	00          	.byte	0x00
    chSemFastSignalI(tp->u.wtsemp);
 8000640:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000642:	6893      	ldr	r3, [r2, #8]
 8000644:	3301      	adds	r3, #1
 8000646:	6093      	str	r3, [r2, #8]
  p->prev->next = p->next;
 8000648:	e9d1 3200 	ldrd	r3, r2, [r1]
 800064c:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800064e:	605a      	str	r2, [r3, #4]
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8000650:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8000652:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000654:	f04f 34ff 	mov.w	r4, #4294967295
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000658:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800065a:	6888      	ldr	r0, [r1, #8]
  tp->u.rdymsg = MSG_TIMEOUT;
 800065c:	628c      	str	r4, [r1, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 800065e:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
    pqp = pqp->next;
 8000662:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	4282      	cmp	r2, r0
 8000668:	d2fb      	bcs.n	8000662 <__sch_wakeup+0x42>
  p->prev       = pqp->prev;
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	2000      	movs	r0, #0
 800066e:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8000672:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8000674:	6059      	str	r1, [r3, #4]
 8000676:	f380 8811 	msr	BASEPRI, r0
}
 800067a:	bc10      	pop	{r4}
 800067c:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800067e:	2200      	movs	r2, #0
 8000680:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000682:	601a      	str	r2, [r3, #0]
    break;
 8000684:	e7e4      	b.n	8000650 <__sch_wakeup+0x30>
 8000686:	2300      	movs	r3, #0
 8000688:	f383 8811 	msr	BASEPRI, r3
    return;
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <chMtxUnlockS>:
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <chMtxUnlockS+0x64>)
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000692:	6802      	ldr	r2, [r0, #0]
void chMtxUnlockS(mutex_t *mp) {
 8000694:	b410      	push	{r4}
 8000696:	68dc      	ldr	r4, [r3, #12]
    currtp->mtxlist = mp->next;
 8000698:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 800069a:	4282      	cmp	r2, r0
    currtp->mtxlist = mp->next;
 800069c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 800069e:	d025      	beq.n	80006ec <chMtxUnlockS+0x5c>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 80006a0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 80006a2:	b14b      	cbz	r3, 80006b8 <chMtxUnlockS+0x28>
  return (bool)(qp->next != qp);
 80006a4:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d003      	beq.n	80006b2 <chMtxUnlockS+0x22>
 80006aa:	6892      	ldr	r2, [r2, #8]
 80006ac:	4291      	cmp	r1, r2
 80006ae:	bf38      	it	cc
 80006b0:	4611      	movcc	r1, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = threadref(lmp->queue.next)->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 80006b2:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f5      	bne.n	80006a4 <chMtxUnlockS+0x14>
  tp->state = CH_STATE_READY;
 80006b8:	f04f 0c00 	mov.w	ip, #0
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 80006bc:	60a1      	str	r1, [r4, #8]
  ch_queue_t *p = qp->next;
 80006be:	6803      	ldr	r3, [r0, #0]
  qp->next       = p->next;
 80006c0:	681a      	ldr	r2, [r3, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80006c2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
  } while (unlikely(pqp->prio >= p->prio));
 80006c4:	689c      	ldr	r4, [r3, #8]
  qp->next       = p->next;
 80006c6:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 80006c8:	6050      	str	r0, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80006ca:	699a      	ldr	r2, [r3, #24]
 80006cc:	e9c0 3102 	strd	r3, r1, [r0, #8]
      tp->mtxlist = mp;
 80006d0:	63d8      	str	r0, [r3, #60]	@ 0x3c
  tp->state = CH_STATE_READY;
 80006d2:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 80006d6:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80006d8:	6891      	ldr	r1, [r2, #8]
 80006da:	42a1      	cmp	r1, r4
 80006dc:	d2fb      	bcs.n	80006d6 <chMtxUnlockS+0x46>
  p->prev       = pqp->prev;
 80006de:	6851      	ldr	r1, [r2, #4]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80006e0:	bc10      	pop	{r4}
 80006e2:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80006e6:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80006e8:	6053      	str	r3, [r2, #4]
 80006ea:	4770      	bx	lr
      mp->owner = NULL;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	bc10      	pop	{r4}
      mp->owner = NULL;
 80006f0:	6093      	str	r3, [r2, #8]
}
 80006f2:	4770      	bx	lr
 80006f4:	20001380 	.word	0x20001380
	...

08000700 <queueWriteFromISR>:
 8000700:	2330      	movs	r3, #48	@ 0x30
 8000702:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 8000706:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <queueWriteFromISR+0x68>)
 8000708:	6813      	ldr	r3, [r2, #0]
 800070a:	2b09      	cmp	r3, #9
 800070c:	d80c      	bhi.n	8000728 <queueWriteFromISR+0x28>
         *wr_ptr = evt;
 800070e:	4917      	ldr	r1, [pc, #92]	@ (800076c <queueWriteFromISR+0x6c>)
        qsize++;
 8000710:	3301      	adds	r3, #1
 8000712:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 8000714:	680b      	ldr	r3, [r1, #0]
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000716:	4a16      	ldr	r2, [pc, #88]	@ (8000770 <queueWriteFromISR+0x70>)
         *wr_ptr = evt;
 8000718:	7018      	strb	r0, [r3, #0]
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 800071a:	3301      	adds	r3, #1
 800071c:	f1a2 000a 	sub.w	r0, r2, #10
 8000720:	4293      	cmp	r3, r2
 8000722:	bf28      	it	cs
 8000724:	4603      	movcs	r3, r0
 8000726:	600b      	str	r3, [r1, #0]
  return (bool)(qp->next != qp);
 8000728:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <queueWriteFromISR+0x74>)
 800072a:	6813      	ldr	r3, [r2, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (ch_queue_notempty(&cp->queue)) {
 800072c:	4293      	cmp	r3, r2
 800072e:	d017      	beq.n	8000760 <queueWriteFromISR+0x60>
    thread_t *tp = threadref(ch_queue_fifo_remove(&cp->queue));
    tp->u.rdymsg = MSG_OK;
 8000730:	2000      	movs	r0, #0
void queueWriteFromISR(event_t evt) {
 8000732:	b410      	push	{r4}
  qp->next       = p->next;
 8000734:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000736:	6999      	ldr	r1, [r3, #24]
 8000738:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 800073a:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800073c:	689c      	ldr	r4, [r3, #8]
 800073e:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000740:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000744:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000746:	688a      	ldr	r2, [r1, #8]
 8000748:	42a2      	cmp	r2, r4
 800074a:	d2fb      	bcs.n	8000744 <queueWriteFromISR+0x44>
  p->prev       = pqp->prev;
 800074c:	684a      	ldr	r2, [r1, #4]
 800074e:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 8000752:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8000754:	604b      	str	r3, [r1, #4]
 8000756:	2300      	movs	r3, #0
 8000758:	f383 8811 	msr	BASEPRI, r3
}
 800075c:	bc10      	pop	{r4}
 800075e:	4770      	bx	lr
 8000760:	2300      	movs	r3, #0
 8000762:	f383 8811 	msr	BASEPRI, r3
 8000766:	4770      	bx	lr
 8000768:	20001364 	.word	0x20001364
 800076c:	20001360 	.word	0x20001360
 8000770:	2000135e 	.word	0x2000135e
 8000774:	20000818 	.word	0x20000818
	...

08000780 <openLidButtonCallback>:
    if(is_lid_open == true) {
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <openLidButtonCallback+0x18>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	b122      	cbz	r2, 8000790 <openLidButtonCallback+0x10>
        is_lid_open = false;
 8000786:	2200      	movs	r2, #0
        queueWriteFromISR(LID_CLOSE_EV);
 8000788:	2002      	movs	r0, #2
        is_lid_open = false;
 800078a:	701a      	strb	r2, [r3, #0]
        queueWriteFromISR(LID_CLOSE_EV);
 800078c:	f7ff bfb8 	b.w	8000700 <queueWriteFromISR>
        is_lid_open = true;
 8000790:	2001      	movs	r0, #1
 8000792:	7018      	strb	r0, [r3, #0]
        queueWriteFromISR(LID_OPEN_EV);
 8000794:	f7ff bfb4 	b.w	8000700 <queueWriteFromISR>
 8000798:	20001350 	.word	0x20001350
 800079c:	00000000 	.word	0x00000000

080007a0 <motorTimerCallback>:
 80007a0:	2330      	movs	r3, #48	@ 0x30
static void motorTimerCallback(void *arg) {
 80007a2:	b410      	push	{r4}
 80007a4:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 80007a8:	4a16      	ldr	r2, [pc, #88]	@ (8000804 <motorTimerCallback+0x64>)
 80007aa:	6813      	ldr	r3, [r2, #0]
 80007ac:	2b09      	cmp	r3, #9
 80007ae:	d80d      	bhi.n	80007cc <motorTimerCallback+0x2c>
         *wr_ptr = evt;
 80007b0:	4915      	ldr	r1, [pc, #84]	@ (8000808 <motorTimerCallback+0x68>)
        qsize++;
 80007b2:	3301      	adds	r3, #1
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80007b4:	4815      	ldr	r0, [pc, #84]	@ (800080c <motorTimerCallback+0x6c>)
        qsize++;
 80007b6:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 80007b8:	680a      	ldr	r2, [r1, #0]
 80007ba:	f1a0 040a 	sub.w	r4, r0, #10
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80007be:	1c53      	adds	r3, r2, #1
 80007c0:	4283      	cmp	r3, r0
 80007c2:	bf28      	it	cs
 80007c4:	4623      	movcs	r3, r4
         *wr_ptr = evt;
 80007c6:	2005      	movs	r0, #5
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80007c8:	600b      	str	r3, [r1, #0]
         *wr_ptr = evt;
 80007ca:	7010      	strb	r0, [r2, #0]
  return (bool)(qp->next != qp);
 80007cc:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <motorTimerCallback+0x70>)
 80007ce:	6813      	ldr	r3, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d011      	beq.n	80007f8 <motorTimerCallback+0x58>
    tp->u.rdymsg = MSG_OK;
 80007d4:	2000      	movs	r0, #0
  qp->next       = p->next;
 80007d6:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80007d8:	6999      	ldr	r1, [r3, #24]
 80007da:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 80007dc:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80007de:	689c      	ldr	r4, [r3, #8]
 80007e0:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 80007e2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 80007e6:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80007e8:	688a      	ldr	r2, [r1, #8]
 80007ea:	42a2      	cmp	r2, r4
 80007ec:	d2fb      	bcs.n	80007e6 <motorTimerCallback+0x46>
  p->prev       = pqp->prev;
 80007ee:	684a      	ldr	r2, [r1, #4]
 80007f0:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 80007f4:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 80007f6:	604b      	str	r3, [r1, #4]
 80007f8:	2300      	movs	r3, #0
 80007fa:	f383 8811 	msr	BASEPRI, r3
}
 80007fe:	bc10      	pop	{r4}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20001364 	.word	0x20001364
 8000808:	20001360 	.word	0x20001360
 800080c:	2000135e 	.word	0x2000135e
 8000810:	20000818 	.word	0x20000818
	...

08000820 <soakTimerCallback>:
 8000820:	2330      	movs	r3, #48	@ 0x30
static void soakTimerCallback(void *arg) {
 8000822:	b410      	push	{r4}
 8000824:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 8000828:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <soakTimerCallback+0x64>)
 800082a:	6813      	ldr	r3, [r2, #0]
 800082c:	2b09      	cmp	r3, #9
 800082e:	d80d      	bhi.n	800084c <soakTimerCallback+0x2c>
         *wr_ptr = evt;
 8000830:	4915      	ldr	r1, [pc, #84]	@ (8000888 <soakTimerCallback+0x68>)
        qsize++;
 8000832:	3301      	adds	r3, #1
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000834:	4815      	ldr	r0, [pc, #84]	@ (800088c <soakTimerCallback+0x6c>)
        qsize++;
 8000836:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 8000838:	680a      	ldr	r2, [r1, #0]
 800083a:	f1a0 040a 	sub.w	r4, r0, #10
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 800083e:	1c53      	adds	r3, r2, #1
 8000840:	4283      	cmp	r3, r0
 8000842:	bf28      	it	cs
 8000844:	4623      	movcs	r3, r4
         *wr_ptr = evt;
 8000846:	2006      	movs	r0, #6
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000848:	600b      	str	r3, [r1, #0]
         *wr_ptr = evt;
 800084a:	7010      	strb	r0, [r2, #0]
  return (bool)(qp->next != qp);
 800084c:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <soakTimerCallback+0x70>)
 800084e:	6813      	ldr	r3, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8000850:	4293      	cmp	r3, r2
 8000852:	d011      	beq.n	8000878 <soakTimerCallback+0x58>
    tp->u.rdymsg = MSG_OK;
 8000854:	2000      	movs	r0, #0
  qp->next       = p->next;
 8000856:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000858:	6999      	ldr	r1, [r3, #24]
 800085a:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 800085c:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800085e:	689c      	ldr	r4, [r3, #8]
 8000860:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000862:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000866:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000868:	688a      	ldr	r2, [r1, #8]
 800086a:	42a2      	cmp	r2, r4
 800086c:	d2fb      	bcs.n	8000866 <soakTimerCallback+0x46>
  p->prev       = pqp->prev;
 800086e:	684a      	ldr	r2, [r1, #4]
 8000870:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 8000874:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8000876:	604b      	str	r3, [r1, #4]
 8000878:	2300      	movs	r3, #0
 800087a:	f383 8811 	msr	BASEPRI, r3
}
 800087e:	bc10      	pop	{r4}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20001364 	.word	0x20001364
 8000888:	20001360 	.word	0x20001360
 800088c:	2000135e 	.word	0x2000135e
 8000890:	20000818 	.word	0x20000818
	...

080008a0 <washTimerCallback>:
 80008a0:	2330      	movs	r3, #48	@ 0x30
static void washTimerCallback(void *arg) {
 80008a2:	b410      	push	{r4}
 80008a4:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 80008a8:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <washTimerCallback+0x64>)
 80008aa:	6813      	ldr	r3, [r2, #0]
 80008ac:	2b09      	cmp	r3, #9
 80008ae:	d80d      	bhi.n	80008cc <washTimerCallback+0x2c>
         *wr_ptr = evt;
 80008b0:	4915      	ldr	r1, [pc, #84]	@ (8000908 <washTimerCallback+0x68>)
        qsize++;
 80008b2:	3301      	adds	r3, #1
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80008b4:	4815      	ldr	r0, [pc, #84]	@ (800090c <washTimerCallback+0x6c>)
        qsize++;
 80008b6:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 80008b8:	680a      	ldr	r2, [r1, #0]
 80008ba:	f1a0 040a 	sub.w	r4, r0, #10
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80008be:	1c53      	adds	r3, r2, #1
 80008c0:	4283      	cmp	r3, r0
 80008c2:	bf28      	it	cs
 80008c4:	4623      	movcs	r3, r4
         *wr_ptr = evt;
 80008c6:	2007      	movs	r0, #7
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80008c8:	600b      	str	r3, [r1, #0]
         *wr_ptr = evt;
 80008ca:	7010      	strb	r0, [r2, #0]
  return (bool)(qp->next != qp);
 80008cc:	4a10      	ldr	r2, [pc, #64]	@ (8000910 <washTimerCallback+0x70>)
 80008ce:	6813      	ldr	r3, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d011      	beq.n	80008f8 <washTimerCallback+0x58>
    tp->u.rdymsg = MSG_OK;
 80008d4:	2000      	movs	r0, #0
  qp->next       = p->next;
 80008d6:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80008d8:	6999      	ldr	r1, [r3, #24]
 80008da:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 80008dc:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80008de:	689c      	ldr	r4, [r3, #8]
 80008e0:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 80008e2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 80008e6:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80008e8:	688a      	ldr	r2, [r1, #8]
 80008ea:	42a2      	cmp	r2, r4
 80008ec:	d2fb      	bcs.n	80008e6 <washTimerCallback+0x46>
  p->prev       = pqp->prev;
 80008ee:	684a      	ldr	r2, [r1, #4]
 80008f0:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 80008f4:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 80008f6:	604b      	str	r3, [r1, #4]
 80008f8:	2300      	movs	r3, #0
 80008fa:	f383 8811 	msr	BASEPRI, r3
}
 80008fe:	bc10      	pop	{r4}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20001364 	.word	0x20001364
 8000908:	20001360 	.word	0x20001360
 800090c:	2000135e 	.word	0x2000135e
 8000910:	20000818 	.word	0x20000818
	...

08000920 <rinseTimerCallback>:
 8000920:	2330      	movs	r3, #48	@ 0x30
static void rinseTimerCallback(void *arg) {
 8000922:	b410      	push	{r4}
 8000924:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 8000928:	4a16      	ldr	r2, [pc, #88]	@ (8000984 <rinseTimerCallback+0x64>)
 800092a:	6813      	ldr	r3, [r2, #0]
 800092c:	2b09      	cmp	r3, #9
 800092e:	d80d      	bhi.n	800094c <rinseTimerCallback+0x2c>
         *wr_ptr = evt;
 8000930:	4915      	ldr	r1, [pc, #84]	@ (8000988 <rinseTimerCallback+0x68>)
        qsize++;
 8000932:	3301      	adds	r3, #1
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000934:	4815      	ldr	r0, [pc, #84]	@ (800098c <rinseTimerCallback+0x6c>)
        qsize++;
 8000936:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 8000938:	680a      	ldr	r2, [r1, #0]
 800093a:	f1a0 040a 	sub.w	r4, r0, #10
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 800093e:	1c53      	adds	r3, r2, #1
 8000940:	4283      	cmp	r3, r0
 8000942:	bf28      	it	cs
 8000944:	4623      	movcs	r3, r4
         *wr_ptr = evt;
 8000946:	2008      	movs	r0, #8
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000948:	600b      	str	r3, [r1, #0]
         *wr_ptr = evt;
 800094a:	7010      	strb	r0, [r2, #0]
  return (bool)(qp->next != qp);
 800094c:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <rinseTimerCallback+0x70>)
 800094e:	6813      	ldr	r3, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8000950:	4293      	cmp	r3, r2
 8000952:	d011      	beq.n	8000978 <rinseTimerCallback+0x58>
    tp->u.rdymsg = MSG_OK;
 8000954:	2000      	movs	r0, #0
  qp->next       = p->next;
 8000956:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000958:	6999      	ldr	r1, [r3, #24]
 800095a:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 800095c:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800095e:	689c      	ldr	r4, [r3, #8]
 8000960:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000962:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000966:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000968:	688a      	ldr	r2, [r1, #8]
 800096a:	42a2      	cmp	r2, r4
 800096c:	d2fb      	bcs.n	8000966 <rinseTimerCallback+0x46>
  p->prev       = pqp->prev;
 800096e:	684a      	ldr	r2, [r1, #4]
 8000970:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 8000974:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8000976:	604b      	str	r3, [r1, #4]
 8000978:	2300      	movs	r3, #0
 800097a:	f383 8811 	msr	BASEPRI, r3
}
 800097e:	bc10      	pop	{r4}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20001364 	.word	0x20001364
 8000988:	20001360 	.word	0x20001360
 800098c:	2000135e 	.word	0x2000135e
 8000990:	20000818 	.word	0x20000818
	...

080009a0 <centrifugeTimerCallback>:
 80009a0:	2330      	movs	r3, #48	@ 0x30
static void centrifugeTimerCallback(void *arg) {
 80009a2:	b410      	push	{r4}
 80009a4:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 80009a8:	4a16      	ldr	r2, [pc, #88]	@ (8000a04 <centrifugeTimerCallback+0x64>)
 80009aa:	6813      	ldr	r3, [r2, #0]
 80009ac:	2b09      	cmp	r3, #9
 80009ae:	d80d      	bhi.n	80009cc <centrifugeTimerCallback+0x2c>
         *wr_ptr = evt;
 80009b0:	4915      	ldr	r1, [pc, #84]	@ (8000a08 <centrifugeTimerCallback+0x68>)
        qsize++;
 80009b2:	3301      	adds	r3, #1
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80009b4:	4815      	ldr	r0, [pc, #84]	@ (8000a0c <centrifugeTimerCallback+0x6c>)
        qsize++;
 80009b6:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 80009b8:	680a      	ldr	r2, [r1, #0]
 80009ba:	f1a0 040a 	sub.w	r4, r0, #10
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80009be:	1c53      	adds	r3, r2, #1
 80009c0:	4283      	cmp	r3, r0
 80009c2:	bf28      	it	cs
 80009c4:	4623      	movcs	r3, r4
         *wr_ptr = evt;
 80009c6:	2009      	movs	r0, #9
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 80009c8:	600b      	str	r3, [r1, #0]
         *wr_ptr = evt;
 80009ca:	7010      	strb	r0, [r2, #0]
  return (bool)(qp->next != qp);
 80009cc:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <centrifugeTimerCallback+0x70>)
 80009ce:	6813      	ldr	r3, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d011      	beq.n	80009f8 <centrifugeTimerCallback+0x58>
    tp->u.rdymsg = MSG_OK;
 80009d4:	2000      	movs	r0, #0
  qp->next       = p->next;
 80009d6:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80009d8:	6999      	ldr	r1, [r3, #24]
 80009da:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 80009dc:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80009de:	689c      	ldr	r4, [r3, #8]
 80009e0:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 80009e2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 80009e6:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80009e8:	688a      	ldr	r2, [r1, #8]
 80009ea:	42a2      	cmp	r2, r4
 80009ec:	d2fb      	bcs.n	80009e6 <centrifugeTimerCallback+0x46>
  p->prev       = pqp->prev;
 80009ee:	684a      	ldr	r2, [r1, #4]
 80009f0:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 80009f4:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 80009f6:	604b      	str	r3, [r1, #4]
 80009f8:	2300      	movs	r3, #0
 80009fa:	f383 8811 	msr	BASEPRI, r3
}
 80009fe:	bc10      	pop	{r4}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20001364 	.word	0x20001364
 8000a08:	20001360 	.word	0x20001360
 8000a0c:	2000135e 	.word	0x2000135e
 8000a10:	20000818 	.word	0x20000818
	...

08000a20 <startButtonCallback>:
 8000a20:	2330      	movs	r3, #48	@ 0x30
static void startButtonCallback(void *arg) {
 8000a22:	b410      	push	{r4}
 8000a24:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 8000a28:	4a16      	ldr	r2, [pc, #88]	@ (8000a84 <startButtonCallback+0x64>)
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	2b09      	cmp	r3, #9
 8000a2e:	d80d      	bhi.n	8000a4c <startButtonCallback+0x2c>
         *wr_ptr = evt;
 8000a30:	4915      	ldr	r1, [pc, #84]	@ (8000a88 <startButtonCallback+0x68>)
        qsize++;
 8000a32:	3301      	adds	r3, #1
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000a34:	4815      	ldr	r0, [pc, #84]	@ (8000a8c <startButtonCallback+0x6c>)
        qsize++;
 8000a36:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 8000a38:	680a      	ldr	r2, [r1, #0]
 8000a3a:	f1a0 040a 	sub.w	r4, r0, #10
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000a3e:	1c53      	adds	r3, r2, #1
 8000a40:	4283      	cmp	r3, r0
 8000a42:	bf28      	it	cs
 8000a44:	4623      	movcs	r3, r4
         *wr_ptr = evt;
 8000a46:	2000      	movs	r0, #0
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000a48:	600b      	str	r3, [r1, #0]
         *wr_ptr = evt;
 8000a4a:	7010      	strb	r0, [r2, #0]
  return (bool)(qp->next != qp);
 8000a4c:	4a10      	ldr	r2, [pc, #64]	@ (8000a90 <startButtonCallback+0x70>)
 8000a4e:	6813      	ldr	r3, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d011      	beq.n	8000a78 <startButtonCallback+0x58>
    tp->u.rdymsg = MSG_OK;
 8000a54:	2000      	movs	r0, #0
  qp->next       = p->next;
 8000a56:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000a58:	6999      	ldr	r1, [r3, #24]
 8000a5a:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 8000a5c:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8000a5e:	689c      	ldr	r4, [r3, #8]
 8000a60:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000a62:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000a66:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000a68:	688a      	ldr	r2, [r1, #8]
 8000a6a:	42a2      	cmp	r2, r4
 8000a6c:	d2fb      	bcs.n	8000a66 <startButtonCallback+0x46>
  p->prev       = pqp->prev;
 8000a6e:	684a      	ldr	r2, [r1, #4]
 8000a70:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 8000a74:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8000a76:	604b      	str	r3, [r1, #4]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f383 8811 	msr	BASEPRI, r3
}
 8000a7e:	bc10      	pop	{r4}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20001364 	.word	0x20001364
 8000a88:	20001360 	.word	0x20001360
 8000a8c:	2000135e 	.word	0x2000135e
 8000a90:	20000818 	.word	0x20000818
	...

08000aa0 <highWatermarkButtonCallback>:
 8000aa0:	2330      	movs	r3, #48	@ 0x30
static void highWatermarkButtonCallback(void *arg) {
 8000aa2:	b410      	push	{r4}
 8000aa4:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 8000aa8:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <highWatermarkButtonCallback+0x64>)
 8000aaa:	6813      	ldr	r3, [r2, #0]
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	d80d      	bhi.n	8000acc <highWatermarkButtonCallback+0x2c>
         *wr_ptr = evt;
 8000ab0:	4915      	ldr	r1, [pc, #84]	@ (8000b08 <highWatermarkButtonCallback+0x68>)
        qsize++;
 8000ab2:	3301      	adds	r3, #1
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000ab4:	4815      	ldr	r0, [pc, #84]	@ (8000b0c <highWatermarkButtonCallback+0x6c>)
        qsize++;
 8000ab6:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 8000ab8:	680a      	ldr	r2, [r1, #0]
 8000aba:	f1a0 040a 	sub.w	r4, r0, #10
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000abe:	1c53      	adds	r3, r2, #1
 8000ac0:	4283      	cmp	r3, r0
 8000ac2:	bf28      	it	cs
 8000ac4:	4623      	movcs	r3, r4
         *wr_ptr = evt;
 8000ac6:	2003      	movs	r0, #3
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000ac8:	600b      	str	r3, [r1, #0]
         *wr_ptr = evt;
 8000aca:	7010      	strb	r0, [r2, #0]
  return (bool)(qp->next != qp);
 8000acc:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <highWatermarkButtonCallback+0x70>)
 8000ace:	6813      	ldr	r3, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d011      	beq.n	8000af8 <highWatermarkButtonCallback+0x58>
    tp->u.rdymsg = MSG_OK;
 8000ad4:	2000      	movs	r0, #0
  qp->next       = p->next;
 8000ad6:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000ad8:	6999      	ldr	r1, [r3, #24]
 8000ada:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 8000adc:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8000ade:	689c      	ldr	r4, [r3, #8]
 8000ae0:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000ae2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000ae6:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000ae8:	688a      	ldr	r2, [r1, #8]
 8000aea:	42a2      	cmp	r2, r4
 8000aec:	d2fb      	bcs.n	8000ae6 <highWatermarkButtonCallback+0x46>
  p->prev       = pqp->prev;
 8000aee:	684a      	ldr	r2, [r1, #4]
 8000af0:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 8000af4:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8000af6:	604b      	str	r3, [r1, #4]
 8000af8:	2300      	movs	r3, #0
 8000afa:	f383 8811 	msr	BASEPRI, r3
}
 8000afe:	bc10      	pop	{r4}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20001364 	.word	0x20001364
 8000b08:	20001360 	.word	0x20001360
 8000b0c:	2000135e 	.word	0x2000135e
 8000b10:	20000818 	.word	0x20000818
	...

08000b20 <lowWatermarkButtonCallback>:
 8000b20:	2330      	movs	r3, #48	@ 0x30
static void lowWatermarkButtonCallback(void *arg) {
 8000b22:	b410      	push	{r4}
 8000b24:	f383 8811 	msr	BASEPRI, r3
    if(qsize < QUEUE_SIZE) {
 8000b28:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <lowWatermarkButtonCallback+0x64>)
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	2b09      	cmp	r3, #9
 8000b2e:	d80d      	bhi.n	8000b4c <lowWatermarkButtonCallback+0x2c>
         *wr_ptr = evt;
 8000b30:	4915      	ldr	r1, [pc, #84]	@ (8000b88 <lowWatermarkButtonCallback+0x68>)
        qsize++;
 8000b32:	3301      	adds	r3, #1
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000b34:	4815      	ldr	r0, [pc, #84]	@ (8000b8c <lowWatermarkButtonCallback+0x6c>)
        qsize++;
 8000b36:	6013      	str	r3, [r2, #0]
         *wr_ptr = evt;
 8000b38:	680a      	ldr	r2, [r1, #0]
 8000b3a:	f1a0 040a 	sub.w	r4, r0, #10
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000b3e:	1c53      	adds	r3, r2, #1
 8000b40:	4283      	cmp	r3, r0
 8000b42:	bf28      	it	cs
 8000b44:	4623      	movcs	r3, r4
         *wr_ptr = evt;
 8000b46:	2004      	movs	r0, #4
        if (++wr_ptr >= &queue[QUEUE_SIZE])
 8000b48:	600b      	str	r3, [r1, #0]
         *wr_ptr = evt;
 8000b4a:	7010      	strb	r0, [r2, #0]
  return (bool)(qp->next != qp);
 8000b4c:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <lowWatermarkButtonCallback+0x70>)
 8000b4e:	6813      	ldr	r3, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d011      	beq.n	8000b78 <lowWatermarkButtonCallback+0x58>
    tp->u.rdymsg = MSG_OK;
 8000b54:	2000      	movs	r0, #0
  qp->next       = p->next;
 8000b56:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000b58:	6999      	ldr	r1, [r3, #24]
 8000b5a:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 8000b5c:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8000b5e:	689c      	ldr	r4, [r3, #8]
 8000b60:	6298      	str	r0, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000b62:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000b66:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000b68:	688a      	ldr	r2, [r1, #8]
 8000b6a:	42a2      	cmp	r2, r4
 8000b6c:	d2fb      	bcs.n	8000b66 <lowWatermarkButtonCallback+0x46>
  p->prev       = pqp->prev;
 8000b6e:	684a      	ldr	r2, [r1, #4]
 8000b70:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 8000b74:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8000b76:	604b      	str	r3, [r1, #4]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f383 8811 	msr	BASEPRI, r3
}
 8000b7e:	bc10      	pop	{r4}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20001364 	.word	0x20001364
 8000b88:	20001360 	.word	0x20001360
 8000b8c:	2000135e 	.word	0x2000135e
 8000b90:	20000818 	.word	0x20000818
	...

08000ba0 <startTimer>:
    switch(vt){
 8000ba0:	3802      	subs	r0, #2
static void startTimer(timer_t vt, sysinterval_t time) {
 8000ba2:	b430      	push	{r4, r5}
    switch(vt){
 8000ba4:	2803      	cmp	r0, #3
 8000ba6:	f200 80a8 	bhi.w	8000cfa <startTimer+0x15a>
 8000baa:	e8df f000 	tbb	[pc, r0]
 8000bae:	5936      	.short	0x5936
 8000bb0:	027c      	.short	0x027c
 8000bb2:	2330      	movs	r3, #48	@ 0x30
 8000bb4:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000bb8:	4c6a      	ldr	r4, [pc, #424]	@ (8000d64 <startTimer+0x1c4>)
 8000bba:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 8098 	beq.w	8000cf2 <startTimer+0x152>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	68a0      	ldr	r0, [r4, #8]
  vtp->dlist.next = NULL;
 8000bc6:	2500      	movs	r5, #0
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000bc8:	4402      	add	r2, r0
  dlp->prev->next = dlp->next;
 8000bca:	6860      	ldr	r0, [r4, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	6003      	str	r3, [r0, #0]
  dlp->next->prev = dlp->prev;
 8000bd0:	6058      	str	r0, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	4864      	ldr	r0, [pc, #400]	@ (8000d68 <startTimer+0x1c8>)
  vtp->dlist.next = NULL;
 8000bd8:	6025      	str	r5, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000bda:	6183      	str	r3, [r0, #24]
  vtp->par     = par;
 8000bdc:	2500      	movs	r5, #0
  vtp->func    = vtfunc;
 8000bde:	4b63      	ldr	r3, [pc, #396]	@ (8000d6c <startTimer+0x1cc>)
 8000be0:	60e3      	str	r3, [r4, #12]
  dlp = dlhp->next;
 8000be2:	6903      	ldr	r3, [r0, #16]
  while (likely(dlp->delta < delta)) {
 8000be4:	689a      	ldr	r2, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000be6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000bea:	4291      	cmp	r1, r2
 8000bec:	d904      	bls.n	8000bf8 <startTimer+0x58>
    dlp = dlp->next;
 8000bee:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8000bf0:	1a89      	subs	r1, r1, r2
  while (likely(dlp->delta < delta)) {
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	d3fa      	bcc.n	8000bee <startTimer+0x4e>
  dlp->prev       = dlp->next->prev;
 8000bf8:	685a      	ldr	r2, [r3, #4]
  dlp->delta      = delta;
 8000bfa:	60a1      	str	r1, [r4, #8]
  dlp->prev       = dlp->next->prev;
 8000bfc:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->prev->next = dlp;
 8000c00:	6014      	str	r4, [r2, #0]
  dlp->delta -= delta;
 8000c02:	689a      	ldr	r2, [r3, #8]
  dlhp->prev      = dlp;
 8000c04:	605c      	str	r4, [r3, #4]
  dlp->delta -= delta;
 8000c06:	1a52      	subs	r2, r2, r1
  dlhp->delta = (sysinterval_t)-1;
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
  dlp->delta -= delta;
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	2300      	movs	r3, #0
  dlhp->delta = (sysinterval_t)-1;
 8000c10:	6181      	str	r1, [r0, #24]
 8000c12:	f383 8811 	msr	BASEPRI, r3
}
 8000c16:	bc30      	pop	{r4, r5}
 8000c18:	4770      	bx	lr
 8000c1a:	2330      	movs	r3, #48	@ 0x30
 8000c1c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000c20:	4c53      	ldr	r4, [pc, #332]	@ (8000d70 <startTimer+0x1d0>)
 8000c22:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d060      	beq.n	8000cea <startTimer+0x14a>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	68a0      	ldr	r0, [r4, #8]
  vtp->dlist.next = NULL;
 8000c2c:	2500      	movs	r5, #0
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000c2e:	4402      	add	r2, r0
  dlp->prev->next = dlp->next;
 8000c30:	6860      	ldr	r0, [r4, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	6003      	str	r3, [r0, #0]
  dlp->next->prev = dlp->prev;
 8000c36:	6058      	str	r0, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	484a      	ldr	r0, [pc, #296]	@ (8000d68 <startTimer+0x1c8>)
  vtp->dlist.next = NULL;
 8000c3e:	6025      	str	r5, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000c40:	6183      	str	r3, [r0, #24]
  vtp->par     = par;
 8000c42:	2500      	movs	r5, #0
  vtp->func    = vtfunc;
 8000c44:	4b4b      	ldr	r3, [pc, #300]	@ (8000d74 <startTimer+0x1d4>)
 8000c46:	60e3      	str	r3, [r4, #12]
  dlp = dlhp->next;
 8000c48:	6903      	ldr	r3, [r0, #16]
  while (likely(dlp->delta < delta)) {
 8000c4a:	689a      	ldr	r2, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d9d1      	bls.n	8000bf8 <startTimer+0x58>
    dlp = dlp->next;
 8000c54:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8000c56:	1a89      	subs	r1, r1, r2
  while (likely(dlp->delta < delta)) {
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	d3fa      	bcc.n	8000c54 <startTimer+0xb4>
 8000c5e:	e7cb      	b.n	8000bf8 <startTimer+0x58>
 8000c60:	2330      	movs	r3, #48	@ 0x30
 8000c62:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000c66:	4c44      	ldr	r4, [pc, #272]	@ (8000d78 <startTimer+0x1d8>)
 8000c68:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d03f      	beq.n	8000cee <startTimer+0x14e>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	68a0      	ldr	r0, [r4, #8]
  vtp->dlist.next = NULL;
 8000c72:	2500      	movs	r5, #0
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000c74:	4402      	add	r2, r0
  dlp->prev->next = dlp->next;
 8000c76:	6860      	ldr	r0, [r4, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	6003      	str	r3, [r0, #0]
  dlp->next->prev = dlp->prev;
 8000c7c:	6058      	str	r0, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	4839      	ldr	r0, [pc, #228]	@ (8000d68 <startTimer+0x1c8>)
  vtp->dlist.next = NULL;
 8000c84:	6025      	str	r5, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000c86:	6183      	str	r3, [r0, #24]
  vtp->par     = par;
 8000c88:	2500      	movs	r5, #0
  vtp->func    = vtfunc;
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d7c <startTimer+0x1dc>)
 8000c8c:	60e3      	str	r3, [r4, #12]
  dlp = dlhp->next;
 8000c8e:	6903      	ldr	r3, [r0, #16]
  while (likely(dlp->delta < delta)) {
 8000c90:	689a      	ldr	r2, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000c92:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c96:	4291      	cmp	r1, r2
 8000c98:	d9ae      	bls.n	8000bf8 <startTimer+0x58>
    dlp = dlp->next;
 8000c9a:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8000c9c:	1a89      	subs	r1, r1, r2
  while (likely(dlp->delta < delta)) {
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	428a      	cmp	r2, r1
 8000ca2:	d3fa      	bcc.n	8000c9a <startTimer+0xfa>
 8000ca4:	e7a8      	b.n	8000bf8 <startTimer+0x58>
 8000ca6:	2330      	movs	r3, #48	@ 0x30
 8000ca8:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000cac:	4c34      	ldr	r4, [pc, #208]	@ (8000d80 <startTimer+0x1e0>)
 8000cae:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000cb0:	b30b      	cbz	r3, 8000cf6 <startTimer+0x156>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	68a0      	ldr	r0, [r4, #8]
  vtp->dlist.next = NULL;
 8000cb6:	2500      	movs	r5, #0
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000cb8:	4402      	add	r2, r0
  dlp->prev->next = dlp->next;
 8000cba:	6860      	ldr	r0, [r4, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	6003      	str	r3, [r0, #0]
  dlp->next->prev = dlp->prev;
 8000cc0:	6058      	str	r0, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	4828      	ldr	r0, [pc, #160]	@ (8000d68 <startTimer+0x1c8>)
  vtp->dlist.next = NULL;
 8000cc8:	6025      	str	r5, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000cca:	6183      	str	r3, [r0, #24]
  vtp->par     = par;
 8000ccc:	2500      	movs	r5, #0
  vtp->func    = vtfunc;
 8000cce:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <startTimer+0x1e4>)
 8000cd0:	60e3      	str	r3, [r4, #12]
  dlp = dlhp->next;
 8000cd2:	6903      	ldr	r3, [r0, #16]
  while (likely(dlp->delta < delta)) {
 8000cd4:	689a      	ldr	r2, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000cd6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cda:	4291      	cmp	r1, r2
 8000cdc:	d98c      	bls.n	8000bf8 <startTimer+0x58>
    dlp = dlp->next;
 8000cde:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8000ce0:	1a89      	subs	r1, r1, r2
  while (likely(dlp->delta < delta)) {
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	d3fa      	bcc.n	8000cde <startTimer+0x13e>
 8000ce8:	e786      	b.n	8000bf8 <startTimer+0x58>
 8000cea:	481f      	ldr	r0, [pc, #124]	@ (8000d68 <startTimer+0x1c8>)
 8000cec:	e7a9      	b.n	8000c42 <startTimer+0xa2>
 8000cee:	481e      	ldr	r0, [pc, #120]	@ (8000d68 <startTimer+0x1c8>)
 8000cf0:	e7ca      	b.n	8000c88 <startTimer+0xe8>
 8000cf2:	481d      	ldr	r0, [pc, #116]	@ (8000d68 <startTimer+0x1c8>)
 8000cf4:	e772      	b.n	8000bdc <startTimer+0x3c>
 8000cf6:	481c      	ldr	r0, [pc, #112]	@ (8000d68 <startTimer+0x1c8>)
 8000cf8:	e7e8      	b.n	8000ccc <startTimer+0x12c>
 8000cfa:	2330      	movs	r3, #48	@ 0x30
 8000cfc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <startTimer+0x1e8>)
 8000d02:	681a      	ldr	r2, [r3, #0]
  if (chVTIsArmedI(vtp)) {
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d02a      	beq.n	8000d5e <startTimer+0x1be>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000d08:	6890      	ldr	r0, [r2, #8]
 8000d0a:	689c      	ldr	r4, [r3, #8]
  vtp->dlist.next = NULL;
 8000d0c:	2500      	movs	r5, #0
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000d0e:	4420      	add	r0, r4
  dlp->prev->next = dlp->next;
 8000d10:	685c      	ldr	r4, [r3, #4]
 8000d12:	6090      	str	r0, [r2, #8]
 8000d14:	6022      	str	r2, [r4, #0]
  dlp->next->prev = dlp->prev;
 8000d16:	6054      	str	r4, [r2, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	4812      	ldr	r0, [pc, #72]	@ (8000d68 <startTimer+0x1c8>)
  vtp->dlist.next = NULL;
 8000d1e:	601d      	str	r5, [r3, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000d20:	6182      	str	r2, [r0, #24]
  vtp->par     = par;
 8000d22:	2500      	movs	r5, #0
  vtp->func    = vtfunc;
 8000d24:	4a19      	ldr	r2, [pc, #100]	@ (8000d8c <startTimer+0x1ec>)
 8000d26:	60da      	str	r2, [r3, #12]
  dlp = dlhp->next;
 8000d28:	6902      	ldr	r2, [r0, #16]
  while (likely(dlp->delta < delta)) {
 8000d2a:	6894      	ldr	r4, [r2, #8]
  vtp->reload  = (sysinterval_t)0;
 8000d2c:	e9c3 5504 	strd	r5, r5, [r3, #16]
 8000d30:	42a1      	cmp	r1, r4
 8000d32:	d904      	bls.n	8000d3e <startTimer+0x19e>
    dlp = dlp->next;
 8000d34:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8000d36:	1b09      	subs	r1, r1, r4
  while (likely(dlp->delta < delta)) {
 8000d38:	6894      	ldr	r4, [r2, #8]
 8000d3a:	428c      	cmp	r4, r1
 8000d3c:	d3fa      	bcc.n	8000d34 <startTimer+0x194>
  dlp->prev       = dlp->next->prev;
 8000d3e:	6854      	ldr	r4, [r2, #4]
  dlp->delta      = delta;
 8000d40:	6099      	str	r1, [r3, #8]
  dlp->prev       = dlp->next->prev;
 8000d42:	e9c3 2400 	strd	r2, r4, [r3]
  dlp->prev->next = dlp;
 8000d46:	6023      	str	r3, [r4, #0]
  dlp->delta -= delta;
 8000d48:	6894      	ldr	r4, [r2, #8]
  dlhp->prev      = dlp;
 8000d4a:	6053      	str	r3, [r2, #4]
  dlp->delta -= delta;
 8000d4c:	1a64      	subs	r4, r4, r1
  dlhp->delta = (sysinterval_t)-1;
 8000d4e:	f04f 31ff 	mov.w	r1, #4294967295
  dlp->delta -= delta;
 8000d52:	6094      	str	r4, [r2, #8]
 8000d54:	2300      	movs	r3, #0
  dlhp->delta = (sysinterval_t)-1;
 8000d56:	6181      	str	r1, [r0, #24]
 8000d58:	f383 8811 	msr	BASEPRI, r3
                           vtfunc_t vtfunc, void *par) {

  chSysLock();
  chVTSetI(vtp, delay, vtfunc, par);
  chSysUnlock();
}
 8000d5c:	e75b      	b.n	8000c16 <startTimer+0x76>
 8000d5e:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <startTimer+0x1c8>)
 8000d60:	e7df      	b.n	8000d22 <startTimer+0x182>
 8000d62:	bf00      	nop
 8000d64:	200012d8 	.word	0x200012d8
 8000d68:	20001380 	.word	0x20001380
 8000d6c:	080009a1 	.word	0x080009a1
 8000d70:	20001320 	.word	0x20001320
 8000d74:	08000821 	.word	0x08000821
 8000d78:	20001308 	.word	0x20001308
 8000d7c:	080008a1 	.word	0x080008a1
 8000d80:	200012f0 	.word	0x200012f0
 8000d84:	08000921 	.word	0x08000921
 8000d88:	20001338 	.word	0x20001338
 8000d8c:	080007a1 	.word	0x080007a1

08000d90 <resumeTimer>:

static void resumeTimer(timer_t vt) {
    switch(vt) {
 8000d90:	3802      	subs	r0, #2
static void resumeTimer(timer_t vt) {
 8000d92:	b4f0      	push	{r4, r5, r6, r7}
    switch(vt) {
 8000d94:	2803      	cmp	r0, #3
 8000d96:	f200 80c5 	bhi.w	8000f24 <resumeTimer+0x194>
 8000d9a:	e8df f000 	tbb	[pc, r0]
 8000d9e:	4409      	.short	0x4409
 8000da0:	026d      	.short	0x026d
                chVTSet(&vt_rinse, remainingTime_rinse, rinseTimerCallback, NULL);
                vt_rinse_paused = false;
            }
            break;
        case CENTRIFUGE_TIMER:
            if(vt_centrifuge_paused == true) {
 8000da2:	4d7e      	ldr	r5, [pc, #504]	@ (8000f9c <resumeTimer+0x20c>)
 8000da4:	782b      	ldrb	r3, [r5, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 808f 	bne.w	8000eca <resumeTimer+0x13a>
                vt_centrifuge_paused = false;
            }
            break;
        default:
    }
}
 8000dac:	bcf0      	pop	{r4, r5, r6, r7}
 8000dae:	4770      	bx	lr
            if(vt_soak_paused == true){
 8000db0:	4d7b      	ldr	r5, [pc, #492]	@ (8000fa0 <resumeTimer+0x210>)
 8000db2:	782b      	ldrb	r3, [r5, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f9      	beq.n	8000dac <resumeTimer+0x1c>
                chVTSet(&vt_soak, remainingTime_soak, soakTimerCallback, NULL);
 8000db8:	4a7a      	ldr	r2, [pc, #488]	@ (8000fa4 <resumeTimer+0x214>)
 8000dba:	2330      	movs	r3, #48	@ 0x30
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000dc2:	4c79      	ldr	r4, [pc, #484]	@ (8000fa8 <resumeTimer+0x218>)
 8000dc4:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80a4 	beq.w	8000f14 <resumeTimer+0x184>
  vtp->dlist.next = NULL;
 8000dcc:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000dce:	f04f 37ff 	mov.w	r7, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000dd2:	68a0      	ldr	r0, [r4, #8]
 8000dd4:	6899      	ldr	r1, [r3, #8]
 8000dd6:	4401      	add	r1, r0
 8000dd8:	6099      	str	r1, [r3, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000dda:	4874      	ldr	r0, [pc, #464]	@ (8000fac <resumeTimer+0x21c>)
  dlp->prev->next = dlp->next;
 8000ddc:	6861      	ldr	r1, [r4, #4]
 8000dde:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8000de0:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8000de2:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000de4:	6187      	str	r7, [r0, #24]
  vtp->par     = par;
 8000de6:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 8000de8:	4971      	ldr	r1, [pc, #452]	@ (8000fb0 <resumeTimer+0x220>)
  dlp = dlhp->next;
 8000dea:	6903      	ldr	r3, [r0, #16]
 8000dec:	60e1      	str	r1, [r4, #12]
  while (likely(dlp->delta < delta)) {
 8000dee:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000df0:	e9c4 6604 	strd	r6, r6, [r4, #16]
 8000df4:	428a      	cmp	r2, r1
 8000df6:	d904      	bls.n	8000e02 <resumeTimer+0x72>
    dlp = dlp->next;
 8000df8:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8000dfa:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8000dfc:	6899      	ldr	r1, [r3, #8]
 8000dfe:	4291      	cmp	r1, r2
 8000e00:	d3fa      	bcc.n	8000df8 <resumeTimer+0x68>
  dlhp->delta = (sysinterval_t)-1;
 8000e02:	f04f 36ff 	mov.w	r6, #4294967295
  dlp->delta      = delta;
 8000e06:	60a2      	str	r2, [r4, #8]
  dlp->delta -= delta;
 8000e08:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 8000e0a:	6023      	str	r3, [r4, #0]
  dlp->delta -= delta;
 8000e0c:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	6062      	str	r2, [r4, #4]
  dlp->prev->next = dlp;
 8000e12:	6014      	str	r4, [r2, #0]
  dlp->delta -= delta;
 8000e14:	e9c3 4101 	strd	r4, r1, [r3, #4]
 8000e18:	2300      	movs	r3, #0
  dlhp->delta = (sysinterval_t)-1;
 8000e1a:	6186      	str	r6, [r0, #24]
 8000e1c:	f383 8811 	msr	BASEPRI, r3
                vt_centrifuge_paused = false;
 8000e20:	702b      	strb	r3, [r5, #0]
}
 8000e22:	bcf0      	pop	{r4, r5, r6, r7}
 8000e24:	4770      	bx	lr
            if(vt_wash_paused == true) {
 8000e26:	4d63      	ldr	r5, [pc, #396]	@ (8000fb4 <resumeTimer+0x224>)
 8000e28:	782b      	ldrb	r3, [r5, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0be      	beq.n	8000dac <resumeTimer+0x1c>
                chVTSet(&vt_wash, remainingTime_wash, washTimerCallback, NULL);
 8000e2e:	4a62      	ldr	r2, [pc, #392]	@ (8000fb8 <resumeTimer+0x228>)
 8000e30:	2330      	movs	r3, #48	@ 0x30
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000e38:	4c60      	ldr	r4, [pc, #384]	@ (8000fbc <resumeTimer+0x22c>)
 8000e3a:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d06d      	beq.n	8000f1c <resumeTimer+0x18c>
  vtp->dlist.next = NULL;
 8000e40:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000e42:	f04f 37ff 	mov.w	r7, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000e46:	68a0      	ldr	r0, [r4, #8]
 8000e48:	6899      	ldr	r1, [r3, #8]
 8000e4a:	4401      	add	r1, r0
 8000e4c:	6099      	str	r1, [r3, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000e4e:	4857      	ldr	r0, [pc, #348]	@ (8000fac <resumeTimer+0x21c>)
  dlp->prev->next = dlp->next;
 8000e50:	6861      	ldr	r1, [r4, #4]
 8000e52:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8000e54:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8000e56:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000e58:	6187      	str	r7, [r0, #24]
  vtp->par     = par;
 8000e5a:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 8000e5c:	4958      	ldr	r1, [pc, #352]	@ (8000fc0 <resumeTimer+0x230>)
  dlp = dlhp->next;
 8000e5e:	6903      	ldr	r3, [r0, #16]
 8000e60:	60e1      	str	r1, [r4, #12]
  while (likely(dlp->delta < delta)) {
 8000e62:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000e64:	e9c4 6604 	strd	r6, r6, [r4, #16]
 8000e68:	428a      	cmp	r2, r1
 8000e6a:	d9ca      	bls.n	8000e02 <resumeTimer+0x72>
    dlp = dlp->next;
 8000e6c:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8000e6e:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8000e70:	6899      	ldr	r1, [r3, #8]
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d3fa      	bcc.n	8000e6c <resumeTimer+0xdc>
 8000e76:	e7c4      	b.n	8000e02 <resumeTimer+0x72>
            if(vt_rinse_paused == true) {
 8000e78:	4d52      	ldr	r5, [pc, #328]	@ (8000fc4 <resumeTimer+0x234>)
 8000e7a:	782b      	ldrb	r3, [r5, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d095      	beq.n	8000dac <resumeTimer+0x1c>
                chVTSet(&vt_rinse, remainingTime_rinse, rinseTimerCallback, NULL);
 8000e80:	4a51      	ldr	r2, [pc, #324]	@ (8000fc8 <resumeTimer+0x238>)
 8000e82:	2330      	movs	r3, #48	@ 0x30
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000e8a:	4c50      	ldr	r4, [pc, #320]	@ (8000fcc <resumeTimer+0x23c>)
 8000e8c:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d042      	beq.n	8000f18 <resumeTimer+0x188>
  vtp->dlist.next = NULL;
 8000e92:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000e94:	f04f 37ff 	mov.w	r7, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000e98:	68a0      	ldr	r0, [r4, #8]
 8000e9a:	6899      	ldr	r1, [r3, #8]
 8000e9c:	4401      	add	r1, r0
 8000e9e:	6099      	str	r1, [r3, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000ea0:	4842      	ldr	r0, [pc, #264]	@ (8000fac <resumeTimer+0x21c>)
  dlp->prev->next = dlp->next;
 8000ea2:	6861      	ldr	r1, [r4, #4]
 8000ea4:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8000ea6:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8000ea8:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000eaa:	6187      	str	r7, [r0, #24]
  vtp->par     = par;
 8000eac:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 8000eae:	4948      	ldr	r1, [pc, #288]	@ (8000fd0 <resumeTimer+0x240>)
  dlp = dlhp->next;
 8000eb0:	6903      	ldr	r3, [r0, #16]
 8000eb2:	60e1      	str	r1, [r4, #12]
  while (likely(dlp->delta < delta)) {
 8000eb4:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000eb6:	e9c4 6604 	strd	r6, r6, [r4, #16]
 8000eba:	428a      	cmp	r2, r1
 8000ebc:	d9a1      	bls.n	8000e02 <resumeTimer+0x72>
    dlp = dlp->next;
 8000ebe:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8000ec0:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8000ec2:	6899      	ldr	r1, [r3, #8]
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d3fa      	bcc.n	8000ebe <resumeTimer+0x12e>
 8000ec8:	e79b      	b.n	8000e02 <resumeTimer+0x72>
                chVTSet(&vt_centrifuge, remainingTime_centrifuge, centrifugeTimerCallback, NULL);
 8000eca:	4a42      	ldr	r2, [pc, #264]	@ (8000fd4 <resumeTimer+0x244>)
 8000ecc:	2330      	movs	r3, #48	@ 0x30
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000ed4:	4c40      	ldr	r4, [pc, #256]	@ (8000fd8 <resumeTimer+0x248>)
 8000ed6:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000ed8:	b313      	cbz	r3, 8000f20 <resumeTimer+0x190>
  vtp->dlist.next = NULL;
 8000eda:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000edc:	f04f 37ff 	mov.w	r7, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000ee0:	68a0      	ldr	r0, [r4, #8]
 8000ee2:	6899      	ldr	r1, [r3, #8]
 8000ee4:	4401      	add	r1, r0
 8000ee6:	6099      	str	r1, [r3, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000ee8:	4830      	ldr	r0, [pc, #192]	@ (8000fac <resumeTimer+0x21c>)
  dlp->prev->next = dlp->next;
 8000eea:	6861      	ldr	r1, [r4, #4]
 8000eec:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8000eee:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8000ef0:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000ef2:	6187      	str	r7, [r0, #24]
  vtp->par     = par;
 8000ef4:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 8000ef6:	4939      	ldr	r1, [pc, #228]	@ (8000fdc <resumeTimer+0x24c>)
  dlp = dlhp->next;
 8000ef8:	6903      	ldr	r3, [r0, #16]
 8000efa:	60e1      	str	r1, [r4, #12]
  while (likely(dlp->delta < delta)) {
 8000efc:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000efe:	e9c4 6604 	strd	r6, r6, [r4, #16]
 8000f02:	428a      	cmp	r2, r1
 8000f04:	f67f af7d 	bls.w	8000e02 <resumeTimer+0x72>
    dlp = dlp->next;
 8000f08:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8000f0a:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8000f0c:	6899      	ldr	r1, [r3, #8]
 8000f0e:	4291      	cmp	r1, r2
 8000f10:	d3fa      	bcc.n	8000f08 <resumeTimer+0x178>
 8000f12:	e776      	b.n	8000e02 <resumeTimer+0x72>
 8000f14:	4825      	ldr	r0, [pc, #148]	@ (8000fac <resumeTimer+0x21c>)
 8000f16:	e766      	b.n	8000de6 <resumeTimer+0x56>
 8000f18:	4824      	ldr	r0, [pc, #144]	@ (8000fac <resumeTimer+0x21c>)
 8000f1a:	e7c7      	b.n	8000eac <resumeTimer+0x11c>
 8000f1c:	4823      	ldr	r0, [pc, #140]	@ (8000fac <resumeTimer+0x21c>)
 8000f1e:	e79c      	b.n	8000e5a <resumeTimer+0xca>
 8000f20:	4822      	ldr	r0, [pc, #136]	@ (8000fac <resumeTimer+0x21c>)
 8000f22:	e7e7      	b.n	8000ef4 <resumeTimer+0x164>
            if(vt_motor_paused == true) {
 8000f24:	4d2e      	ldr	r5, [pc, #184]	@ (8000fe0 <resumeTimer+0x250>)
 8000f26:	782b      	ldrb	r3, [r5, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f43f af3f 	beq.w	8000dac <resumeTimer+0x1c>
                chVTSet(&vt_motor, remainingTime_motor, motorTimerCallback, NULL);
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <resumeTimer+0x254>)
 8000f30:	2330      	movs	r3, #48	@ 0x30
 8000f32:	6811      	ldr	r1, [r2, #0]
 8000f34:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000f38:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <resumeTimer+0x258>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
  if (chVTIsArmedI(vtp)) {
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d02b      	beq.n	8000f98 <resumeTimer+0x208>
  vtp->dlist.next = NULL;
 8000f40:	2400      	movs	r4, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000f42:	f04f 36ff 	mov.w	r6, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000f46:	6890      	ldr	r0, [r2, #8]
 8000f48:	689f      	ldr	r7, [r3, #8]
 8000f4a:	4438      	add	r0, r7
 8000f4c:	6090      	str	r0, [r2, #8]
  dlp->prev->next = dlp->next;
 8000f4e:	6858      	ldr	r0, [r3, #4]
 8000f50:	6002      	str	r2, [r0, #0]
  dlp->next->prev = dlp->prev;
 8000f52:	6050      	str	r0, [r2, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000f54:	4815      	ldr	r0, [pc, #84]	@ (8000fac <resumeTimer+0x21c>)
  vtp->dlist.next = NULL;
 8000f56:	601c      	str	r4, [r3, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000f58:	6186      	str	r6, [r0, #24]
  vtp->par     = par;
 8000f5a:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 8000f5c:	4c23      	ldr	r4, [pc, #140]	@ (8000fec <resumeTimer+0x25c>)
  dlp = dlhp->next;
 8000f5e:	6902      	ldr	r2, [r0, #16]
 8000f60:	60dc      	str	r4, [r3, #12]
  while (likely(dlp->delta < delta)) {
 8000f62:	6894      	ldr	r4, [r2, #8]
  vtp->reload  = (sysinterval_t)0;
 8000f64:	e9c3 6604 	strd	r6, r6, [r3, #16]
 8000f68:	42a1      	cmp	r1, r4
 8000f6a:	d904      	bls.n	8000f76 <resumeTimer+0x1e6>
    dlp = dlp->next;
 8000f6c:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8000f6e:	1b09      	subs	r1, r1, r4
  while (likely(dlp->delta < delta)) {
 8000f70:	6894      	ldr	r4, [r2, #8]
 8000f72:	428c      	cmp	r4, r1
 8000f74:	d3fa      	bcc.n	8000f6c <resumeTimer+0x1dc>
  dlhp->delta = (sysinterval_t)-1;
 8000f76:	f04f 36ff 	mov.w	r6, #4294967295
  dlp->delta      = delta;
 8000f7a:	6099      	str	r1, [r3, #8]
  dlp->delta -= delta;
 8000f7c:	6894      	ldr	r4, [r2, #8]
  dlp->next       = dlhp;
 8000f7e:	601a      	str	r2, [r3, #0]
  dlp->delta -= delta;
 8000f80:	1a64      	subs	r4, r4, r1
  dlp->prev       = dlp->next->prev;
 8000f82:	6851      	ldr	r1, [r2, #4]
 8000f84:	6059      	str	r1, [r3, #4]
  dlp->prev->next = dlp;
 8000f86:	600b      	str	r3, [r1, #0]
  dlp->delta -= delta;
 8000f88:	e9c2 3401 	strd	r3, r4, [r2, #4]
 8000f8c:	2300      	movs	r3, #0
  dlhp->delta = (sysinterval_t)-1;
 8000f8e:	6186      	str	r6, [r0, #24]
 8000f90:	f383 8811 	msr	BASEPRI, r3
                vt_motor_paused = false;
 8000f94:	702b      	strb	r3, [r5, #0]
 8000f96:	e709      	b.n	8000dac <resumeTimer+0x1c>
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <resumeTimer+0x21c>)
 8000f9a:	e7de      	b.n	8000f5a <resumeTimer+0x1ca>
 8000f9c:	200012b4 	.word	0x200012b4
 8000fa0:	200012cc 	.word	0x200012cc
 8000fa4:	200012c8 	.word	0x200012c8
 8000fa8:	20001320 	.word	0x20001320
 8000fac:	20001380 	.word	0x20001380
 8000fb0:	08000821 	.word	0x08000821
 8000fb4:	200012c4 	.word	0x200012c4
 8000fb8:	200012c0 	.word	0x200012c0
 8000fbc:	20001308 	.word	0x20001308
 8000fc0:	080008a1 	.word	0x080008a1
 8000fc4:	200012bc 	.word	0x200012bc
 8000fc8:	200012b8 	.word	0x200012b8
 8000fcc:	200012f0 	.word	0x200012f0
 8000fd0:	08000921 	.word	0x08000921
 8000fd4:	200012b0 	.word	0x200012b0
 8000fd8:	200012d8 	.word	0x200012d8
 8000fdc:	080009a1 	.word	0x080009a1
 8000fe0:	200012d4 	.word	0x200012d4
 8000fe4:	200012d0 	.word	0x200012d0
 8000fe8:	20001338 	.word	0x20001338
 8000fec:	080007a1 	.word	0x080007a1

08000ff0 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8000ff0:	b4f0      	push	{r4, r5, r6, r7}
  if (mp->owner != NULL) {
 8000ff2:	6883      	ldr	r3, [r0, #8]
 8000ff4:	4c35      	ldr	r4, [pc, #212]	@ (80010cc <chMtxLockS+0xdc>)
 8000ff6:	68e1      	ldr	r1, [r4, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d047      	beq.n	800108c <chMtxLockS+0x9c>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8000ffc:	688d      	ldr	r5, [r1, #8]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	4295      	cmp	r5, r2
 8001002:	d917      	bls.n	8001034 <chMtxLockS+0x44>
        switch (tp->state) {
 8001004:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8001008:	609d      	str	r5, [r3, #8]
        switch (tp->state) {
 800100a:	2a06      	cmp	r2, #6
 800100c:	d044      	beq.n	8001098 <chMtxLockS+0xa8>
 800100e:	2a07      	cmp	r2, #7
 8001010:	d02d      	beq.n	800106e <chMtxLockS+0x7e>
 8001012:	b97a      	cbnz	r2, 8001034 <chMtxLockS+0x44>
  p->prev->next = p->next;
 8001014:	e9d3 6700 	ldrd	r6, r7, [r3]
 8001018:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 800101a:	6077      	str	r7, [r6, #4]
 800101c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001020:	699a      	ldr	r2, [r3, #24]
    pqp = pqp->next;
 8001022:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001024:	6896      	ldr	r6, [r2, #8]
 8001026:	42ae      	cmp	r6, r5
 8001028:	d2fb      	bcs.n	8001022 <chMtxLockS+0x32>
  p->next       = pqp;
 800102a:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800102c:	6855      	ldr	r5, [r2, #4]
 800102e:	605d      	str	r5, [r3, #4]
  p->prev->next = p;
 8001030:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 8001032:	6053      	str	r3, [r2, #4]
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 8001034:	4603      	mov	r3, r0
 8001036:	e003      	b.n	8001040 <chMtxLockS+0x50>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 8001038:	688a      	ldr	r2, [r1, #8]
 800103a:	689d      	ldr	r5, [r3, #8]
 800103c:	4295      	cmp	r5, r2
 800103e:	d302      	bcc.n	8001046 <chMtxLockS+0x56>
    cp = cp->next;
 8001040:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8001042:	4298      	cmp	r0, r3
 8001044:	d1f8      	bne.n	8001038 <chMtxLockS+0x48>
  otp->state = newstate;
 8001046:	2506      	movs	r5, #6
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
  tp->next       = cp;
  tp->prev       = cp->prev;
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	e9c1 3200 	strd	r3, r2, [r1]
  tp->prev->next = tp;
 800104e:	6011      	str	r1, [r2, #0]
  ntp->state = CH_STATE_CURRENT;
 8001050:	2201      	movs	r2, #1
  cp->prev       = tp;
 8001052:	6059      	str	r1, [r3, #4]
      currtp->u.wtmtxp = mp;
 8001054:	6288      	str	r0, [r1, #40]	@ 0x28
  ch_priority_queue_t *p = pqp->next;
 8001056:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8001058:	f881 5024 	strb.w	r5, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 800105c:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800105e:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001060:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  pqp->next       = p->next;
 8001064:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8001066:	60e0      	str	r0, [r4, #12]
}
 8001068:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(ntp, otp);
 800106a:	f7ff b8e9 	b.w	8000240 <__port_switch>
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 800106e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  p->prev->next = p->next;
 8001070:	685f      	ldr	r7, [r3, #4]
 8001072:	681e      	ldr	r6, [r3, #0]
  ch_queue_t *cp = qp;
 8001074:	462a      	mov	r2, r5
 8001076:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8001078:	6077      	str	r7, [r6, #4]
 800107a:	e003      	b.n	8001084 <chMtxLockS+0x94>
  } while ((cp != qp) &&
 800107c:	6896      	ldr	r6, [r2, #8]
 800107e:	689f      	ldr	r7, [r3, #8]
 8001080:	42be      	cmp	r6, r7
 8001082:	d3d2      	bcc.n	800102a <chMtxLockS+0x3a>
    cp = cp->next;
 8001084:	6812      	ldr	r2, [r2, #0]
  } while ((cp != qp) &&
 8001086:	4295      	cmp	r5, r2
 8001088:	d1f8      	bne.n	800107c <chMtxLockS+0x8c>
 800108a:	e7ce      	b.n	800102a <chMtxLockS+0x3a>
    mp->next = currtp->mtxlist;
 800108c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
}
 800108e:	bcf0      	pop	{r4, r5, r6, r7}
    mp->next = currtp->mtxlist;
 8001090:	e9c0 1302 	strd	r1, r3, [r0, #8]
    currtp->mtxlist = mp;
 8001094:	63c8      	str	r0, [r1, #60]	@ 0x3c
}
 8001096:	4770      	bx	lr
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8001098:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  p->prev->next = p->next;
 800109a:	685f      	ldr	r7, [r3, #4]
 800109c:	681e      	ldr	r6, [r3, #0]
  ch_queue_t *cp = qp;
 800109e:	462a      	mov	r2, r5
 80010a0:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 80010a2:	6077      	str	r7, [r6, #4]
 80010a4:	e003      	b.n	80010ae <chMtxLockS+0xbe>
  } while ((cp != qp) &&
 80010a6:	6896      	ldr	r6, [r2, #8]
 80010a8:	689f      	ldr	r7, [r3, #8]
 80010aa:	42be      	cmp	r6, r7
 80010ac:	d302      	bcc.n	80010b4 <chMtxLockS+0xc4>
    cp = cp->next;
 80010ae:	6812      	ldr	r2, [r2, #0]
  } while ((cp != qp) &&
 80010b0:	4295      	cmp	r5, r2
 80010b2:	d1f8      	bne.n	80010a6 <chMtxLockS+0xb6>
  tp->prev       = cp->prev;
 80010b4:	6856      	ldr	r6, [r2, #4]
  tp->next       = cp;
 80010b6:	601a      	str	r2, [r3, #0]
  tp->prev       = cp->prev;
 80010b8:	605e      	str	r6, [r3, #4]
  tp->prev->next = tp;
 80010ba:	6033      	str	r3, [r6, #0]
  cp->prev       = tp;
 80010bc:	6053      	str	r3, [r2, #4]
          tp = tp->u.wtmtxp->owner;
 80010be:	68ab      	ldr	r3, [r5, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 80010c0:	688d      	ldr	r5, [r1, #8]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	42aa      	cmp	r2, r5
 80010c6:	d39d      	bcc.n	8001004 <chMtxLockS+0x14>
 80010c8:	e7b4      	b.n	8001034 <chMtxLockS+0x44>
 80010ca:	bf00      	nop
 80010cc:	20001380 	.word	0x20001380

080010d0 <stateMachine>:

static THD_FUNCTION(stateMachine, arg) {
 80010d0:	4d9f      	ldr	r5, [pc, #636]	@ (8001350 <stateMachine+0x280>)
 80010d2:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  ch_queue_t *cp = qp;
 80010d6:	46aa      	mov	sl, r5
 80010d8:	46a9      	mov	r9, r5
 80010da:	4f9e      	ldr	r7, [pc, #632]	@ (8001354 <stateMachine+0x284>)
 80010dc:	f8df b278 	ldr.w	fp, [pc, #632]	@ 8001358 <stateMachine+0x288>
 80010e0:	b083      	sub	sp, #12
 80010e2:	2630      	movs	r6, #48	@ 0x30
 80010e4:	f386 8811 	msr	BASEPRI, r6
    chMtxLockS(&mtx);
 80010e8:	489c      	ldr	r0, [pc, #624]	@ (800135c <stateMachine+0x28c>)
 80010ea:	f7ff ff81 	bl	8000ff0 <chMtxLockS>
    while (qsize == 0)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d136      	bne.n	8001162 <stateMachine+0x92>
  otp->state = newstate;
 80010f4:	f04f 0807 	mov.w	r8, #7
 80010f8:	9601      	str	r6, [sp, #4]
 80010fa:	9b01      	ldr	r3, [sp, #4]
 80010fc:	f383 8811 	msr	BASEPRI, r3
 8001100:	f8db 600c 	ldr.w	r6, [fp, #12]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8001104:	6bf4      	ldr	r4, [r6, #60]	@ 0x3c
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff fac2 	bl	8000690 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 800110c:	62b5      	str	r5, [r6, #40]	@ 0x28
 800110e:	4b90      	ldr	r3, [pc, #576]	@ (8001350 <stateMachine+0x280>)
 8001110:	464d      	mov	r5, r9
 8001112:	e003      	b.n	800111c <stateMachine+0x4c>
  } while ((cp != qp) &&
 8001114:	6899      	ldr	r1, [r3, #8]
 8001116:	68b2      	ldr	r2, [r6, #8]
 8001118:	4291      	cmp	r1, r2
 800111a:	d302      	bcc.n	8001122 <stateMachine+0x52>
    cp = cp->next;
 800111c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 800111e:	4553      	cmp	r3, sl
 8001120:	d1f8      	bne.n	8001114 <stateMachine+0x44>
  ntp->state = CH_STATE_CURRENT;
 8001122:	2201      	movs	r2, #1
  tp->prev       = cp->prev;
 8001124:	6859      	ldr	r1, [r3, #4]
  tp->next       = cp;
 8001126:	6033      	str	r3, [r6, #0]
  tp->prev       = cp->prev;
 8001128:	6071      	str	r1, [r6, #4]
  tp->prev->next = tp;
 800112a:	600e      	str	r6, [r1, #0]
  thread_t *otp = __instance_get_currthread(oip);
 800112c:	f8db 100c 	ldr.w	r1, [fp, #12]
  ch_priority_queue_t *p = pqp->next;
 8001130:	f8db 0000 	ldr.w	r0, [fp]
  cp->prev       = tp;
 8001134:	605e      	str	r6, [r3, #4]
  otp->state = newstate;
 8001136:	f881 8024 	strb.w	r8, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 800113a:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800113c:	f8c3 b004 	str.w	fp, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001140:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  pqp->next       = p->next;
 8001144:	f8cb 3000 	str.w	r3, [fp]
  __instance_set_currthread(oip, ntp);
 8001148:	f8cb 000c 	str.w	r0, [fp, #12]
  chSysSwitch(ntp, otp);
 800114c:	f7ff f878 	bl	8000240 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  chSchGoSleepS(CH_STATE_WTCOND);
  msg = currtp->u.rdymsg;
  chMtxLockS(mp);
 8001150:	4620      	mov	r0, r4
 8001152:	f7ff ff4d 	bl	8000ff0 <chMtxLockS>
 8001156:	2300      	movs	r3, #0
 8001158:	f383 8811 	msr	BASEPRI, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0cb      	beq.n	80010fa <stateMachine+0x2a>
    evt = *rd_ptr;
 8001162:	4a7f      	ldr	r2, [pc, #508]	@ (8001360 <stateMachine+0x290>)
    qsize--;
 8001164:	3b01      	subs	r3, #1
 8001166:	603b      	str	r3, [r7, #0]
    evt = *rd_ptr;
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	497e      	ldr	r1, [pc, #504]	@ (8001364 <stateMachine+0x294>)
 800116c:	f813 4b01 	ldrb.w	r4, [r3], #1
    if (++rd_ptr >= &queue[QUEUE_SIZE])
 8001170:	f101 060a 	add.w	r6, r1, #10
 8001174:	42b3      	cmp	r3, r6
 8001176:	bf28      	it	cs
 8001178:	460b      	movcs	r3, r1
    chMtxUnlockS(&mtx);
 800117a:	4878      	ldr	r0, [pc, #480]	@ (800135c <stateMachine+0x28c>)
    if (++rd_ptr >= &queue[QUEUE_SIZE])
 800117c:	6013      	str	r3, [r2, #0]
    chMtxUnlockS(&mtx);
 800117e:	f7ff fa87 	bl	8000690 <chMtxUnlockS>
 8001182:	2300      	movs	r3, #0
 8001184:	f383 8811 	msr	BASEPRI, r3
    (void)arg;
    event_t event;

    while(1) {
        event = queueRead();
        switch(event){
 8001188:	2c09      	cmp	r4, #9
 800118a:	d8aa      	bhi.n	80010e2 <stateMachine+0x12>
 800118c:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001190:	014e0161 	.word	0x014e0161
 8001194:	00c5010a 	.word	0x00c5010a
 8001198:	011f0138 	.word	0x011f0138
 800119c:	009400a8 	.word	0x009400a8
 80011a0:	000a0080 	.word	0x000a0080
                    chVTReset(&vt_motor);
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0049);
                }
                break;
            case TIMEOUT_CENTRIFUGE_EV:
                if(current_state == CENTRIFUGE) {
 80011a4:	4b70      	ldr	r3, [pc, #448]	@ (8001368 <stateMachine+0x298>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b0b      	cmp	r3, #11
 80011aa:	d19a      	bne.n	80010e2 <stateMachine+0x12>
                    previous_state = IDLE;
 80011ac:	2200      	movs	r2, #0
 80011ae:	496f      	ldr	r1, [pc, #444]	@ (800136c <stateMachine+0x29c>)
 80011b0:	2330      	movs	r3, #48	@ 0x30
 80011b2:	700a      	strb	r2, [r1, #0]
                    current_state = IDLE;
 80011b4:	496c      	ldr	r1, [pc, #432]	@ (8001368 <stateMachine+0x298>)
 80011b6:	700a      	strb	r2, [r1, #0]
 80011b8:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80011bc:	4e6c      	ldr	r6, [pc, #432]	@ (8001370 <stateMachine+0x2a0>)
 80011be:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 80011c0:	b15b      	cbz	r3, 80011da <stateMachine+0x10a>
  vtlp->dlist.delta = (sysinterval_t)-1;
 80011c2:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 80011c6:	6899      	ldr	r1, [r3, #8]
 80011c8:	68b4      	ldr	r4, [r6, #8]
 80011ca:	4421      	add	r1, r4
 80011cc:	6099      	str	r1, [r3, #8]
  dlp->prev->next = dlp->next;
 80011ce:	6871      	ldr	r1, [r6, #4]
 80011d0:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 80011d2:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 80011d4:	6032      	str	r2, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80011d6:	f8cb 0018 	str.w	r0, [fp, #24]
 80011da:	2100      	movs	r1, #0
 80011dc:	f381 8811 	msr	BASEPRI, r1
 80011e0:	2330      	movs	r3, #48	@ 0x30
 80011e2:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80011e6:	4e63      	ldr	r6, [pc, #396]	@ (8001374 <stateMachine+0x2a4>)
 80011e8:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 80011ea:	b15b      	cbz	r3, 8001204 <stateMachine+0x134>
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	68b4      	ldr	r4, [r6, #8]
 80011f4:	4422      	add	r2, r4
 80011f6:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80011f8:	6872      	ldr	r2, [r6, #4]
 80011fa:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80011fc:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 80011fe:	6031      	str	r1, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001200:	f8cb 0018 	str.w	r0, [fp, #24]
 8001204:	2100      	movs	r1, #0
 8001206:	f381 8811 	msr	BASEPRI, r1
 800120a:	2330      	movs	r3, #48	@ 0x30
 800120c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001210:	4e59      	ldr	r6, [pc, #356]	@ (8001378 <stateMachine+0x2a8>)
 8001212:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 8001214:	b15b      	cbz	r3, 800122e <stateMachine+0x15e>
 8001216:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	68b4      	ldr	r4, [r6, #8]
 800121e:	4422      	add	r2, r4
 8001220:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001222:	6872      	ldr	r2, [r6, #4]
 8001224:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001226:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001228:	6031      	str	r1, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 800122a:	f8cb 0018 	str.w	r0, [fp, #24]
 800122e:	2100      	movs	r1, #0
 8001230:	f381 8811 	msr	BASEPRI, r1
 8001234:	2330      	movs	r3, #48	@ 0x30
 8001236:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 800123a:	4e50      	ldr	r6, [pc, #320]	@ (800137c <stateMachine+0x2ac>)
 800123c:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 800123e:	b15b      	cbz	r3, 8001258 <stateMachine+0x188>
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	68b4      	ldr	r4, [r6, #8]
 8001248:	4422      	add	r2, r4
 800124a:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 800124c:	6872      	ldr	r2, [r6, #4]
 800124e:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001250:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001252:	6031      	str	r1, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001254:	f8cb 0018 	str.w	r0, [fp, #24]
 8001258:	2100      	movs	r1, #0
 800125a:	f381 8811 	msr	BASEPRI, r1
 800125e:	2330      	movs	r3, #48	@ 0x30
 8001260:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001264:	4e46      	ldr	r6, [pc, #280]	@ (8001380 <stateMachine+0x2b0>)
 8001266:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 8001268:	b15b      	cbz	r3, 8001282 <stateMachine+0x1b2>
 800126a:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	68b4      	ldr	r4, [r6, #8]
 8001272:	4422      	add	r2, r4
 8001274:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001276:	6872      	ldr	r2, [r6, #4]
 8001278:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 800127a:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 800127c:	6031      	str	r1, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 800127e:	f8cb 0018 	str.w	r0, [fp, #24]
 8001282:	2300      	movs	r3, #0
 8001284:	f383 8811 	msr	BASEPRI, r3
                    chVTReset(&vt_motor);
                    chVTReset(&vt_soak);
                    chVTReset(&vt_wash);
                    chVTReset(&vt_rinse);
                    chVTReset(&vt_centrifuge);
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 8001288:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <stateMachine+0x2b4>)
 800128a:	4a3f      	ldr	r2, [pc, #252]	@ (8001388 <stateMachine+0x2b8>)
 800128c:	6113      	str	r3, [r2, #16]
 800128e:	e728      	b.n	80010e2 <stateMachine+0x12>
                if(current_state == RINSE_TURN_CLKWISE) {
 8001290:	4b35      	ldr	r3, [pc, #212]	@ (8001368 <stateMachine+0x298>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b08      	cmp	r3, #8
 8001296:	f000 8218 	beq.w	80016ca <stateMachine+0x5fa>
                else if(current_state == RINSE_TURN_ANTI_CLKWISE) {
 800129a:	2b09      	cmp	r3, #9
 800129c:	f47f af21 	bne.w	80010e2 <stateMachine+0x12>
                    previous_state = RINSE_TURN_ANTI_CLKWISE;
 80012a0:	4a32      	ldr	r2, [pc, #200]	@ (800136c <stateMachine+0x29c>)
                    chVTReset(&vt_motor);
 80012a2:	4833      	ldr	r0, [pc, #204]	@ (8001370 <stateMachine+0x2a0>)
                    previous_state = RINSE_TURN_ANTI_CLKWISE;
 80012a4:	7013      	strb	r3, [r2, #0]
                    current_state = RINSE_WATER_OUT;
 80012a6:	230a      	movs	r3, #10
 80012a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001368 <stateMachine+0x298>)
 80012aa:	7013      	strb	r3, [r2, #0]
                    chVTReset(&vt_motor);
 80012ac:	f7ff f8a8 	bl	8000400 <chVTReset>
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0049);
 80012b0:	4b36      	ldr	r3, [pc, #216]	@ (800138c <stateMachine+0x2bc>)
 80012b2:	4a35      	ldr	r2, [pc, #212]	@ (8001388 <stateMachine+0x2b8>)
 80012b4:	6113      	str	r3, [r2, #16]
 80012b6:	e714      	b.n	80010e2 <stateMachine+0x12>
                if(current_state == WASH_TURN_CLKWISE) {
 80012b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <stateMachine+0x298>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	f000 82ab 	beq.w	8001818 <stateMachine+0x748>
                else if(current_state == WASH_TURN_ANTI_CLKWISE) {
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	f47f af0d 	bne.w	80010e2 <stateMachine+0x12>
                    previous_state = WASH_TURN_ANTI_CLKWISE;
 80012c8:	4a28      	ldr	r2, [pc, #160]	@ (800136c <stateMachine+0x29c>)
                    chVTReset(&vt_motor);
 80012ca:	4829      	ldr	r0, [pc, #164]	@ (8001370 <stateMachine+0x2a0>)
                    previous_state = WASH_TURN_ANTI_CLKWISE;
 80012cc:	7013      	strb	r3, [r2, #0]
                    current_state = WASH_WATER_OUT;
 80012ce:	2306      	movs	r3, #6
 80012d0:	4a25      	ldr	r2, [pc, #148]	@ (8001368 <stateMachine+0x298>)
 80012d2:	7013      	strb	r3, [r2, #0]
                    chVTReset(&vt_motor);
 80012d4:	f7ff f894 	bl	8000400 <chVTReset>
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0045);
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <stateMachine+0x2c0>)
 80012da:	4a2b      	ldr	r2, [pc, #172]	@ (8001388 <stateMachine+0x2b8>)
 80012dc:	6113      	str	r3, [r2, #16]
 80012de:	e700      	b.n	80010e2 <stateMachine+0x12>
                if(current_state == SOAK_TURN_CLKWISE) {
 80012e0:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <stateMachine+0x298>)
 80012e2:	781c      	ldrb	r4, [r3, #0]
 80012e4:	2c02      	cmp	r4, #2
 80012e6:	f000 820f 	beq.w	8001708 <stateMachine+0x638>
                else if(current_state == SOAK_TURN_ANTI_CLKWISE) {
 80012ea:	2c03      	cmp	r4, #3
 80012ec:	f47f aef9 	bne.w	80010e2 <stateMachine+0x12>
                    previous_state = SOAK_TURN_ANTI_CLKWISE;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <stateMachine+0x29c>)
                    current_state = WASH_TURN_CLKWISE;
 80012f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001368 <stateMachine+0x298>)
                    previous_state = SOAK_TURN_ANTI_CLKWISE;
 80012f4:	701c      	strb	r4, [r3, #0]
                    current_state = WASH_TURN_CLKWISE;
 80012f6:	2304      	movs	r3, #4
 80012f8:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0085);
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <stateMachine+0x2c4>)
 80012fc:	4a22      	ldr	r2, [pc, #136]	@ (8001388 <stateMachine+0x2b8>)
                    chVTReset(&vt_motor);
 80012fe:	481c      	ldr	r0, [pc, #112]	@ (8001370 <stateMachine+0x2a0>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0085);
 8001300:	6113      	str	r3, [r2, #16]
                    chVTReset(&vt_motor);
 8001302:	f7ff f87d 	bl	8000400 <chVTReset>
                    startTimer(WASH_TIMER, TIME_MS2I(4 * TIMEOUT_WASH));
 8001306:	4620      	mov	r0, r4
 8001308:	4923      	ldr	r1, [pc, #140]	@ (8001398 <stateMachine+0x2c8>)
 800130a:	f7ff fc49 	bl	8000ba0 <startTimer>
                    startTimer(MOTOR_TIMER, TIME_MS2I(TIMEOUT_MOTOR_CYCLE));
 800130e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fc44 	bl	8000ba0 <startTimer>
 8001318:	e6e3      	b.n	80010e2 <stateMachine+0x12>
                if(current_state == SOAK_WATER_IN) {
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <stateMachine+0x298>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	f000 82b8 	beq.w	8001894 <stateMachine+0x7c4>
                else if(current_state == RINSE_WATER_IN) {
 8001324:	2b07      	cmp	r3, #7
 8001326:	f47f aedc 	bne.w	80010e2 <stateMachine+0x12>
                    previous_state = RINSE_WATER_IN;
 800132a:	4a10      	ldr	r2, [pc, #64]	@ (800136c <stateMachine+0x29c>)
                    startTimer(RINSE_TIMER, TIME_MS2I(4 * TIMEOUT_RINSE));
 800132c:	2004      	movs	r0, #4
                    previous_state = RINSE_WATER_IN;
 800132e:	7013      	strb	r3, [r2, #0]
                    current_state = RINSE_TURN_CLKWISE;
 8001330:	2308      	movs	r3, #8
 8001332:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <stateMachine+0x298>)
                    startTimer(RINSE_TIMER, TIME_MS2I(4 * TIMEOUT_RINSE));
 8001334:	4919      	ldr	r1, [pc, #100]	@ (800139c <stateMachine+0x2cc>)
                    current_state = RINSE_TURN_CLKWISE;
 8001336:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0089);
 8001338:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <stateMachine+0x2d0>)
 800133a:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <stateMachine+0x2b8>)
 800133c:	6113      	str	r3, [r2, #16]
                    startTimer(RINSE_TIMER, TIME_MS2I(4 * TIMEOUT_RINSE));
 800133e:	f7ff fc2f 	bl	8000ba0 <startTimer>
                    startTimer(MOTOR_TIMER, TIME_MS2I(TIMEOUT_MOTOR_CYCLE));
 8001342:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fc2a 	bl	8000ba0 <startTimer>
 800134c:	e6c9      	b.n	80010e2 <stateMachine+0x12>
 800134e:	bf00      	nop
 8001350:	20000818 	.word	0x20000818
 8001354:	20001364 	.word	0x20001364
 8001358:	20001380 	.word	0x20001380
 800135c:	20000808 	.word	0x20000808
 8001360:	200012a8 	.word	0x200012a8
 8001364:	20001354 	.word	0x20001354
 8001368:	200012ad 	.word	0x200012ad
 800136c:	200012ac 	.word	0x200012ac
 8001370:	20001338 	.word	0x20001338
 8001374:	20001320 	.word	0x20001320
 8001378:	20001308 	.word	0x20001308
 800137c:	200012f0 	.word	0x200012f0
 8001380:	200012d8 	.word	0x200012d8
 8001384:	01fe0001 	.word	0x01fe0001
 8001388:	40010800 	.word	0x40010800
 800138c:	01b60049 	.word	0x01b60049
 8001390:	01ba0045 	.word	0x01ba0045
 8001394:	017a0085 	.word	0x017a0085
 8001398:	00017700 	.word	0x00017700
 800139c:	0001d4c0 	.word	0x0001d4c0
 80013a0:	01760089 	.word	0x01760089
                else {
                    palClearPad(IOPORT3, 13);
                }
                break;
            case LID_CLOSE_EV:
                if (previous_state == IDLE && current_state == OPEN_LID) {
 80013a4:	4ba8      	ldr	r3, [pc, #672]	@ (8001648 <stateMachine+0x578>)
 80013a6:	7818      	ldrb	r0, [r3, #0]
 80013a8:	2800      	cmp	r0, #0
 80013aa:	f040 811c 	bne.w	80015e6 <stateMachine+0x516>
 80013ae:	4ba7      	ldr	r3, [pc, #668]	@ (800164c <stateMachine+0x57c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	f000 817e 	beq.w	80016b4 <stateMachine+0x5e4>
                    current_state = CENTRIFUGE;
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0091);
                    resumeTimer(CENTRIFUGE_TIMER);
                }
                else {
                    (palReadPad(IOPORT3, 13) == PAL_HIGH) ? (palSetPad(IOPORT3, 13)) : (palClearPad(IOPORT3, 13));
 80013b8:	4aa5      	ldr	r2, [pc, #660]	@ (8001650 <stateMachine+0x580>)
 80013ba:	6893      	ldr	r3, [r2, #8]
 80013bc:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80013c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c4:	bf0a      	itet	eq
 80013c6:	4aa2      	ldreq	r2, [pc, #648]	@ (8001650 <stateMachine+0x580>)
 80013c8:	6113      	strne	r3, [r2, #16]
 80013ca:	6153      	streq	r3, [r2, #20]
 80013cc:	e689      	b.n	80010e2 <stateMachine+0x12>
                if(current_state == SOAK_TURN_CLKWISE) {
 80013ce:	4b9f      	ldr	r3, [pc, #636]	@ (800164c <stateMachine+0x57c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	3b02      	subs	r3, #2
 80013d4:	2b07      	cmp	r3, #7
 80013d6:	f63f ae84 	bhi.w	80010e2 <stateMachine+0x12>
 80013da:	a201      	add	r2, pc, #4	@ (adr r2, 80013e0 <stateMachine+0x310>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	080014cb 	.word	0x080014cb
 80013e4:	080014bb 	.word	0x080014bb
 80013e8:	080014ab 	.word	0x080014ab
 80013ec:	0800149b 	.word	0x0800149b
 80013f0:	080010e3 	.word	0x080010e3
 80013f4:	080010e3 	.word	0x080010e3
 80013f8:	0800148b 	.word	0x0800148b
 80013fc:	0800146d 	.word	0x0800146d
                if(current_state == WASH_WATER_OUT){
 8001400:	4b92      	ldr	r3, [pc, #584]	@ (800164c <stateMachine+0x57c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b06      	cmp	r3, #6
 8001406:	f000 80ff 	beq.w	8001608 <stateMachine+0x538>
                else if(current_state == RINSE_WATER_OUT){
 800140a:	2b0a      	cmp	r3, #10
 800140c:	f47f ae69 	bne.w	80010e2 <stateMachine+0x12>
                    previous_state = RINSE_WATER_OUT;
 8001410:	4a8d      	ldr	r2, [pc, #564]	@ (8001648 <stateMachine+0x578>)
                    startTimer(CENTRIFUGE_TIMER, TIME_MS2I(TIMEOUT_CENTRIFUGE));
 8001412:	f649 4140 	movw	r1, #40000	@ 0x9c40
                    previous_state = RINSE_WATER_OUT;
 8001416:	7013      	strb	r3, [r2, #0]
                    current_state = CENTRIFUGE;
 8001418:	230b      	movs	r3, #11
 800141a:	4a8c      	ldr	r2, [pc, #560]	@ (800164c <stateMachine+0x57c>)
                    startTimer(CENTRIFUGE_TIMER, TIME_MS2I(TIMEOUT_CENTRIFUGE));
 800141c:	2005      	movs	r0, #5
                    current_state = CENTRIFUGE;
 800141e:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0091);
 8001420:	4b8c      	ldr	r3, [pc, #560]	@ (8001654 <stateMachine+0x584>)
 8001422:	4a8d      	ldr	r2, [pc, #564]	@ (8001658 <stateMachine+0x588>)
 8001424:	6113      	str	r3, [r2, #16]
                    startTimer(CENTRIFUGE_TIMER, TIME_MS2I(TIMEOUT_CENTRIFUGE));
 8001426:	f7ff fbbb 	bl	8000ba0 <startTimer>
 800142a:	e65a      	b.n	80010e2 <stateMachine+0x12>
                if(current_state == IDLE){
 800142c:	4b87      	ldr	r3, [pc, #540]	@ (800164c <stateMachine+0x57c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b0b      	cmp	r3, #11
 8001432:	f200 8334 	bhi.w	8001a9e <stateMachine+0x9ce>
 8001436:	e8df f013 	tbh	[pc, r3, lsl #1]
 800143a:	00d2      	.short	0x00d2
 800143c:	00bb00ce 	.word	0x00bb00ce
 8001440:	00a300a7 	.word	0x00a300a7
 8001444:	008b008f 	.word	0x008b008f
 8001448:	00830087 	.word	0x00830087
 800144c:	0061006f 	.word	0x0061006f
 8001450:	0050      	.short	0x0050
                if(current_state == IDLE) {
 8001452:	4a7e      	ldr	r2, [pc, #504]	@ (800164c <stateMachine+0x57c>)
 8001454:	7813      	ldrb	r3, [r2, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f47f ae43 	bne.w	80010e2 <stateMachine+0x12>
                    previous_state = IDLE;
 800145c:	497a      	ldr	r1, [pc, #488]	@ (8001648 <stateMachine+0x578>)
 800145e:	700b      	strb	r3, [r1, #0]
                    current_state = SOAK_WATER_IN;
 8001460:	2301      	movs	r3, #1
 8001462:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0023);
 8001464:	4b7d      	ldr	r3, [pc, #500]	@ (800165c <stateMachine+0x58c>)
 8001466:	4a7c      	ldr	r2, [pc, #496]	@ (8001658 <stateMachine+0x588>)
 8001468:	6113      	str	r3, [r2, #16]
 800146a:	e63a      	b.n	80010e2 <stateMachine+0x12>
                    previous_state = RINSE_TURN_ANTI_CLKWISE;
 800146c:	2309      	movs	r3, #9
 800146e:	4a76      	ldr	r2, [pc, #472]	@ (8001648 <stateMachine+0x578>)
 8001470:	7013      	strb	r3, [r2, #0]
                    current_state = RINSE_TURN_CLKWISE;
 8001472:	2308      	movs	r3, #8
 8001474:	4a75      	ldr	r2, [pc, #468]	@ (800164c <stateMachine+0x57c>)
 8001476:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0089);
 8001478:	4b79      	ldr	r3, [pc, #484]	@ (8001660 <stateMachine+0x590>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0083);
 800147a:	4a77      	ldr	r2, [pc, #476]	@ (8001658 <stateMachine+0x588>)
                    startTimer(MOTOR_TIMER, TIME_MS2I(TIMEOUT_MOTOR_CYCLE));
 800147c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001480:	2001      	movs	r0, #1
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0083);
 8001482:	6113      	str	r3, [r2, #16]
                    startTimer(MOTOR_TIMER, TIME_MS2I(TIMEOUT_MOTOR_CYCLE));
 8001484:	f7ff fb8c 	bl	8000ba0 <startTimer>
 8001488:	e62b      	b.n	80010e2 <stateMachine+0x12>
                    previous_state = RINSE_TURN_CLKWISE;
 800148a:	2308      	movs	r3, #8
 800148c:	4a6e      	ldr	r2, [pc, #440]	@ (8001648 <stateMachine+0x578>)
 800148e:	7013      	strb	r3, [r2, #0]
                    current_state = RINSE_TURN_ANTI_CLKWISE;
 8001490:	2309      	movs	r3, #9
 8001492:	4a6e      	ldr	r2, [pc, #440]	@ (800164c <stateMachine+0x57c>)
 8001494:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0109);
 8001496:	4b73      	ldr	r3, [pc, #460]	@ (8001664 <stateMachine+0x594>)
 8001498:	e7ef      	b.n	800147a <stateMachine+0x3aa>
                    previous_state = WASH_TURN_ANTI_CLKWISE;
 800149a:	2305      	movs	r3, #5
 800149c:	4a6a      	ldr	r2, [pc, #424]	@ (8001648 <stateMachine+0x578>)
 800149e:	7013      	strb	r3, [r2, #0]
                    current_state = WASH_TURN_CLKWISE;
 80014a0:	2304      	movs	r3, #4
 80014a2:	4a6a      	ldr	r2, [pc, #424]	@ (800164c <stateMachine+0x57c>)
 80014a4:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0085);
 80014a6:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <stateMachine+0x598>)
 80014a8:	e7e7      	b.n	800147a <stateMachine+0x3aa>
                    previous_state = WASH_TURN_CLKWISE;
 80014aa:	2304      	movs	r3, #4
 80014ac:	4a66      	ldr	r2, [pc, #408]	@ (8001648 <stateMachine+0x578>)
 80014ae:	7013      	strb	r3, [r2, #0]
                    current_state = WASH_TURN_ANTI_CLKWISE;
 80014b0:	2305      	movs	r3, #5
 80014b2:	4a66      	ldr	r2, [pc, #408]	@ (800164c <stateMachine+0x57c>)
 80014b4:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0105);
 80014b6:	4b6d      	ldr	r3, [pc, #436]	@ (800166c <stateMachine+0x59c>)
 80014b8:	e7df      	b.n	800147a <stateMachine+0x3aa>
                    previous_state = SOAK_TURN_ANTI_CLKWISE;
 80014ba:	2303      	movs	r3, #3
 80014bc:	4a62      	ldr	r2, [pc, #392]	@ (8001648 <stateMachine+0x578>)
 80014be:	7013      	strb	r3, [r2, #0]
                    current_state = SOAK_TURN_CLKWISE;
 80014c0:	2302      	movs	r3, #2
 80014c2:	4a62      	ldr	r2, [pc, #392]	@ (800164c <stateMachine+0x57c>)
 80014c4:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0083);
 80014c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001670 <stateMachine+0x5a0>)
 80014c8:	e7d7      	b.n	800147a <stateMachine+0x3aa>
                    previous_state = SOAK_TURN_CLKWISE;
 80014ca:	2302      	movs	r3, #2
 80014cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001648 <stateMachine+0x578>)
 80014ce:	7013      	strb	r3, [r2, #0]
                    current_state = SOAK_TURN_ANTI_CLKWISE;
 80014d0:	2303      	movs	r3, #3
 80014d2:	4a5e      	ldr	r2, [pc, #376]	@ (800164c <stateMachine+0x57c>)
 80014d4:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0103);
 80014d6:	4b67      	ldr	r3, [pc, #412]	@ (8001674 <stateMachine+0x5a4>)
 80014d8:	e7cf      	b.n	800147a <stateMachine+0x3aa>
                    palSetPad(IOPORT3, 13);
 80014da:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = CENTRIFUGE;
 80014de:	220b      	movs	r2, #11
                    current_state = OPEN_LID;
 80014e0:	230c      	movs	r3, #12
                    palSetPad(IOPORT3, 13);
 80014e2:	495b      	ldr	r1, [pc, #364]	@ (8001650 <stateMachine+0x580>)
 80014e4:	6108      	str	r0, [r1, #16]
                    previous_state = CENTRIFUGE;
 80014e6:	4958      	ldr	r1, [pc, #352]	@ (8001648 <stateMachine+0x578>)
                    pauseTimer(CENTRIFUGE_TIMER);
 80014e8:	2005      	movs	r0, #5
                    previous_state = CENTRIFUGE;
 80014ea:	700a      	strb	r2, [r1, #0]
                    current_state = OPEN_LID;
 80014ec:	4a57      	ldr	r2, [pc, #348]	@ (800164c <stateMachine+0x57c>)
 80014ee:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 80014f0:	4b59      	ldr	r3, [pc, #356]	@ (8001658 <stateMachine+0x588>)
 80014f2:	4a61      	ldr	r2, [pc, #388]	@ (8001678 <stateMachine+0x5a8>)
 80014f4:	611a      	str	r2, [r3, #16]
                    pauseTimer(CENTRIFUGE_TIMER);
 80014f6:	f7fe ffa3 	bl	8000440 <pauseTimer>
 80014fa:	e5f2      	b.n	80010e2 <stateMachine+0x12>
                    palSetPad(IOPORT3, 13);
 80014fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = RINSE_WATER_OUT;
 8001500:	220a      	movs	r2, #10
                    current_state = OPEN_LID;
 8001502:	230c      	movs	r3, #12
                    palSetPad(IOPORT3, 13);
 8001504:	4952      	ldr	r1, [pc, #328]	@ (8001650 <stateMachine+0x580>)
 8001506:	6108      	str	r0, [r1, #16]
                    previous_state = SOAK_WATER_IN;
 8001508:	494f      	ldr	r1, [pc, #316]	@ (8001648 <stateMachine+0x578>)
 800150a:	700a      	strb	r2, [r1, #0]
                    current_state = OPEN_LID;
 800150c:	4a4f      	ldr	r2, [pc, #316]	@ (800164c <stateMachine+0x57c>)
 800150e:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 8001510:	4b51      	ldr	r3, [pc, #324]	@ (8001658 <stateMachine+0x588>)
 8001512:	4a59      	ldr	r2, [pc, #356]	@ (8001678 <stateMachine+0x5a8>)
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	e5e4      	b.n	80010e2 <stateMachine+0x12>
                    palSetPad(IOPORT3, 13);
 8001518:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = RINSE_TURN_ANTI_CLKWISE;
 800151c:	2209      	movs	r2, #9
                    current_state = OPEN_LID;
 800151e:	230c      	movs	r3, #12
                    palSetPad(IOPORT3, 13);
 8001520:	494b      	ldr	r1, [pc, #300]	@ (8001650 <stateMachine+0x580>)
 8001522:	6108      	str	r0, [r1, #16]
                    previous_state = RINSE_TURN_ANTI_CLKWISE;
 8001524:	4948      	ldr	r1, [pc, #288]	@ (8001648 <stateMachine+0x578>)
                    pauseTimer(RINSE_TIMER);
 8001526:	2004      	movs	r0, #4
                    previous_state = RINSE_TURN_ANTI_CLKWISE;
 8001528:	700a      	strb	r2, [r1, #0]
                    current_state = OPEN_LID;
 800152a:	4a48      	ldr	r2, [pc, #288]	@ (800164c <stateMachine+0x57c>)
 800152c:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 800152e:	4b4a      	ldr	r3, [pc, #296]	@ (8001658 <stateMachine+0x588>)
 8001530:	4a51      	ldr	r2, [pc, #324]	@ (8001678 <stateMachine+0x5a8>)
 8001532:	611a      	str	r2, [r3, #16]
                    pauseTimer(RINSE_TIMER);
 8001534:	f7fe ff84 	bl	8000440 <pauseTimer>
                    pauseTimer(MOTOR_TIMER);
 8001538:	2001      	movs	r0, #1
 800153a:	f7fe ff81 	bl	8000440 <pauseTimer>
 800153e:	e5d0      	b.n	80010e2 <stateMachine+0x12>
                    palSetPad(IOPORT3, 13);
 8001540:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = RINSE_TURN_CLKWISE;
 8001544:	2208      	movs	r2, #8
 8001546:	e7ea      	b.n	800151e <stateMachine+0x44e>
                    palSetPad(IOPORT3, 13);
 8001548:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = RINSE_WATER_IN;
 800154c:	2207      	movs	r2, #7
 800154e:	e7d8      	b.n	8001502 <stateMachine+0x432>
                    palSetPad(IOPORT3, 13);
 8001550:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = WASH_WATER_OUT;
 8001554:	2206      	movs	r2, #6
 8001556:	e7d4      	b.n	8001502 <stateMachine+0x432>
                    palSetPad(IOPORT3, 13);
 8001558:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = WASH_TURN_ANTI_CLKWISE;
 800155c:	2205      	movs	r2, #5
                    current_state = OPEN_LID;
 800155e:	230c      	movs	r3, #12
                    palSetPad(IOPORT3, 13);
 8001560:	493b      	ldr	r1, [pc, #236]	@ (8001650 <stateMachine+0x580>)
 8001562:	6108      	str	r0, [r1, #16]
                    previous_state = WASH_TURN_ANTI_CLKWISE;
 8001564:	4938      	ldr	r1, [pc, #224]	@ (8001648 <stateMachine+0x578>)
                    pauseTimer(WASH_TIMER);
 8001566:	2003      	movs	r0, #3
                    previous_state = WASH_TURN_ANTI_CLKWISE;
 8001568:	700a      	strb	r2, [r1, #0]
                    current_state = OPEN_LID;
 800156a:	4a38      	ldr	r2, [pc, #224]	@ (800164c <stateMachine+0x57c>)
 800156c:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 800156e:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <stateMachine+0x588>)
 8001570:	4a41      	ldr	r2, [pc, #260]	@ (8001678 <stateMachine+0x5a8>)
 8001572:	611a      	str	r2, [r3, #16]
                    pauseTimer(WASH_TIMER);
 8001574:	f7fe ff64 	bl	8000440 <pauseTimer>
                    pauseTimer(MOTOR_TIMER);
 8001578:	2001      	movs	r0, #1
 800157a:	f7fe ff61 	bl	8000440 <pauseTimer>
 800157e:	e5b0      	b.n	80010e2 <stateMachine+0x12>
                    palSetPad(IOPORT3, 13);
 8001580:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = WASH_TURN_CLKWISE;
 8001584:	2204      	movs	r2, #4
 8001586:	e7ea      	b.n	800155e <stateMachine+0x48e>
                    palSetPad(IOPORT3, 13);
 8001588:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = SOAK_TURN_ANTI_CLKWISE;
 800158c:	2203      	movs	r2, #3
                    current_state = OPEN_LID;
 800158e:	230c      	movs	r3, #12
                    palSetPad(IOPORT3, 13);
 8001590:	492f      	ldr	r1, [pc, #188]	@ (8001650 <stateMachine+0x580>)
 8001592:	6108      	str	r0, [r1, #16]
                    previous_state = SOAK_TURN_ANTI_CLKWISE;
 8001594:	492c      	ldr	r1, [pc, #176]	@ (8001648 <stateMachine+0x578>)
                    pauseTimer(SOAK_TIMER);
 8001596:	2002      	movs	r0, #2
                    previous_state = SOAK_TURN_ANTI_CLKWISE;
 8001598:	700a      	strb	r2, [r1, #0]
                    current_state = OPEN_LID;
 800159a:	4a2c      	ldr	r2, [pc, #176]	@ (800164c <stateMachine+0x57c>)
 800159c:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 800159e:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <stateMachine+0x588>)
 80015a0:	4a35      	ldr	r2, [pc, #212]	@ (8001678 <stateMachine+0x5a8>)
 80015a2:	611a      	str	r2, [r3, #16]
                    pauseTimer(SOAK_TIMER);
 80015a4:	f7fe ff4c 	bl	8000440 <pauseTimer>
                    pauseTimer(MOTOR_TIMER);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f7fe ff49 	bl	8000440 <pauseTimer>
 80015ae:	e598      	b.n	80010e2 <stateMachine+0x12>
                    palSetPad(IOPORT3, 13);
 80015b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
                    current_state = OPEN_LID;
 80015b4:	230c      	movs	r3, #12
                    previous_state = SOAK_TURN_CLKWISE;
 80015b6:	2002      	movs	r0, #2
                    palSetPad(IOPORT3, 13);
 80015b8:	4a25      	ldr	r2, [pc, #148]	@ (8001650 <stateMachine+0x580>)
 80015ba:	6111      	str	r1, [r2, #16]
                    current_state = OPEN_LID;
 80015bc:	4a23      	ldr	r2, [pc, #140]	@ (800164c <stateMachine+0x57c>)
 80015be:	7013      	strb	r3, [r2, #0]
                    previous_state = SOAK_TURN_CLKWISE;
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <stateMachine+0x578>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 80015c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001678 <stateMachine+0x5a8>)
                    previous_state = SOAK_TURN_CLKWISE;
 80015c4:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <stateMachine+0x588>)
 80015c8:	611a      	str	r2, [r3, #16]
                    pauseTimer(SOAK_TIMER);
 80015ca:	f7fe ff39 	bl	8000440 <pauseTimer>
                    pauseTimer(MOTOR_TIMER);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7fe ff36 	bl	8000440 <pauseTimer>
 80015d4:	e585      	b.n	80010e2 <stateMachine+0x12>
                    palSetPad(IOPORT3, 13);
 80015d6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = SOAK_WATER_IN;
 80015da:	2201      	movs	r2, #1
 80015dc:	e791      	b.n	8001502 <stateMachine+0x432>
                    palSetPad(IOPORT3, 13);
 80015de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
                    previous_state = IDLE;
 80015e2:	2200      	movs	r2, #0
 80015e4:	e78d      	b.n	8001502 <stateMachine+0x432>
                else if (previous_state == SOAK_WATER_IN && current_state == OPEN_LID) {
 80015e6:	2801      	cmp	r0, #1
 80015e8:	d117      	bne.n	800161a <stateMachine+0x54a>
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <stateMachine+0x57c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	f47f aee2 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 80015f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <stateMachine+0x580>)
 80015fa:	615a      	str	r2, [r3, #20]
                    current_state = SOAK_WATER_IN;
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <stateMachine+0x57c>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0023);
 80015fe:	4a17      	ldr	r2, [pc, #92]	@ (800165c <stateMachine+0x58c>)
                    current_state = SOAK_WATER_IN;
 8001600:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0023);
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <stateMachine+0x588>)
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	e56c      	b.n	80010e2 <stateMachine+0x12>
                    previous_state = WASH_WATER_OUT;
 8001608:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <stateMachine+0x578>)
 800160a:	7013      	strb	r3, [r2, #0]
                    current_state = RINSE_WATER_IN;
 800160c:	2307      	movs	r3, #7
 800160e:	4a0f      	ldr	r2, [pc, #60]	@ (800164c <stateMachine+0x57c>)
 8001610:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0029);
 8001612:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <stateMachine+0x5ac>)
 8001614:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <stateMachine+0x588>)
 8001616:	6113      	str	r3, [r2, #16]
 8001618:	e563      	b.n	80010e2 <stateMachine+0x12>
                else if(previous_state == SOAK_TURN_CLKWISE && current_state == OPEN_LID) {
 800161a:	2802      	cmp	r0, #2
 800161c:	d130      	bne.n	8001680 <stateMachine+0x5b0>
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <stateMachine+0x57c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	f47f aec8 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 8001628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <stateMachine+0x580>)
 800162e:	615a      	str	r2, [r3, #20]
                    current_state = SOAK_TURN_CLKWISE;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <stateMachine+0x57c>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0083);
 8001632:	4a0f      	ldr	r2, [pc, #60]	@ (8001670 <stateMachine+0x5a0>)
                    current_state = SOAK_TURN_CLKWISE;
 8001634:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0083);
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <stateMachine+0x588>)
 8001638:	611a      	str	r2, [r3, #16]
                    resumeTimer(SOAK_TIMER);
 800163a:	f7ff fba9 	bl	8000d90 <resumeTimer>
                    resumeTimer(MOTOR_TIMER);
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff fba6 	bl	8000d90 <resumeTimer>
 8001644:	e54d      	b.n	80010e2 <stateMachine+0x12>
 8001646:	bf00      	nop
 8001648:	200012ac 	.word	0x200012ac
 800164c:	200012ad 	.word	0x200012ad
 8001650:	40011000 	.word	0x40011000
 8001654:	016e0091 	.word	0x016e0091
 8001658:	40010800 	.word	0x40010800
 800165c:	01dc0023 	.word	0x01dc0023
 8001660:	01760089 	.word	0x01760089
 8001664:	00f60109 	.word	0x00f60109
 8001668:	017a0085 	.word	0x017a0085
 800166c:	00fa0105 	.word	0x00fa0105
 8001670:	017c0083 	.word	0x017c0083
 8001674:	00fc0103 	.word	0x00fc0103
 8001678:	01fe0001 	.word	0x01fe0001
 800167c:	01d60029 	.word	0x01d60029
                else if(previous_state == SOAK_TURN_ANTI_CLKWISE && current_state == OPEN_LID) {
 8001680:	2803      	cmp	r0, #3
 8001682:	f000 8192 	beq.w	80019aa <stateMachine+0x8da>
                else if(previous_state == WASH_WATER_OUT && current_state == OPEN_LID) {
 8001686:	2806      	cmp	r0, #6
 8001688:	f000 817f 	beq.w	800198a <stateMachine+0x8ba>
                else if(previous_state == WASH_TURN_CLKWISE && current_state == OPEN_LID) {
 800168c:	2804      	cmp	r0, #4
 800168e:	f000 8166 	beq.w	800195e <stateMachine+0x88e>
                else if(previous_state == WASH_TURN_ANTI_CLKWISE && current_state == OPEN_LID) {
 8001692:	2805      	cmp	r0, #5
 8001694:	f040 819f 	bne.w	80019d6 <stateMachine+0x906>
 8001698:	4b6f      	ldr	r3, [pc, #444]	@ (8001858 <stateMachine+0x788>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	f47f ae8b 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 80016a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a6:	4b6d      	ldr	r3, [pc, #436]	@ (800185c <stateMachine+0x78c>)
 80016a8:	615a      	str	r2, [r3, #20]
                    current_state = WASH_TURN_ANTI_CLKWISE;
 80016aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001858 <stateMachine+0x788>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0105);
 80016ac:	4a6c      	ldr	r2, [pc, #432]	@ (8001860 <stateMachine+0x790>)
                    current_state = WASH_TURN_ANTI_CLKWISE;
 80016ae:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0105);
 80016b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <stateMachine+0x794>)
 80016b2:	e161      	b.n	8001978 <stateMachine+0x8a8>
                    palClearPad(IOPORT3, 13);
 80016b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b8:	4a68      	ldr	r2, [pc, #416]	@ (800185c <stateMachine+0x78c>)
 80016ba:	6153      	str	r3, [r2, #20]
                    current_state = IDLE;
 80016bc:	4b66      	ldr	r3, [pc, #408]	@ (8001858 <stateMachine+0x788>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 80016be:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
                    current_state = IDLE;
 80016c2:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 80016c4:	4b68      	ldr	r3, [pc, #416]	@ (8001868 <stateMachine+0x798>)
 80016c6:	6113      	str	r3, [r2, #16]
 80016c8:	e50b      	b.n	80010e2 <stateMachine+0x12>
                    previous_state = RINSE_TURN_CLKWISE;
 80016ca:	4a68      	ldr	r2, [pc, #416]	@ (800186c <stateMachine+0x79c>)
 80016cc:	7013      	strb	r3, [r2, #0]
                    current_state = RINSE_WATER_OUT;
 80016ce:	230a      	movs	r3, #10
 80016d0:	4a61      	ldr	r2, [pc, #388]	@ (8001858 <stateMachine+0x788>)
 80016d2:	7013      	strb	r3, [r2, #0]
 80016d4:	2330      	movs	r3, #48	@ 0x30
 80016d6:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80016da:	4e65      	ldr	r6, [pc, #404]	@ (8001870 <stateMachine+0x7a0>)
 80016dc:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 80016de:	b163      	cbz	r3, 80016fa <stateMachine+0x62a>
  vtp->dlist.next = NULL;
 80016e0:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 80016e2:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	68b4      	ldr	r4, [r6, #8]
 80016ea:	4422      	add	r2, r4
 80016ec:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80016ee:	6872      	ldr	r2, [r6, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80016f2:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 80016f4:	6030      	str	r0, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80016f6:	f8cb 1018 	str.w	r1, [fp, #24]
 80016fa:	2300      	movs	r3, #0
 80016fc:	f383 8811 	msr	BASEPRI, r3
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0049);
 8001700:	4b5c      	ldr	r3, [pc, #368]	@ (8001874 <stateMachine+0x7a4>)
 8001702:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <stateMachine+0x794>)
 8001704:	6113      	str	r3, [r2, #16]
 8001706:	e4ec      	b.n	80010e2 <stateMachine+0x12>
                    previous_state = SOAK_TURN_CLKWISE;
 8001708:	4b58      	ldr	r3, [pc, #352]	@ (800186c <stateMachine+0x79c>)
                    current_state = WASH_TURN_CLKWISE;
 800170a:	4a53      	ldr	r2, [pc, #332]	@ (8001858 <stateMachine+0x788>)
                    previous_state = SOAK_TURN_CLKWISE;
 800170c:	701c      	strb	r4, [r3, #0]
                    current_state = WASH_TURN_CLKWISE;
 800170e:	2304      	movs	r3, #4
 8001710:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0085);
 8001712:	4b59      	ldr	r3, [pc, #356]	@ (8001878 <stateMachine+0x7a8>)
 8001714:	4a53      	ldr	r2, [pc, #332]	@ (8001864 <stateMachine+0x794>)
 8001716:	6113      	str	r3, [r2, #16]
 8001718:	2330      	movs	r3, #48	@ 0x30
 800171a:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 800171e:	4e54      	ldr	r6, [pc, #336]	@ (8001870 <stateMachine+0x7a0>)
 8001720:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 8001722:	b163      	cbz	r3, 800173e <stateMachine+0x66e>
  vtp->dlist.next = NULL;
 8001724:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001726:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	68b4      	ldr	r4, [r6, #8]
 800172e:	4422      	add	r2, r4
 8001730:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001732:	6872      	ldr	r2, [r6, #4]
 8001734:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001736:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001738:	6030      	str	r0, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 800173a:	f8cb 1018 	str.w	r1, [fp, #24]
 800173e:	2100      	movs	r1, #0
 8001740:	f381 8811 	msr	BASEPRI, r1
 8001744:	2330      	movs	r3, #48	@ 0x30
 8001746:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 800174a:	4e4c      	ldr	r6, [pc, #304]	@ (800187c <stateMachine+0x7ac>)
 800174c:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 800174e:	b15b      	cbz	r3, 8001768 <stateMachine+0x698>
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	68b4      	ldr	r4, [r6, #8]
 8001758:	4422      	add	r2, r4
 800175a:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 800175c:	6872      	ldr	r2, [r6, #4]
 800175e:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001760:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001762:	6031      	str	r1, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001764:	f8cb 0018 	str.w	r0, [fp, #24]
  vtp->par     = par;
 8001768:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 800176a:	4c44      	ldr	r4, [pc, #272]	@ (800187c <stateMachine+0x7ac>)
 800176c:	4b44      	ldr	r3, [pc, #272]	@ (8001880 <stateMachine+0x7b0>)
  while (likely(dlp->delta < delta)) {
 800176e:	4845      	ldr	r0, [pc, #276]	@ (8001884 <stateMachine+0x7b4>)
 8001770:	60e3      	str	r3, [r4, #12]
  dlp = dlhp->next;
 8001772:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (likely(dlp->delta < delta)) {
 8001776:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8001778:	e9c4 2204 	strd	r2, r2, [r4, #16]
 800177c:	4281      	cmp	r1, r0
 800177e:	4a42      	ldr	r2, [pc, #264]	@ (8001888 <stateMachine+0x7b8>)
 8001780:	d804      	bhi.n	800178c <stateMachine+0x6bc>
    dlp = dlp->next;
 8001782:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001784:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8001786:	6899      	ldr	r1, [r3, #8]
 8001788:	4291      	cmp	r1, r2
 800178a:	d3fa      	bcc.n	8001782 <stateMachine+0x6b2>
  dlhp->delta = (sysinterval_t)-1;
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 8001790:	4c3a      	ldr	r4, [pc, #232]	@ (800187c <stateMachine+0x7ac>)
 8001792:	60a2      	str	r2, [r4, #8]
  dlp->delta -= delta;
 8001794:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 8001796:	6023      	str	r3, [r4, #0]
  dlp->delta -= delta;
 8001798:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	6062      	str	r2, [r4, #4]
  dlp->prev->next = dlp;
 800179e:	6014      	str	r4, [r2, #0]
  dlhp->prev      = dlp;
 80017a0:	e9c3 4101 	strd	r4, r1, [r3, #4]
 80017a4:	2100      	movs	r1, #0
  dlhp->delta = (sysinterval_t)-1;
 80017a6:	f8cb 0018 	str.w	r0, [fp, #24]
 80017aa:	f381 8811 	msr	BASEPRI, r1
 80017ae:	2330      	movs	r3, #48	@ 0x30
 80017b0:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80017b4:	4e2e      	ldr	r6, [pc, #184]	@ (8001870 <stateMachine+0x7a0>)
 80017b6:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 80017b8:	b14b      	cbz	r3, 80017ce <stateMachine+0x6fe>
  vtp->dlist.next->delta += vtp->dlist.delta;
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	68b4      	ldr	r4, [r6, #8]
 80017be:	4422      	add	r2, r4
 80017c0:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80017c2:	6872      	ldr	r2, [r6, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80017c6:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 80017c8:	6031      	str	r1, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80017ca:	f8cb 0018 	str.w	r0, [fp, #24]
  vtp->par     = par;
 80017ce:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 80017d0:	4827      	ldr	r0, [pc, #156]	@ (8001870 <stateMachine+0x7a0>)
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <stateMachine+0x7bc>)
 80017d4:	60c3      	str	r3, [r0, #12]
  dlp = dlhp->next;
 80017d6:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (likely(dlp->delta < delta)) {
 80017da:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80017dc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80017e0:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 80017e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017e8:	d204      	bcs.n	80017f4 <stateMachine+0x724>
    dlp = dlp->next;
 80017ea:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80017ec:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80017ee:	6899      	ldr	r1, [r3, #8]
 80017f0:	4291      	cmp	r1, r2
 80017f2:	d3fa      	bcc.n	80017ea <stateMachine+0x71a>
  dlhp->delta = (sysinterval_t)-1;
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 80017f8:	4c1d      	ldr	r4, [pc, #116]	@ (8001870 <stateMachine+0x7a0>)
 80017fa:	60a2      	str	r2, [r4, #8]
  dlp->delta -= delta;
 80017fc:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 80017fe:	6023      	str	r3, [r4, #0]
  dlp->delta -= delta;
 8001800:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	6062      	str	r2, [r4, #4]
  dlp->prev->next = dlp;
 8001806:	6014      	str	r4, [r2, #0]
  dlhp->prev      = dlp;
 8001808:	e9c3 4101 	strd	r4, r1, [r3, #4]
 800180c:	2300      	movs	r3, #0
  dlhp->delta = (sysinterval_t)-1;
 800180e:	f8cb 0018 	str.w	r0, [fp, #24]
 8001812:	f383 8811 	msr	BASEPRI, r3
}
 8001816:	e464      	b.n	80010e2 <stateMachine+0x12>
                    previous_state = WASH_TURN_CLKWISE;
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <stateMachine+0x79c>)
 800181a:	7013      	strb	r3, [r2, #0]
                    current_state = WASH_WATER_OUT;
 800181c:	2306      	movs	r3, #6
 800181e:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <stateMachine+0x788>)
 8001820:	7013      	strb	r3, [r2, #0]
 8001822:	2330      	movs	r3, #48	@ 0x30
 8001824:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001828:	4e11      	ldr	r6, [pc, #68]	@ (8001870 <stateMachine+0x7a0>)
 800182a:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 800182c:	b163      	cbz	r3, 8001848 <stateMachine+0x778>
  vtp->dlist.next = NULL;
 800182e:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	68b4      	ldr	r4, [r6, #8]
 8001838:	4422      	add	r2, r4
 800183a:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 800183c:	6872      	ldr	r2, [r6, #4]
 800183e:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001840:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001842:	6030      	str	r0, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001844:	f8cb 1018 	str.w	r1, [fp, #24]
 8001848:	2300      	movs	r3, #0
 800184a:	f383 8811 	msr	BASEPRI, r3
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0045);
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <stateMachine+0x7c0>)
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <stateMachine+0x794>)
 8001852:	6113      	str	r3, [r2, #16]
 8001854:	e445      	b.n	80010e2 <stateMachine+0x12>
 8001856:	bf00      	nop
 8001858:	200012ad 	.word	0x200012ad
 800185c:	40011000 	.word	0x40011000
 8001860:	00fa0105 	.word	0x00fa0105
 8001864:	40010800 	.word	0x40010800
 8001868:	01fe0001 	.word	0x01fe0001
 800186c:	200012ac 	.word	0x200012ac
 8001870:	20001338 	.word	0x20001338
 8001874:	01b60049 	.word	0x01b60049
 8001878:	017a0085 	.word	0x017a0085
 800187c:	20001308 	.word	0x20001308
 8001880:	080008a1 	.word	0x080008a1
 8001884:	000176ff 	.word	0x000176ff
 8001888:	00017700 	.word	0x00017700
 800188c:	080007a1 	.word	0x080007a1
 8001890:	01ba0045 	.word	0x01ba0045
                    previous_state = SOAK_WATER_IN;
 8001894:	4a85      	ldr	r2, [pc, #532]	@ (8001aac <stateMachine+0x9dc>)
 8001896:	7013      	strb	r3, [r2, #0]
                    current_state = SOAK_TURN_CLKWISE;
 8001898:	2302      	movs	r3, #2
 800189a:	4a85      	ldr	r2, [pc, #532]	@ (8001ab0 <stateMachine+0x9e0>)
 800189c:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0083);
 800189e:	4b85      	ldr	r3, [pc, #532]	@ (8001ab4 <stateMachine+0x9e4>)
 80018a0:	4a85      	ldr	r2, [pc, #532]	@ (8001ab8 <stateMachine+0x9e8>)
 80018a2:	6113      	str	r3, [r2, #16]
 80018a4:	2330      	movs	r3, #48	@ 0x30
 80018a6:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80018aa:	4e84      	ldr	r6, [pc, #528]	@ (8001abc <stateMachine+0x9ec>)
 80018ac:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 80018ae:	b163      	cbz	r3, 80018ca <stateMachine+0x7fa>
  vtp->dlist.next = NULL;
 80018b0:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 80018b2:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	68b4      	ldr	r4, [r6, #8]
 80018ba:	4422      	add	r2, r4
 80018bc:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80018be:	6872      	ldr	r2, [r6, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80018c2:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 80018c4:	6030      	str	r0, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80018c6:	f8cb 1018 	str.w	r1, [fp, #24]
  while (likely(dlp->delta < delta)) {
 80018ca:	f644 601f 	movw	r0, #19999	@ 0x4e1f
  vtp->par     = par;
 80018ce:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 80018d0:	4c7a      	ldr	r4, [pc, #488]	@ (8001abc <stateMachine+0x9ec>)
 80018d2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac0 <stateMachine+0x9f0>)
 80018d4:	60e3      	str	r3, [r4, #12]
  dlp = dlhp->next;
 80018d6:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (likely(dlp->delta < delta)) {
 80018da:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80018dc:	e9c4 2204 	strd	r2, r2, [r4, #16]
 80018e0:	4281      	cmp	r1, r0
 80018e2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80018e6:	d804      	bhi.n	80018f2 <stateMachine+0x822>
    dlp = dlp->next;
 80018e8:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80018ea:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	4291      	cmp	r1, r2
 80018f0:	d3fa      	bcc.n	80018e8 <stateMachine+0x818>
  dlhp->delta = (sysinterval_t)-1;
 80018f2:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 80018f6:	4c71      	ldr	r4, [pc, #452]	@ (8001abc <stateMachine+0x9ec>)
 80018f8:	60a2      	str	r2, [r4, #8]
  dlp->delta -= delta;
 80018fa:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 80018fc:	6023      	str	r3, [r4, #0]
  dlp->delta -= delta;
 80018fe:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	6062      	str	r2, [r4, #4]
  dlp->prev->next = dlp;
 8001904:	6014      	str	r4, [r2, #0]
  dlhp->prev      = dlp;
 8001906:	e9c3 4101 	strd	r4, r1, [r3, #4]
 800190a:	2100      	movs	r1, #0
  dlhp->delta = (sysinterval_t)-1;
 800190c:	f8cb 0018 	str.w	r0, [fp, #24]
 8001910:	f381 8811 	msr	BASEPRI, r1
 8001914:	2330      	movs	r3, #48	@ 0x30
 8001916:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 800191a:	4e6a      	ldr	r6, [pc, #424]	@ (8001ac4 <stateMachine+0x9f4>)
 800191c:	6833      	ldr	r3, [r6, #0]
  if (chVTIsArmedI(vtp)) {
 800191e:	b14b      	cbz	r3, 8001934 <stateMachine+0x864>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	68b4      	ldr	r4, [r6, #8]
 8001924:	4422      	add	r2, r4
 8001926:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001928:	6872      	ldr	r2, [r6, #4]
 800192a:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 800192c:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 800192e:	6031      	str	r1, [r6, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001930:	f8cb 0018 	str.w	r0, [fp, #24]
  vtp->par     = par;
 8001934:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 8001936:	4863      	ldr	r0, [pc, #396]	@ (8001ac4 <stateMachine+0x9f4>)
 8001938:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <stateMachine+0x9f8>)
 800193a:	60c3      	str	r3, [r0, #12]
  dlp = dlhp->next;
 800193c:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (likely(dlp->delta < delta)) {
 8001940:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8001942:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8001946:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 800194a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800194e:	f4bf af51 	bcs.w	80017f4 <stateMachine+0x724>
    dlp = dlp->next;
 8001952:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001954:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	4291      	cmp	r1, r2
 800195a:	d3fa      	bcc.n	8001952 <stateMachine+0x882>
 800195c:	e74a      	b.n	80017f4 <stateMachine+0x724>
                else if(previous_state == WASH_TURN_CLKWISE && current_state == OPEN_LID) {
 800195e:	4b54      	ldr	r3, [pc, #336]	@ (8001ab0 <stateMachine+0x9e0>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	f47f ad28 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 8001968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800196c:	4b57      	ldr	r3, [pc, #348]	@ (8001acc <stateMachine+0x9fc>)
 800196e:	615a      	str	r2, [r3, #20]
                    current_state = WASH_TURN_CLKWISE;
 8001970:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab0 <stateMachine+0x9e0>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0085);
 8001972:	4a57      	ldr	r2, [pc, #348]	@ (8001ad0 <stateMachine+0xa00>)
                    current_state = WASH_TURN_CLKWISE;
 8001974:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0085);
 8001976:	4b50      	ldr	r3, [pc, #320]	@ (8001ab8 <stateMachine+0x9e8>)
                    resumeTimer(WASH_TIMER);
 8001978:	2003      	movs	r0, #3
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0105);
 800197a:	611a      	str	r2, [r3, #16]
                    resumeTimer(WASH_TIMER);
 800197c:	f7ff fa08 	bl	8000d90 <resumeTimer>
                    resumeTimer(MOTOR_TIMER);
 8001980:	2001      	movs	r0, #1
 8001982:	f7ff fa05 	bl	8000d90 <resumeTimer>
 8001986:	f7ff bbac 	b.w	80010e2 <stateMachine+0x12>
                else if(previous_state == WASH_WATER_OUT && current_state == OPEN_LID) {
 800198a:	4b49      	ldr	r3, [pc, #292]	@ (8001ab0 <stateMachine+0x9e0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	f47f ad12 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 8001994:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001998:	4b4c      	ldr	r3, [pc, #304]	@ (8001acc <stateMachine+0x9fc>)
 800199a:	615a      	str	r2, [r3, #20]
                    current_state = WASH_WATER_OUT;
 800199c:	4b44      	ldr	r3, [pc, #272]	@ (8001ab0 <stateMachine+0x9e0>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0045);
 800199e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad4 <stateMachine+0xa04>)
                    current_state = WASH_WATER_OUT;
 80019a0:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0045);
 80019a2:	4b45      	ldr	r3, [pc, #276]	@ (8001ab8 <stateMachine+0x9e8>)
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	f7ff bb9c 	b.w	80010e2 <stateMachine+0x12>
                else if(previous_state == SOAK_TURN_ANTI_CLKWISE && current_state == OPEN_LID) {
 80019aa:	4b41      	ldr	r3, [pc, #260]	@ (8001ab0 <stateMachine+0x9e0>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	f47f ad02 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 80019b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b8:	4b44      	ldr	r3, [pc, #272]	@ (8001acc <stateMachine+0x9fc>)
 80019ba:	615a      	str	r2, [r3, #20]
                    current_state = SOAK_TURN_ANTI_CLKWISE;
 80019bc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab0 <stateMachine+0x9e0>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0103);
 80019be:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <stateMachine+0xa08>)
                    current_state = SOAK_TURN_ANTI_CLKWISE;
 80019c0:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0103);
 80019c2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <stateMachine+0x9e8>)
                    resumeTimer(SOAK_TIMER);
 80019c4:	2002      	movs	r0, #2
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0103);
 80019c6:	611a      	str	r2, [r3, #16]
                    resumeTimer(SOAK_TIMER);
 80019c8:	f7ff f9e2 	bl	8000d90 <resumeTimer>
                    resumeTimer(MOTOR_TIMER);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff f9df 	bl	8000d90 <resumeTimer>
 80019d2:	f7ff bb86 	b.w	80010e2 <stateMachine+0x12>
                else if(previous_state == RINSE_WATER_IN && current_state == OPEN_LID) {
 80019d6:	2807      	cmp	r0, #7
 80019d8:	d10f      	bne.n	80019fa <stateMachine+0x92a>
 80019da:	4b35      	ldr	r3, [pc, #212]	@ (8001ab0 <stateMachine+0x9e0>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	f47f acea 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 80019e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e8:	4b38      	ldr	r3, [pc, #224]	@ (8001acc <stateMachine+0x9fc>)
 80019ea:	615a      	str	r2, [r3, #20]
                    current_state = RINSE_WATER_IN;
 80019ec:	4b30      	ldr	r3, [pc, #192]	@ (8001ab0 <stateMachine+0x9e0>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0029);
 80019ee:	4a3b      	ldr	r2, [pc, #236]	@ (8001adc <stateMachine+0xa0c>)
                    current_state = RINSE_WATER_IN;
 80019f0:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0029);
 80019f2:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <stateMachine+0x9e8>)
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	f7ff bb74 	b.w	80010e2 <stateMachine+0x12>
                else if(previous_state == RINSE_WATER_OUT && current_state == OPEN_LID) {
 80019fa:	280a      	cmp	r0, #10
 80019fc:	d019      	beq.n	8001a32 <stateMachine+0x962>
                else if(previous_state == RINSE_TURN_CLKWISE && current_state == OPEN_LID) {
 80019fe:	2808      	cmp	r0, #8
 8001a00:	d028      	beq.n	8001a54 <stateMachine+0x984>
                else if(previous_state == RINSE_TURN_ANTI_CLKWISE && current_state == OPEN_LID) {
 8001a02:	2809      	cmp	r0, #9
 8001a04:	d135      	bne.n	8001a72 <stateMachine+0x9a2>
 8001a06:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <stateMachine+0x9e0>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	f47f acd4 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 8001a10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a14:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <stateMachine+0x9fc>)
 8001a16:	615a      	str	r2, [r3, #20]
                    current_state = RINSE_TURN_ANTI_CLKWISE;
 8001a18:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <stateMachine+0x9e0>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0109);
 8001a1a:	4a31      	ldr	r2, [pc, #196]	@ (8001ae0 <stateMachine+0xa10>)
                    current_state = RINSE_TURN_ANTI_CLKWISE;
 8001a1c:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0109);
 8001a1e:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <stateMachine+0x9e8>)
                    resumeTimer(RINSE_TIMER);
 8001a20:	2004      	movs	r0, #4
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0109);
 8001a22:	611a      	str	r2, [r3, #16]
                    resumeTimer(RINSE_TIMER);
 8001a24:	f7ff f9b4 	bl	8000d90 <resumeTimer>
                    resumeTimer(MOTOR_TIMER);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff f9b1 	bl	8000d90 <resumeTimer>
 8001a2e:	f7ff bb58 	b.w	80010e2 <stateMachine+0x12>
                else if(previous_state == RINSE_WATER_OUT && current_state == OPEN_LID) {
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <stateMachine+0x9e0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	f47f acbe 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 8001a3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
                    current_state = RINSE_WATER_OUT;
 8001a40:	230a      	movs	r3, #10
                    palClearPad(IOPORT3, 13);
 8001a42:	4a22      	ldr	r2, [pc, #136]	@ (8001acc <stateMachine+0x9fc>)
 8001a44:	6151      	str	r1, [r2, #20]
                    current_state = RINSE_WATER_OUT;
 8001a46:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab0 <stateMachine+0x9e0>)
 8001a48:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0049);
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <stateMachine+0x9e8>)
 8001a4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ae4 <stateMachine+0xa14>)
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	f7ff bb47 	b.w	80010e2 <stateMachine+0x12>
                else if(previous_state == RINSE_TURN_CLKWISE && current_state == OPEN_LID) {
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <stateMachine+0x9e0>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	f47f acad 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 8001a5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
                    current_state = RINSE_TURN_CLKWISE;
 8001a62:	2308      	movs	r3, #8
                    palClearPad(IOPORT3, 13);
 8001a64:	4a19      	ldr	r2, [pc, #100]	@ (8001acc <stateMachine+0x9fc>)
 8001a66:	6151      	str	r1, [r2, #20]
                    current_state = RINSE_TURN_CLKWISE;
 8001a68:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <stateMachine+0x9e0>)
 8001a6a:	7013      	strb	r3, [r2, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0089);
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <stateMachine+0x9e8>)
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <stateMachine+0xa18>)
 8001a70:	e7d6      	b.n	8001a20 <stateMachine+0x950>
                else if(previous_state == CENTRIFUGE && current_state == OPEN_LID) {
 8001a72:	280b      	cmp	r0, #11
 8001a74:	f47f aca0 	bne.w	80013b8 <stateMachine+0x2e8>
 8001a78:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <stateMachine+0x9e0>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	f47f ac9b 	bne.w	80013b8 <stateMachine+0x2e8>
                    palClearPad(IOPORT3, 13);
 8001a82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <stateMachine+0x9fc>)
 8001a88:	615a      	str	r2, [r3, #20]
                    current_state = CENTRIFUGE;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <stateMachine+0x9e0>)
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0091);
 8001a8c:	4a17      	ldr	r2, [pc, #92]	@ (8001aec <stateMachine+0xa1c>)
                    current_state = CENTRIFUGE;
 8001a8e:	7018      	strb	r0, [r3, #0]
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0091);
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <stateMachine+0x9e8>)
                    resumeTimer(CENTRIFUGE_TIMER);
 8001a92:	2005      	movs	r0, #5
                    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0091);
 8001a94:	611a      	str	r2, [r3, #16]
                    resumeTimer(CENTRIFUGE_TIMER);
 8001a96:	f7ff f97b 	bl	8000d90 <resumeTimer>
 8001a9a:	f7ff bb22 	b.w	80010e2 <stateMachine+0x12>
                    palClearPad(IOPORT3, 13);
 8001a9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <stateMachine+0x9fc>)
 8001aa4:	615a      	str	r2, [r3, #20]
 8001aa6:	f7ff bb1c 	b.w	80010e2 <stateMachine+0x12>
 8001aaa:	bf00      	nop
 8001aac:	200012ac 	.word	0x200012ac
 8001ab0:	200012ad 	.word	0x200012ad
 8001ab4:	017c0083 	.word	0x017c0083
 8001ab8:	40010800 	.word	0x40010800
 8001abc:	20001320 	.word	0x20001320
 8001ac0:	08000821 	.word	0x08000821
 8001ac4:	20001338 	.word	0x20001338
 8001ac8:	080007a1 	.word	0x080007a1
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	017a0085 	.word	0x017a0085
 8001ad4:	01ba0045 	.word	0x01ba0045
 8001ad8:	00fc0103 	.word	0x00fc0103
 8001adc:	01d60029 	.word	0x01d60029
 8001ae0:	00f60109 	.word	0x00f60109
 8001ae4:	01b60049 	.word	0x01b60049
 8001ae8:	01760089 	.word	0x01760089
 8001aec:	016e0091 	.word	0x016e0091

08001af0 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
	...

08001b00 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
	...

08001b10 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001b10:	e7fe      	b.n	8001b10 <__default_exit>
 8001b12:	bf00      	nop
	...

08001b20 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	4d13      	ldr	r5, [pc, #76]	@ (8001b70 <__init_ram_areas+0x50>)
 8001b24:	f105 0480 	add.w	r4, r5, #128	@ 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001b28:	e955 0103 	ldrd	r0, r1, [r5, #-12]
 8001b2c:	4288      	cmp	r0, r1
    uint32_t *tp = rap->init_text_area;
 8001b2e:	f855 2c10 	ldr.w	r2, [r5, #-16]
    while (p < rap->clear_area) {
 8001b32:	d20d      	bcs.n	8001b50 <__init_ram_areas+0x30>
    uint32_t *p = rap->init_area;
 8001b34:	4603      	mov	r3, r0
 8001b36:	3a04      	subs	r2, #4
      *p = *tp;
 8001b38:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8001b3c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8001b40:	428b      	cmp	r3, r1
 8001b42:	d3f9      	bcc.n	8001b38 <__init_ram_areas+0x18>
 8001b44:	1e4b      	subs	r3, r1, #1
 8001b46:	1a1b      	subs	r3, r3, r0
 8001b48:	f023 0303 	bic.w	r3, r3, #3
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	4418      	add	r0, r3
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001b50:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8001b54:	4282      	cmp	r2, r0
 8001b56:	d907      	bls.n	8001b68 <__init_ram_areas+0x48>
      *p = 0;
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	1a12      	subs	r2, r2, r0
 8001b5c:	f022 0203 	bic.w	r2, r2, #3
 8001b60:	2100      	movs	r1, #0
 8001b62:	3204      	adds	r2, #4
 8001b64:	f000 ff1e 	bl	80029a4 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001b68:	3510      	adds	r5, #16
 8001b6a:	42a5      	cmp	r5, r4
 8001b6c:	d1dc      	bne.n	8001b28 <__init_ram_areas+0x8>
#endif
}
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
 8001b70:	08002abc 	.word	0x08002abc
	...

08001b80 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <Vector58+0x64>)
 8001b82:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8001b84:	6813      	ldr	r3, [r2, #0]
 8001b86:	400b      	ands	r3, r1
 8001b88:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 8001b8c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 8001b8e:	b33b      	cbz	r3, 8001be0 <Vector58+0x60>
OSAL_IRQ_HANDLER(Vector58) {
 8001b90:	b570      	push	{r4, r5, r6, lr}
  exti_serve_irq(pr, 0);
 8001b92:	4c15      	ldr	r4, [pc, #84]	@ (8001be8 <Vector58+0x68>)
 8001b94:	68a3      	ldr	r3, [r4, #8]
 8001b96:	b10b      	cbz	r3, 8001b9c <Vector58+0x1c>
 8001b98:	68e0      	ldr	r0, [r4, #12]
 8001b9a:	4798      	blx	r3
 8001b9c:	2330      	movs	r3, #48	@ 0x30
 8001b9e:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8001ba2:	6821      	ldr	r1, [r4, #0]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (ch_queue_notempty(&tqp->queue)) {
 8001ba4:	42a1      	cmp	r1, r4
 8001ba6:	d014      	beq.n	8001bd2 <Vector58+0x52>

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001ba8:	2600      	movs	r6, #0
 8001baa:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001bac:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001bae:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001bb0:	689d      	ldr	r5, [r3, #8]
  qp->next->prev = qp;
 8001bb2:	604c      	str	r4, [r1, #4]
  qp->next       = p->next;
 8001bb4:	6021      	str	r1, [r4, #0]
 8001bb6:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001bb8:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001bbc:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001bbe:	6890      	ldr	r0, [r2, #8]
 8001bc0:	42a8      	cmp	r0, r5
 8001bc2:	d2fb      	bcs.n	8001bbc <Vector58+0x3c>
  p->prev       = pqp->prev;
 8001bc4:	6850      	ldr	r0, [r2, #4]
 8001bc6:	42a1      	cmp	r1, r4
 8001bc8:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001bcc:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001bce:	6053      	str	r3, [r2, #4]
 8001bd0:	d1eb      	bne.n	8001baa <Vector58+0x2a>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8001bdc:	f7fe bbe8 	b.w	80003b0 <__port_irq_epilogue>
 8001be0:	f7fe bbe6 	b.w	80003b0 <__port_irq_epilogue>
 8001be4:	40010400 	.word	0x40010400
 8001be8:	20001408 	.word	0x20001408
 8001bec:	00000000 	.word	0x00000000

08001bf0 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001bf0:	4a18      	ldr	r2, [pc, #96]	@ (8001c54 <Vector5C+0x64>)
OSAL_IRQ_HANDLER(Vector5C) {
 8001bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8001bf4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 8001bfe:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 8001c00:	b31b      	cbz	r3, 8001c4a <Vector5C+0x5a>
 8001c02:	4f15      	ldr	r7, [pc, #84]	@ (8001c58 <Vector5C+0x68>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	b10b      	cbz	r3, 8001c0c <Vector5C+0x1c>
 8001c08:	69f8      	ldr	r0, [r7, #28]
 8001c0a:	4798      	blx	r3
 8001c0c:	2330      	movs	r3, #48	@ 0x30
 8001c0e:	f383 8811 	msr	BASEPRI, r3
 8001c12:	4c12      	ldr	r4, [pc, #72]	@ (8001c5c <Vector5C+0x6c>)
  return (bool)(qp->next != qp);
 8001c14:	6939      	ldr	r1, [r7, #16]
 8001c16:	42a1      	cmp	r1, r4
 8001c18:	d014      	beq.n	8001c44 <Vector5C+0x54>
 8001c1a:	2600      	movs	r6, #0
 8001c1c:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001c1e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001c20:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001c22:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8001c24:	6139      	str	r1, [r7, #16]
  qp->next->prev = qp;
 8001c26:	604c      	str	r4, [r1, #4]
 8001c28:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001c2a:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001c2e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001c30:	6890      	ldr	r0, [r2, #8]
 8001c32:	42a8      	cmp	r0, r5
 8001c34:	d2fb      	bcs.n	8001c2e <Vector5C+0x3e>
  p->prev       = pqp->prev;
 8001c36:	6850      	ldr	r0, [r2, #4]
 8001c38:	42a1      	cmp	r1, r4
 8001c3a:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001c3e:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001c40:	6053      	str	r3, [r2, #4]
 8001c42:	d1eb      	bne.n	8001c1c <Vector5C+0x2c>
 8001c44:	2300      	movs	r3, #0
 8001c46:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001c4e:	f7fe bbaf 	b.w	80003b0 <__port_irq_epilogue>
 8001c52:	bf00      	nop
 8001c54:	40010400 	.word	0x40010400
 8001c58:	20001408 	.word	0x20001408
 8001c5c:	20001418 	.word	0x20001418

08001c60 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001c60:	4a18      	ldr	r2, [pc, #96]	@ (8001cc4 <Vector60+0x64>)
OSAL_IRQ_HANDLER(Vector60) {
 8001c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8001c64:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8001c66:	6813      	ldr	r3, [r2, #0]
 8001c68:	400b      	ands	r3, r1
 8001c6a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8001c6e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 8001c70:	b31b      	cbz	r3, 8001cba <Vector60+0x5a>
 8001c72:	4f15      	ldr	r7, [pc, #84]	@ (8001cc8 <Vector60+0x68>)
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	b10b      	cbz	r3, 8001c7c <Vector60+0x1c>
 8001c78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c7a:	4798      	blx	r3
 8001c7c:	2330      	movs	r3, #48	@ 0x30
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	4c12      	ldr	r4, [pc, #72]	@ (8001ccc <Vector60+0x6c>)
  return (bool)(qp->next != qp);
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	42a1      	cmp	r1, r4
 8001c88:	d014      	beq.n	8001cb4 <Vector60+0x54>
 8001c8a:	2600      	movs	r6, #0
 8001c8c:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001c8e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001c90:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001c92:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8001c94:	6239      	str	r1, [r7, #32]
  qp->next->prev = qp;
 8001c96:	604c      	str	r4, [r1, #4]
 8001c98:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001c9a:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001c9e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001ca0:	6890      	ldr	r0, [r2, #8]
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d2fb      	bcs.n	8001c9e <Vector60+0x3e>
  p->prev       = pqp->prev;
 8001ca6:	6850      	ldr	r0, [r2, #4]
 8001ca8:	42a1      	cmp	r1, r4
 8001caa:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001cae:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001cb0:	6053      	str	r3, [r2, #4]
 8001cb2:	d1eb      	bne.n	8001c8c <Vector60+0x2c>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001cbe:	f7fe bb77 	b.w	80003b0 <__port_irq_epilogue>
 8001cc2:	bf00      	nop
 8001cc4:	40010400 	.word	0x40010400
 8001cc8:	20001408 	.word	0x20001408
 8001ccc:	20001428 	.word	0x20001428

08001cd0 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001cd0:	4a18      	ldr	r2, [pc, #96]	@ (8001d34 <Vector64+0x64>)
OSAL_IRQ_HANDLER(Vector64) {
 8001cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8001cd4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	400b      	ands	r3, r1
 8001cda:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8001cde:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 8001ce0:	b31b      	cbz	r3, 8001d2a <Vector64+0x5a>
 8001ce2:	4f15      	ldr	r7, [pc, #84]	@ (8001d38 <Vector64+0x68>)
 8001ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce6:	b10b      	cbz	r3, 8001cec <Vector64+0x1c>
 8001ce8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001cea:	4798      	blx	r3
 8001cec:	2330      	movs	r3, #48	@ 0x30
 8001cee:	f383 8811 	msr	BASEPRI, r3
 8001cf2:	4c12      	ldr	r4, [pc, #72]	@ (8001d3c <Vector64+0x6c>)
  return (bool)(qp->next != qp);
 8001cf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cf6:	42a1      	cmp	r1, r4
 8001cf8:	d014      	beq.n	8001d24 <Vector64+0x54>
 8001cfa:	2600      	movs	r6, #0
 8001cfc:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001cfe:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001d00:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001d02:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8001d04:	6339      	str	r1, [r7, #48]	@ 0x30
  qp->next->prev = qp;
 8001d06:	604c      	str	r4, [r1, #4]
 8001d08:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001d0a:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001d0e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001d10:	6890      	ldr	r0, [r2, #8]
 8001d12:	42a8      	cmp	r0, r5
 8001d14:	d2fb      	bcs.n	8001d0e <Vector64+0x3e>
  p->prev       = pqp->prev;
 8001d16:	6850      	ldr	r0, [r2, #4]
 8001d18:	42a1      	cmp	r1, r4
 8001d1a:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001d1e:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001d20:	6053      	str	r3, [r2, #4]
 8001d22:	d1eb      	bne.n	8001cfc <Vector64+0x2c>
 8001d24:	2300      	movs	r3, #0
 8001d26:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001d2e:	f7fe bb3f 	b.w	80003b0 <__port_irq_epilogue>
 8001d32:	bf00      	nop
 8001d34:	40010400 	.word	0x40010400
 8001d38:	20001408 	.word	0x20001408
 8001d3c:	20001438 	.word	0x20001438

08001d40 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001d40:	4a18      	ldr	r2, [pc, #96]	@ (8001da4 <Vector68+0x64>)
OSAL_IRQ_HANDLER(Vector68) {
 8001d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8001d44:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	400b      	ands	r3, r1
 8001d4a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8001d4e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 8001d50:	b31b      	cbz	r3, 8001d9a <Vector68+0x5a>
 8001d52:	4f15      	ldr	r7, [pc, #84]	@ (8001da8 <Vector68+0x68>)
 8001d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d56:	b10b      	cbz	r3, 8001d5c <Vector68+0x1c>
 8001d58:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001d5a:	4798      	blx	r3
 8001d5c:	2330      	movs	r3, #48	@ 0x30
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	4c12      	ldr	r4, [pc, #72]	@ (8001dac <Vector68+0x6c>)
  return (bool)(qp->next != qp);
 8001d64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d66:	42a1      	cmp	r1, r4
 8001d68:	d014      	beq.n	8001d94 <Vector68+0x54>
 8001d6a:	2600      	movs	r6, #0
 8001d6c:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001d6e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001d70:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001d72:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8001d74:	6439      	str	r1, [r7, #64]	@ 0x40
  qp->next->prev = qp;
 8001d76:	604c      	str	r4, [r1, #4]
 8001d78:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001d7a:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001d7e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001d80:	6890      	ldr	r0, [r2, #8]
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d2fb      	bcs.n	8001d7e <Vector68+0x3e>
  p->prev       = pqp->prev;
 8001d86:	6850      	ldr	r0, [r2, #4]
 8001d88:	42a1      	cmp	r1, r4
 8001d8a:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001d8e:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001d90:	6053      	str	r3, [r2, #4]
 8001d92:	d1eb      	bne.n	8001d6c <Vector68+0x2c>
 8001d94:	2300      	movs	r3, #0
 8001d96:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001d9e:	f7fe bb07 	b.w	80003b0 <__port_irq_epilogue>
 8001da2:	bf00      	nop
 8001da4:	40010400 	.word	0x40010400
 8001da8:	20001408 	.word	0x20001408
 8001dac:	20001448 	.word	0x20001448

08001db0 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001db2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f64 <Vector9C+0x1b4>)
 8001db4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8001db6:	681d      	ldr	r5, [r3, #0]
 8001db8:	4015      	ands	r5, r2
 8001dba:	f405 7278 	and.w	r2, r5, #992	@ 0x3e0
                     (1U << 9));
  EXTI->PR = pr;

  exti_serve_irq(pr, 5);
 8001dbe:	06ac      	lsls	r4, r5, #26
  EXTI->PR = pr;
 8001dc0:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 8001dc2:	d525      	bpl.n	8001e10 <Vector9C+0x60>
 8001dc4:	4c68      	ldr	r4, [pc, #416]	@ (8001f68 <Vector9C+0x1b8>)
 8001dc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001dc8:	b10b      	cbz	r3, 8001dce <Vector9C+0x1e>
 8001dca:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8001dcc:	4798      	blx	r3
 8001dce:	2330      	movs	r3, #48	@ 0x30
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	4e65      	ldr	r6, [pc, #404]	@ (8001f6c <Vector9C+0x1bc>)
  return (bool)(qp->next != qp);
 8001dd6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001dd8:	42b1      	cmp	r1, r6
 8001dda:	d016      	beq.n	8001e0a <Vector9C+0x5a>
 8001ddc:	f04f 0c00 	mov.w	ip, #0
 8001de0:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001de2:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001de4:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001de6:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8001de8:	6521      	str	r1, [r4, #80]	@ 0x50
  qp->next->prev = qp;
 8001dea:	604e      	str	r6, [r1, #4]
 8001dec:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001df0:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001df4:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001df6:	6890      	ldr	r0, [r2, #8]
 8001df8:	42b8      	cmp	r0, r7
 8001dfa:	d2fb      	bcs.n	8001df4 <Vector9C+0x44>
  p->prev       = pqp->prev;
 8001dfc:	6850      	ldr	r0, [r2, #4]
 8001dfe:	42b1      	cmp	r1, r6
 8001e00:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001e04:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001e06:	6053      	str	r3, [r2, #4]
 8001e08:	d1ea      	bne.n	8001de0 <Vector9C+0x30>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 8001e10:	0668      	lsls	r0, r5, #25
 8001e12:	d525      	bpl.n	8001e60 <Vector9C+0xb0>
 8001e14:	4c54      	ldr	r4, [pc, #336]	@ (8001f68 <Vector9C+0x1b8>)
 8001e16:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8001e18:	b10b      	cbz	r3, 8001e1e <Vector9C+0x6e>
 8001e1a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8001e1c:	4798      	blx	r3
 8001e1e:	2330      	movs	r3, #48	@ 0x30
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	4e52      	ldr	r6, [pc, #328]	@ (8001f70 <Vector9C+0x1c0>)
  return (bool)(qp->next != qp);
 8001e26:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001e28:	42b1      	cmp	r1, r6
 8001e2a:	d016      	beq.n	8001e5a <Vector9C+0xaa>
 8001e2c:	f04f 0c00 	mov.w	ip, #0
 8001e30:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001e32:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001e34:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001e36:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8001e38:	6621      	str	r1, [r4, #96]	@ 0x60
  qp->next->prev = qp;
 8001e3a:	604e      	str	r6, [r1, #4]
 8001e3c:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001e40:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001e44:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001e46:	6890      	ldr	r0, [r2, #8]
 8001e48:	42b8      	cmp	r0, r7
 8001e4a:	d2fb      	bcs.n	8001e44 <Vector9C+0x94>
  p->prev       = pqp->prev;
 8001e4c:	6850      	ldr	r0, [r2, #4]
 8001e4e:	42b1      	cmp	r1, r6
 8001e50:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001e54:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001e56:	6053      	str	r3, [r2, #4]
 8001e58:	d1ea      	bne.n	8001e30 <Vector9C+0x80>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 8001e60:	0629      	lsls	r1, r5, #24
 8001e62:	d525      	bpl.n	8001eb0 <Vector9C+0x100>
 8001e64:	4c40      	ldr	r4, [pc, #256]	@ (8001f68 <Vector9C+0x1b8>)
 8001e66:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8001e68:	b10b      	cbz	r3, 8001e6e <Vector9C+0xbe>
 8001e6a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8001e6c:	4798      	blx	r3
 8001e6e:	2330      	movs	r3, #48	@ 0x30
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	4e3f      	ldr	r6, [pc, #252]	@ (8001f74 <Vector9C+0x1c4>)
  return (bool)(qp->next != qp);
 8001e76:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8001e78:	42b1      	cmp	r1, r6
 8001e7a:	d016      	beq.n	8001eaa <Vector9C+0xfa>
 8001e7c:	f04f 0c00 	mov.w	ip, #0
 8001e80:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001e82:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001e84:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001e86:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8001e88:	6721      	str	r1, [r4, #112]	@ 0x70
  qp->next->prev = qp;
 8001e8a:	604e      	str	r6, [r1, #4]
 8001e8c:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001e90:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001e94:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001e96:	6890      	ldr	r0, [r2, #8]
 8001e98:	42b8      	cmp	r0, r7
 8001e9a:	d2fb      	bcs.n	8001e94 <Vector9C+0xe4>
  p->prev       = pqp->prev;
 8001e9c:	6850      	ldr	r0, [r2, #4]
 8001e9e:	42b1      	cmp	r1, r6
 8001ea0:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001ea4:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001ea6:	6053      	str	r3, [r2, #4]
 8001ea8:	d1ea      	bne.n	8001e80 <Vector9C+0xd0>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8001eb0:	05ea      	lsls	r2, r5, #23
 8001eb2:	d529      	bpl.n	8001f08 <Vector9C+0x158>
 8001eb4:	4c2c      	ldr	r4, [pc, #176]	@ (8001f68 <Vector9C+0x1b8>)
 8001eb6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8001eba:	b113      	cbz	r3, 8001ec2 <Vector9C+0x112>
 8001ebc:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8001ec0:	4798      	blx	r3
 8001ec2:	2330      	movs	r3, #48	@ 0x30
 8001ec4:	f383 8811 	msr	BASEPRI, r3
 8001ec8:	4e2b      	ldr	r6, [pc, #172]	@ (8001f78 <Vector9C+0x1c8>)
  return (bool)(qp->next != qp);
 8001eca:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8001ece:	42b1      	cmp	r1, r6
 8001ed0:	d017      	beq.n	8001f02 <Vector9C+0x152>
 8001ed2:	f04f 0c00 	mov.w	ip, #0
 8001ed6:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001ed8:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001eda:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001edc:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8001ede:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  qp->next->prev = qp;
 8001ee2:	604e      	str	r6, [r1, #4]
 8001ee4:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001ee8:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001eec:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001eee:	6890      	ldr	r0, [r2, #8]
 8001ef0:	42b8      	cmp	r0, r7
 8001ef2:	d2fb      	bcs.n	8001eec <Vector9C+0x13c>
  p->prev       = pqp->prev;
 8001ef4:	6850      	ldr	r0, [r2, #4]
 8001ef6:	42b1      	cmp	r1, r6
 8001ef8:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001efc:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001efe:	6053      	str	r3, [r2, #4]
 8001f00:	d1e9      	bne.n	8001ed6 <Vector9C+0x126>
 8001f02:	2300      	movs	r3, #0
 8001f04:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 8001f08:	05ab      	lsls	r3, r5, #22
 8001f0a:	d527      	bpl.n	8001f5c <Vector9C+0x1ac>
 8001f0c:	4c16      	ldr	r4, [pc, #88]	@ (8001f68 <Vector9C+0x1b8>)
 8001f0e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8001f12:	b113      	cbz	r3, 8001f1a <Vector9C+0x16a>
 8001f14:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8001f18:	4798      	blx	r3
 8001f1a:	2330      	movs	r3, #48	@ 0x30
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	4d16      	ldr	r5, [pc, #88]	@ (8001f7c <Vector9C+0x1cc>)
  return (bool)(qp->next != qp);
 8001f22:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8001f26:	42a9      	cmp	r1, r5
 8001f28:	d015      	beq.n	8001f56 <Vector9C+0x1a6>
 8001f2a:	2700      	movs	r7, #0
 8001f2c:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001f2e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001f30:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001f32:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8001f34:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
  qp->next->prev = qp;
 8001f38:	604d      	str	r5, [r1, #4]
 8001f3a:	629f      	str	r7, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001f3c:	f883 7024 	strb.w	r7, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001f40:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001f42:	6890      	ldr	r0, [r2, #8]
 8001f44:	42b0      	cmp	r0, r6
 8001f46:	d2fb      	bcs.n	8001f40 <Vector9C+0x190>
  p->prev       = pqp->prev;
 8001f48:	6850      	ldr	r0, [r2, #4]
 8001f4a:	42a9      	cmp	r1, r5
 8001f4c:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001f50:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001f52:	6053      	str	r3, [r2, #4]
 8001f54:	d1ea      	bne.n	8001f2c <Vector9C+0x17c>
 8001f56:	2300      	movs	r3, #0
 8001f58:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001f60:	f7fe ba26 	b.w	80003b0 <__port_irq_epilogue>
 8001f64:	40010400 	.word	0x40010400
 8001f68:	20001408 	.word	0x20001408
 8001f6c:	20001458 	.word	0x20001458
 8001f70:	20001468 	.word	0x20001468
 8001f74:	20001478 	.word	0x20001478
 8001f78:	20001488 	.word	0x20001488
 8001f7c:	20001498 	.word	0x20001498

08001f80 <VectorE0>:
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001f82:	4b88      	ldr	r3, [pc, #544]	@ (80021a4 <VectorE0+0x224>)
 8001f84:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8001f86:	681d      	ldr	r5, [r3, #0]
 8001f88:	4015      	ands	r5, r2
 8001f8a:	f405 427c 	and.w	r2, r5, #64512	@ 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;

  exti_serve_irq(pr, 10);
 8001f8e:	056e      	lsls	r6, r5, #21
  EXTI->PR = pr;
 8001f90:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 10);
 8001f92:	d529      	bpl.n	8001fe8 <VectorE0+0x68>
 8001f94:	4c84      	ldr	r4, [pc, #528]	@ (80021a8 <VectorE0+0x228>)
 8001f96:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8001f9a:	b113      	cbz	r3, 8001fa2 <VectorE0+0x22>
 8001f9c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8001fa0:	4798      	blx	r3
 8001fa2:	2330      	movs	r3, #48	@ 0x30
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	4e80      	ldr	r6, [pc, #512]	@ (80021ac <VectorE0+0x22c>)
  return (bool)(qp->next != qp);
 8001faa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8001fae:	42b1      	cmp	r1, r6
 8001fb0:	d017      	beq.n	8001fe2 <VectorE0+0x62>
 8001fb2:	f04f 0c00 	mov.w	ip, #0
 8001fb6:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001fb8:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001fba:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001fbc:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8001fbe:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0
  qp->next->prev = qp;
 8001fc2:	604e      	str	r6, [r1, #4]
 8001fc4:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001fc8:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001fcc:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001fce:	6890      	ldr	r0, [r2, #8]
 8001fd0:	42b8      	cmp	r0, r7
 8001fd2:	d2fb      	bcs.n	8001fcc <VectorE0+0x4c>
  p->prev       = pqp->prev;
 8001fd4:	6850      	ldr	r0, [r2, #4]
 8001fd6:	42b1      	cmp	r1, r6
 8001fd8:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001fdc:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001fde:	6053      	str	r3, [r2, #4]
 8001fe0:	d1e9      	bne.n	8001fb6 <VectorE0+0x36>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 8001fe8:	052c      	lsls	r4, r5, #20
 8001fea:	d529      	bpl.n	8002040 <VectorE0+0xc0>
 8001fec:	4c6e      	ldr	r4, [pc, #440]	@ (80021a8 <VectorE0+0x228>)
 8001fee:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8001ff2:	b113      	cbz	r3, 8001ffa <VectorE0+0x7a>
 8001ff4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8001ff8:	4798      	blx	r3
 8001ffa:	2330      	movs	r3, #48	@ 0x30
 8001ffc:	f383 8811 	msr	BASEPRI, r3
 8002000:	4e6b      	ldr	r6, [pc, #428]	@ (80021b0 <VectorE0+0x230>)
  return (bool)(qp->next != qp);
 8002002:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8002006:	42b1      	cmp	r1, r6
 8002008:	d017      	beq.n	800203a <VectorE0+0xba>
 800200a:	f04f 0c00 	mov.w	ip, #0
 800200e:	460b      	mov	r3, r1
  qp->next       = p->next;
 8002010:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002012:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8002014:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8002016:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0
  qp->next->prev = qp;
 800201a:	604e      	str	r6, [r1, #4]
 800201c:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8002020:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8002024:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002026:	6890      	ldr	r0, [r2, #8]
 8002028:	42b8      	cmp	r0, r7
 800202a:	d2fb      	bcs.n	8002024 <VectorE0+0xa4>
  p->prev       = pqp->prev;
 800202c:	6850      	ldr	r0, [r2, #4]
 800202e:	42b1      	cmp	r1, r6
 8002030:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8002034:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8002036:	6053      	str	r3, [r2, #4]
 8002038:	d1e9      	bne.n	800200e <VectorE0+0x8e>
 800203a:	2300      	movs	r3, #0
 800203c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 8002040:	04e8      	lsls	r0, r5, #19
 8002042:	d529      	bpl.n	8002098 <VectorE0+0x118>
 8002044:	4c58      	ldr	r4, [pc, #352]	@ (80021a8 <VectorE0+0x228>)
 8002046:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800204a:	b113      	cbz	r3, 8002052 <VectorE0+0xd2>
 800204c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8002050:	4798      	blx	r3
 8002052:	2330      	movs	r3, #48	@ 0x30
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	4e56      	ldr	r6, [pc, #344]	@ (80021b4 <VectorE0+0x234>)
  return (bool)(qp->next != qp);
 800205a:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 800205e:	42b1      	cmp	r1, r6
 8002060:	d017      	beq.n	8002092 <VectorE0+0x112>
 8002062:	f04f 0c00 	mov.w	ip, #0
 8002066:	460b      	mov	r3, r1
  qp->next       = p->next;
 8002068:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800206a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800206c:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800206e:	f8c4 10c0 	str.w	r1, [r4, #192]	@ 0xc0
  qp->next->prev = qp;
 8002072:	604e      	str	r6, [r1, #4]
 8002074:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8002078:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 800207c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800207e:	6890      	ldr	r0, [r2, #8]
 8002080:	42b8      	cmp	r0, r7
 8002082:	d2fb      	bcs.n	800207c <VectorE0+0xfc>
  p->prev       = pqp->prev;
 8002084:	6850      	ldr	r0, [r2, #4]
 8002086:	42b1      	cmp	r1, r6
 8002088:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800208c:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800208e:	6053      	str	r3, [r2, #4]
 8002090:	d1e9      	bne.n	8002066 <VectorE0+0xe6>
 8002092:	2300      	movs	r3, #0
 8002094:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 8002098:	04a9      	lsls	r1, r5, #18
 800209a:	d529      	bpl.n	80020f0 <VectorE0+0x170>
 800209c:	4c42      	ldr	r4, [pc, #264]	@ (80021a8 <VectorE0+0x228>)
 800209e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80020a2:	b113      	cbz	r3, 80020aa <VectorE0+0x12a>
 80020a4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
 80020a8:	4798      	blx	r3
 80020aa:	2330      	movs	r3, #48	@ 0x30
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	4e41      	ldr	r6, [pc, #260]	@ (80021b8 <VectorE0+0x238>)
  return (bool)(qp->next != qp);
 80020b2:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 80020b6:	42b1      	cmp	r1, r6
 80020b8:	d017      	beq.n	80020ea <VectorE0+0x16a>
 80020ba:	f04f 0c00 	mov.w	ip, #0
 80020be:	460b      	mov	r3, r1
  qp->next       = p->next;
 80020c0:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80020c2:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80020c4:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 80020c6:	f8c4 10d0 	str.w	r1, [r4, #208]	@ 0xd0
  qp->next->prev = qp;
 80020ca:	604e      	str	r6, [r1, #4]
 80020cc:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 80020d0:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 80020d4:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80020d6:	6890      	ldr	r0, [r2, #8]
 80020d8:	42b8      	cmp	r0, r7
 80020da:	d2fb      	bcs.n	80020d4 <VectorE0+0x154>
  p->prev       = pqp->prev;
 80020dc:	6850      	ldr	r0, [r2, #4]
 80020de:	42b1      	cmp	r1, r6
 80020e0:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 80020e4:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 80020e6:	6053      	str	r3, [r2, #4]
 80020e8:	d1e9      	bne.n	80020be <VectorE0+0x13e>
 80020ea:	2300      	movs	r3, #0
 80020ec:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 80020f0:	046a      	lsls	r2, r5, #17
 80020f2:	d529      	bpl.n	8002148 <VectorE0+0x1c8>
 80020f4:	4c2c      	ldr	r4, [pc, #176]	@ (80021a8 <VectorE0+0x228>)
 80020f6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80020fa:	b113      	cbz	r3, 8002102 <VectorE0+0x182>
 80020fc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 8002100:	4798      	blx	r3
 8002102:	2330      	movs	r3, #48	@ 0x30
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	4e2c      	ldr	r6, [pc, #176]	@ (80021bc <VectorE0+0x23c>)
  return (bool)(qp->next != qp);
 800210a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 800210e:	42b1      	cmp	r1, r6
 8002110:	d017      	beq.n	8002142 <VectorE0+0x1c2>
 8002112:	f04f 0c00 	mov.w	ip, #0
 8002116:	460b      	mov	r3, r1
  qp->next       = p->next;
 8002118:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800211a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800211c:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800211e:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
  qp->next->prev = qp;
 8002122:	604e      	str	r6, [r1, #4]
 8002124:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8002128:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 800212c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800212e:	6890      	ldr	r0, [r2, #8]
 8002130:	42b8      	cmp	r0, r7
 8002132:	d2fb      	bcs.n	800212c <VectorE0+0x1ac>
  p->prev       = pqp->prev;
 8002134:	6850      	ldr	r0, [r2, #4]
 8002136:	42b1      	cmp	r1, r6
 8002138:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800213c:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800213e:	6053      	str	r3, [r2, #4]
 8002140:	d1e9      	bne.n	8002116 <VectorE0+0x196>
 8002142:	2300      	movs	r3, #0
 8002144:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 8002148:	042b      	lsls	r3, r5, #16
 800214a:	d527      	bpl.n	800219c <VectorE0+0x21c>
 800214c:	4c16      	ldr	r4, [pc, #88]	@ (80021a8 <VectorE0+0x228>)
 800214e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8002152:	b113      	cbz	r3, 800215a <VectorE0+0x1da>
 8002154:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
 8002158:	4798      	blx	r3
 800215a:	2330      	movs	r3, #48	@ 0x30
 800215c:	f383 8811 	msr	BASEPRI, r3
 8002160:	4d17      	ldr	r5, [pc, #92]	@ (80021c0 <VectorE0+0x240>)
  return (bool)(qp->next != qp);
 8002162:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8002166:	42a9      	cmp	r1, r5
 8002168:	d015      	beq.n	8002196 <VectorE0+0x216>
 800216a:	2700      	movs	r7, #0
 800216c:	460b      	mov	r3, r1
  qp->next       = p->next;
 800216e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002170:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8002172:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8002174:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0
  qp->next->prev = qp;
 8002178:	604d      	str	r5, [r1, #4]
 800217a:	629f      	str	r7, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 800217c:	f883 7024 	strb.w	r7, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8002180:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002182:	6890      	ldr	r0, [r2, #8]
 8002184:	42b0      	cmp	r0, r6
 8002186:	d2fb      	bcs.n	8002180 <VectorE0+0x200>
  p->prev       = pqp->prev;
 8002188:	6850      	ldr	r0, [r2, #4]
 800218a:	42a9      	cmp	r1, r5
 800218c:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8002190:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8002192:	6053      	str	r3, [r2, #4]
 8002194:	d1ea      	bne.n	800216c <VectorE0+0x1ec>
 8002196:	2300      	movs	r3, #0
 8002198:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800219c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80021a0:	f7fe b906 	b.w	80003b0 <__port_irq_epilogue>
 80021a4:	40010400 	.word	0x40010400
 80021a8:	20001408 	.word	0x20001408
 80021ac:	200014a8 	.word	0x200014a8
 80021b0:	200014b8 	.word	0x200014b8
 80021b4:	200014c8 	.word	0x200014c8
 80021b8:	200014d8 	.word	0x200014d8
 80021bc:	200014e8 	.word	0x200014e8
 80021c0:	200014f8 	.word	0x200014f8
	...

080021d0 <SysTick_Handler>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	2630      	movs	r6, #48	@ 0x30
 80021d4:	f386 8811 	msr	BASEPRI, r6
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
 80021d8:	4d1f      	ldr	r5, [pc, #124]	@ (8002258 <SysTick_Handler+0x88>)
  return (bool)(dlhp != dlhp->next);
 80021da:	462a      	mov	r2, r5
 80021dc:	8bab      	ldrh	r3, [r5, #28]
 80021de:	f852 4f10 	ldr.w	r4, [r2, #16]!
 80021e2:	3301      	adds	r3, #1
 80021e4:	b29b      	uxth	r3, r3
  if (ch_dlist_notempty(&vtlp->dlist)) {
 80021e6:	4294      	cmp	r4, r2
  vtlp->systime++;
 80021e8:	83ab      	strh	r3, [r5, #28]
  if (ch_dlist_notempty(&vtlp->dlist)) {
 80021ea:	d016      	beq.n	800221a <SysTick_Handler+0x4a>
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
 80021ec:	68a3      	ldr	r3, [r4, #8]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	60a3      	str	r3, [r4, #8]
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 80021f2:	b993      	cbnz	r3, 800221a <SysTick_Handler+0x4a>
  dlp->prev->next = dlp->next;
 80021f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80021f8:	600a      	str	r2, [r1, #0]
  dlp->next->prev = dlp->prev;
 80021fa:	6051      	str	r1, [r2, #4]
      /* Triggered timer.*/
      vtp = (virtual_timer_t *)vtlp->dlist.next;

      /* Removing the element from the delta list, marking it as not armed.*/
      (void) ch_dlist_dequeue(&vtp->dlist);
      vtp->dlist.next = NULL;
 80021fc:	6023      	str	r3, [r4, #0]
 80021fe:	f383 8811 	msr	BASEPRI, r3

      chSysUnlockFromISR();
      vtp->func(vtp, vtp->par);
 8002202:	4620      	mov	r0, r4
 8002204:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8002208:	4798      	blx	r3
 800220a:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* If a reload is defined the timer needs to be restarted.*/
      if (vtp->reload > (sysinterval_t)0) {
 800220e:	6963      	ldr	r3, [r4, #20]
 8002210:	b953      	cbnz	r3, 8002228 <SysTick_Handler+0x58>
  dlp = dlhp->next;
 8002212:	692c      	ldr	r4, [r5, #16]
  while (likely(dlp->delta < delta)) {
 8002214:	68a3      	ldr	r3, [r4, #8]
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0ec      	beq.n	80021f4 <SysTick_Handler+0x24>
 800221a:	2300      	movs	r3, #0
 800221c:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  st_lld_serve_interrupt();

  OSAL_IRQ_EPILOGUE();
}
 8002220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8002224:	f7fe b8c4 	b.w	80003b0 <__port_irq_epilogue>
  dlp = dlhp->next;
 8002228:	692a      	ldr	r2, [r5, #16]
  while (likely(dlp->delta < delta)) {
 800222a:	6891      	ldr	r1, [r2, #8]
 800222c:	428b      	cmp	r3, r1
 800222e:	d904      	bls.n	800223a <SysTick_Handler+0x6a>
    dlp = dlp->next;
 8002230:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8002232:	1a5b      	subs	r3, r3, r1
  while (likely(dlp->delta < delta)) {
 8002234:	6891      	ldr	r1, [r2, #8]
 8002236:	4299      	cmp	r1, r3
 8002238:	d3fa      	bcc.n	8002230 <SysTick_Handler+0x60>
  dlhp->delta = (sysinterval_t)-1;
 800223a:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->prev       = dlp->next->prev;
 800223e:	6851      	ldr	r1, [r2, #4]
  dlp->delta      = delta;
 8002240:	60a3      	str	r3, [r4, #8]
  dlp->prev       = dlp->next->prev;
 8002242:	6061      	str	r1, [r4, #4]
  dlp->next       = dlhp;
 8002244:	6022      	str	r2, [r4, #0]
  dlp->prev->next = dlp;
 8002246:	600c      	str	r4, [r1, #0]
  dlp->delta -= delta;
 8002248:	6891      	ldr	r1, [r2, #8]
  dlhp->prev      = dlp;
 800224a:	6054      	str	r4, [r2, #4]
  dlp->delta -= delta;
 800224c:	1ac9      	subs	r1, r1, r3
 800224e:	692c      	ldr	r4, [r5, #16]
 8002250:	6091      	str	r1, [r2, #8]
  dlhp->delta = (sysinterval_t)-1;
 8002252:	61a8      	str	r0, [r5, #24]
 8002254:	68a3      	ldr	r3, [r4, #8]
}
 8002256:	e7cc      	b.n	80021f2 <SysTick_Handler+0x22>
 8002258:	20001380 	.word	0x20001380
 800225c:	00000000 	.word	0x00000000

08002260 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002260:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <__early_init+0x70>)
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	0798      	lsls	r0, r3, #30
 800226e:	d5fc      	bpl.n	800226a <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002270:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002272:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002274:	4916      	ldr	r1, [pc, #88]	@ (80022d0 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002276:	f003 03f9 	and.w	r3, r3, #249	@ 0xf9
 800227a:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800227c:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800227e:	684b      	ldr	r3, [r1, #4]
 8002280:	f013 0f0c 	tst.w	r3, #12
 8002284:	d1fb      	bne.n	800227e <__early_init+0x1e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8002286:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002288:	4a11      	ldr	r2, [pc, #68]	@ (80022d0 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 800228a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228e:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	0399      	lsls	r1, r3, #14
 8002294:	d5fc      	bpl.n	8002290 <__early_init+0x30>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002296:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002298:	490d      	ldr	r1, [pc, #52]	@ (80022d0 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800229a:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 800229e:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80022a0:	6813      	ldr	r3, [r2, #0]
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80022a8:	680b      	ldr	r3, [r1, #0]
 80022aa:	019b      	lsls	r3, r3, #6
 80022ac:	d5fc      	bpl.n	80022a8 <__early_init+0x48>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80022ae:	2012      	movs	r0, #18
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80022b0:	4a08      	ldr	r2, [pc, #32]	@ (80022d4 <__early_init+0x74>)
  FLASH->ACR = STM32_FLASHBITS;
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <__early_init+0x78>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80022b4:	604a      	str	r2, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 80022b6:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80022b8:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80022ba:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80022c2:	6853      	ldr	r3, [r2, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d1fa      	bne.n	80022c2 <__early_init+0x62>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	001d6400 	.word	0x001d6400
 80022d8:	40022000 	.word	0x40022000
 80022dc:	00000000 	.word	0x00000000

080022e0 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
 80022e0:	b410      	push	{r4}
  thread_t *otp = __instance_get_currthread(oip);
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 80022e2:	2401      	movs	r4, #1
  tp->state = CH_STATE_READY;
 80022e4:	f04f 0c00 	mov.w	ip, #0
  thread_t *otp = __instance_get_currthread(oip);
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <chSchDoPreemption+0x3c>)
  ch_priority_queue_t *p = pqp->next;
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	68d9      	ldr	r1, [r3, #12]
  pqp->next       = p->next;
 80022ee:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 80022f0:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 80022f2:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  pqp->next       = p->next;
 80022f6:	601a      	str	r2, [r3, #0]
  __instance_set_currthread(oip, ntp);
 80022f8:	60d8      	str	r0, [r3, #12]
  } while (unlikely(pqp->prio > p->prio));
 80022fa:	688c      	ldr	r4, [r1, #8]
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80022fc:	698b      	ldr	r3, [r1, #24]
  tp->state = CH_STATE_READY;
 80022fe:	f881 c024 	strb.w	ip, [r1, #36]	@ 0x24
    pqp = pqp->next;
 8002302:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	42a2      	cmp	r2, r4
 8002308:	d8fb      	bhi.n	8002302 <chSchDoPreemption+0x22>
  p->prev       = pqp->prev;
 800230a:	685a      	ldr	r2, [r3, #4]
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
}
 800230c:	bc10      	pop	{r4}
 800230e:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8002312:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8002314:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8002316:	f7fd bf93 	b.w	8000240 <__port_switch>
 800231a:	bf00      	nop
 800231c:	20001380 	.word	0x20001380

08002320 <chThdExit>:
 8002320:	2330      	movs	r3, #48	@ 0x30
void chThdExit(msg_t msg) {
 8002322:	b570      	push	{r4, r5, r6, lr}
 8002324:	f383 8811 	msr	BASEPRI, r3
  return __sch_get_currthread();
 8002328:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <chThdExit+0x84>)
 800232a:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 800232c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800232e:	f101 0c2c 	add.w	ip, r1, #44	@ 0x2c
 8002332:	4562      	cmp	r2, ip
  tp->state = CH_STATE_READY;
 8002334:	bf18      	it	ne
 8002336:	f04f 0e00 	movne.w	lr, #0
  currtp->u.exitcode = msg;
 800233a:	6288      	str	r0, [r1, #40]	@ 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800233c:	d113      	bne.n	8002366 <chThdExit+0x46>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 800233e:	f891 2026 	ldrb.w	r2, [r1, #38]	@ 0x26
 8002342:	b32a      	cbz	r2, 8002390 <chThdExit+0x70>
  otp->state = newstate;
 8002344:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 8002346:	f04f 0c01 	mov.w	ip, #1
  ch_priority_queue_t *p = pqp->next;
 800234a:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 800234c:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 8002350:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8002352:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8002354:	f880 c024 	strb.w	ip, [r0, #36]	@ 0x24
}
 8002358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pqp->next       = p->next;
 800235c:	601a      	str	r2, [r3, #0]
  __instance_set_currthread(oip, ntp);
 800235e:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8002360:	f7fd bf6e 	b.w	8000240 <__port_switch>
 8002364:	4622      	mov	r2, r4
  lp->next = p->next;
 8002366:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002368:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800236a:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 800236c:	62cc      	str	r4, [r1, #44]	@ 0x2c
  tp->state = CH_STATE_READY;
 800236e:	f882 e024 	strb.w	lr, [r2, #36]	@ 0x24
    pqp = pqp->next;
 8002372:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002374:	6885      	ldr	r5, [r0, #8]
 8002376:	42b5      	cmp	r5, r6
 8002378:	d2fb      	bcs.n	8002372 <chThdExit+0x52>
  p->prev       = pqp->prev;
 800237a:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800237c:	4564      	cmp	r4, ip
  p->next       = pqp;
 800237e:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 8002380:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 8002382:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8002384:	6042      	str	r2, [r0, #4]
 8002386:	d1ed      	bne.n	8002364 <chThdExit+0x44>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8002388:	f891 2026 	ldrb.w	r2, [r1, #38]	@ 0x26
 800238c:	2a00      	cmp	r2, #0
 800238e:	d1d9      	bne.n	8002344 <chThdExit+0x24>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 8002390:	f891 2025 	ldrb.w	r2, [r1, #37]	@ 0x25
 8002394:	0792      	lsls	r2, r2, #30
 8002396:	d1d5      	bne.n	8002344 <chThdExit+0x24>
  p->prev->next = p->next;
 8002398:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 800239c:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 800239e:	6050      	str	r0, [r2, #4]
  return p;
 80023a0:	e7d0      	b.n	8002344 <chThdExit+0x24>
 80023a2:	bf00      	nop
 80023a4:	20001380 	.word	0x20001380
	...

080023b0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80023b0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80023b4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80023b6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80023ba:	2300      	movs	r3, #0
 80023bc:	f383 8811 	msr	BASEPRI, r3
}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
	...

080023d0 <main>:
  rccResetAPB1(0xFFFFFFFF);
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	2200      	movs	r2, #0
        }
    }
}
static THD_WORKING_AREA(wa_stateMachine, 2048);

int main(void) {
 80023d6:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80023da:	49c7      	ldr	r1, [pc, #796]	@ (80026f8 <main+0x328>)
 80023dc:	b089      	sub	sp, #36	@ 0x24
 80023de:	690c      	ldr	r4, [r1, #16]
 80023e0:	610b      	str	r3, [r1, #16]
 80023e2:	690d      	ldr	r5, [r1, #16]
 80023e4:	610a      	str	r2, [r1, #16]
 80023e6:	690d      	ldr	r5, [r1, #16]
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023e8:	f44f 7480 	mov.w	r4, #256	@ 0x100
  rccResetAPB2(0xFFFFFFFF);
 80023ec:	68cd      	ldr	r5, [r1, #12]
 80023ee:	4fc3      	ldr	r7, [pc, #780]	@ (80026fc <main+0x32c>)
 80023f0:	60cb      	str	r3, [r1, #12]
 80023f2:	68cb      	ldr	r3, [r1, #12]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80023f4:	2060      	movs	r0, #96	@ 0x60
 80023f6:	60ca      	str	r2, [r1, #12]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023f8:	f04f 0940 	mov.w	r9, #64	@ 0x40
 80023fc:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8002400:	f44f 7e00 	mov.w	lr, #512	@ 0x200
 8002404:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
 8002408:	f44f 0600 	mov.w	r6, #8388608	@ 0x800000
 800240c:	68cb      	ldr	r3, [r1, #12]
  rccEnablePWRInterface(true);
 800240e:	463b      	mov	r3, r7
 8002410:	69cd      	ldr	r5, [r1, #28]
  PWR->CR |= PWR_CR_DBP;
 8002412:	f8df a2ec 	ldr.w	sl, [pc, #748]	@ 8002700 <main+0x330>
  rccEnablePWRInterface(true);
 8002416:	f045 5580 	orr.w	r5, r5, #268435456	@ 0x10000000
 800241a:	61cd      	str	r5, [r1, #28]
 800241c:	69cd      	ldr	r5, [r1, #28]
  rccEnableBKPInterface(true);
 800241e:	69cd      	ldr	r5, [r1, #28]
 8002420:	f045 6500 	orr.w	r5, r5, #134217728	@ 0x8000000
 8002424:	61cd      	str	r5, [r1, #28]
 8002426:	69c9      	ldr	r1, [r1, #28]
  PWR->CR |= PWR_CR_DBP;
 8002428:	f8da 5000 	ldr.w	r5, [sl]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800242c:	49b5      	ldr	r1, [pc, #724]	@ (8002704 <main+0x334>)
 800242e:	4325      	orrs	r5, r4
 8002430:	f8ca 5000 	str.w	r5, [sl]
 8002434:	f881 0306 	strb.w	r0, [r1, #774]	@ 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002438:	f8c1 9180 	str.w	r9, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800243c:	f8c1 9000 	str.w	r9, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002440:	f881 0307 	strb.w	r0, [r1, #775]	@ 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002444:	f8c1 8180 	str.w	r8, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002448:	f8c1 8000 	str.w	r8, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800244c:	f881 0308 	strb.w	r0, [r1, #776]	@ 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002450:	f8c1 4180 	str.w	r4, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002454:	600c      	str	r4, [r1, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002456:	f881 0309 	strb.w	r0, [r1, #777]	@ 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800245a:	f8c1 e180 	str.w	lr, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800245e:	f8c1 e000 	str.w	lr, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002462:	f881 030a 	strb.w	r0, [r1, #778]	@ 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002466:	f8c1 c180 	str.w	ip, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800246a:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800246e:	f881 0317 	strb.w	r0, [r1, #791]	@ 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002472:	f8c1 6180 	str.w	r6, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002476:	600e      	str	r6, [r1, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002478:	f881 0328 	strb.w	r0, [r1, #808]	@ 0x328
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800247c:	f8c1 4184 	str.w	r4, [r1, #388]	@ 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002480:	604c      	str	r4, [r1, #4]
void _pal_lld_init(const PALConfig *config) {
 8002482:	1939      	adds	r1, r7, r4
  qp->prev = qp;
 8002484:	e9c3 3300 	strd	r3, r3, [r3]
    _pal_init_event(i);
 8002488:	e9c3 2202 	strd	r2, r2, [r3, #8]
  for (i = 0; i < 16; i++) {
 800248c:	3310      	adds	r3, #16
 800248e:	4299      	cmp	r1, r3
 8002490:	d1f8      	bne.n	8002484 <main+0xb4>
  GPIOA->CRH = config->PAData.crh;
 8002492:	f04f 3388 	mov.w	r3, #2290649224	@ 0x88888888
  GPIOA->ODR = config->PAData.odr;
 8002496:	f04f 31ff 	mov.w	r1, #4294967295
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (SYSTICK_CK / OSAL_ST_FREQUENCY) - 1;
 800249a:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  SCB->__SHPR[_SHP_IDX(handler)] = (SCB->__SHPR[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                   (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#else
  SCB->__SHPR[handler] = NVIC_PRIORITY_MASK(prio);
 800249e:	f04f 0880 	mov.w	r8, #128	@ 0x80
 80024a2:	f648 4a9f 	movw	sl, #35999	@ 0x8c9f
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	f04f 0907 	mov.w	r9, #7
  rccEnableAPB2(APB2_EN_MASK, true);
 80024aa:	4c93      	ldr	r4, [pc, #588]	@ (80026f8 <main+0x328>)
  GPIOC->ODR = config->PCData.odr;
 80024ac:	f8df c258 	ldr.w	ip, [pc, #600]	@ 8002708 <main+0x338>
  rccEnableAPB2(APB2_EN_MASK, true);
 80024b0:	69a6      	ldr	r6, [r4, #24]
  GPIOC->CRH = config->PCData.crh;
 80024b2:	f8df b258 	ldr.w	fp, [pc, #600]	@ 800270c <main+0x33c>
  rccEnableAPB2(APB2_EN_MASK, true);
 80024b6:	f046 067d 	orr.w	r6, r6, #125	@ 0x7d
 80024ba:	61a6      	str	r6, [r4, #24]
 80024bc:	69a4      	ldr	r4, [r4, #24]
  GPIOA->ODR = config->PAData.odr;
 80024be:	4c94      	ldr	r4, [pc, #592]	@ (8002710 <main+0x340>)
  GPIOD->ODR = config->PDData.odr;
 80024c0:	4e94      	ldr	r6, [pc, #592]	@ (8002714 <main+0x344>)
  GPIOA->ODR = config->PAData.odr;
 80024c2:	60e1      	str	r1, [r4, #12]
  GPIOA->CRH = config->PAData.crh;
 80024c4:	6063      	str	r3, [r4, #4]
  GPIOA->CRL = config->PAData.crl;
 80024c6:	6023      	str	r3, [r4, #0]
  GPIOB->ODR = config->PBData.odr;
 80024c8:	f8c4 140c 	str.w	r1, [r4, #1036]	@ 0x40c
  GPIOB->CRH = config->PBData.crh;
 80024cc:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  GPIOB->CRL = config->PBData.crl;
 80024d0:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
  GPIOC->ODR = config->PCData.odr;
 80024d4:	f8cc 100c 	str.w	r1, [ip, #12]
  GPIOC->CRH = config->PCData.crh;
 80024d8:	f8cc b004 	str.w	fp, [ip, #4]
  GPIOC->CRL = config->PCData.crl;
 80024dc:	f8cc 3000 	str.w	r3, [ip]
  GPIOD->CRL = config->PDData.crl;
 80024e0:	f8df c234 	ldr.w	ip, [pc, #564]	@ 8002718 <main+0x348>
  GPIOB->ODR = config->PBData.odr;
 80024e4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  GPIOD->ODR = config->PDData.odr;
 80024e8:	60f1      	str	r1, [r6, #12]
  GPIOD->CRH = config->PDData.crh;
 80024ea:	6073      	str	r3, [r6, #4]
  GPIOD->CRL = config->PDData.crl;
 80024ec:	f8c6 c000 	str.w	ip, [r6]
  GPIOE->ODR = config->PEData.odr;
 80024f0:	f8c4 1c0c 	str.w	r1, [r4, #3084]	@ 0xc0c
  GPIOE->CRH = config->PEData.crh;
 80024f4:	f8c4 3c04 	str.w	r3, [r4, #3076]	@ 0xc04
  GPIOE->CRL = config->PEData.crl;
 80024f8:	f8c4 3c00 	str.w	r3, [r4, #3072]	@ 0xc00
 80024fc:	4b87      	ldr	r3, [pc, #540]	@ (800271c <main+0x34c>)
  SysTick->LOAD = (SYSTICK_CK / OSAL_ST_FREQUENCY) - 1;
 80024fe:	f8c0 a014 	str.w	sl, [r0, #20]
  SysTick->VAL = 0;
 8002502:	6182      	str	r2, [r0, #24]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8002504:	f8c0 9010 	str.w	r9, [r0, #16]
 8002508:	f883 8023 	strb.w	r8, [r3, #35]	@ 0x23
  tmp->cumulative = (rttime_t)0;
 800250c:	2000      	movs	r0, #0
  tmp->worst      = (rtcnt_t)0;
 800250e:	e9cd 1202 	strd	r1, r2, [sp, #8]
  tmp->cumulative = (rttime_t)0;
 8002512:	2100      	movs	r1, #0
 */
void chSysInit(void) {
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 8002514:	f04f 0e01 	mov.w	lr, #1
}
 8002518:	2504      	movs	r5, #4
 800251a:	f8df 8204 	ldr.w	r8, [pc, #516]	@ 8002720 <main+0x350>
  tmp->cumulative = (rttime_t)0;
 800251e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8002522:	9205      	str	r2, [sp, #20]
 8002524:	f888 e000 	strb.w	lr, [r8]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8002528:	f8c8 2008 	str.w	r2, [r8, #8]
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 800252c:	a802      	add	r0, sp, #8
 800252e:	f7fd fedf 	bl	80002f0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8002532:	f7fd fee5 	bl	8000300 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 8002536:	3d01      	subs	r5, #1
 8002538:	d1f8      	bne.n	800252c <main+0x15c>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 800253a:	201c      	movs	r0, #28
  mp->align = align;
 800253c:	2204      	movs	r2, #4
  mp->object_size = size;
 800253e:	2414      	movs	r4, #20
  tcp->offset = tm.best;
 8002540:	9b02      	ldr	r3, [sp, #8]
  ch_memcore.basemem = __heap_base__;
 8002542:	4978      	ldr	r1, [pc, #480]	@ (8002724 <main+0x354>)
 8002544:	f8c8 3008 	str.w	r3, [r8, #8]
  qp->next = qp;
 8002548:	4b77      	ldr	r3, [pc, #476]	@ (8002728 <main+0x358>)
 800254a:	2630      	movs	r6, #48	@ 0x30
 800254c:	6318      	str	r0, [r3, #48]	@ 0x30
  mp->provider = provider;
 800254e:	4877      	ldr	r0, [pc, #476]	@ (800272c <main+0x35c>)
  mp->align = align;
 8002550:	61da      	str	r2, [r3, #28]
  mp->provider = provider;
 8002552:	6218      	str	r0, [r3, #32]
 8002554:	6398      	str	r0, [r3, #56]	@ 0x38
 8002556:	4876      	ldr	r0, [pc, #472]	@ (8002730 <main+0x360>)
  mp->align = align;
 8002558:	635a      	str	r2, [r3, #52]	@ 0x34
 800255a:	6008      	str	r0, [r1, #0]
  ch_memcore.topmem  = __heap_end__;
 800255c:	4875      	ldr	r0, [pc, #468]	@ (8002734 <main+0x364>)
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 800255e:	4a76      	ldr	r2, [pc, #472]	@ (8002738 <main+0x368>)
 8002560:	6048      	str	r0, [r1, #4]
 8002562:	4976      	ldr	r1, [pc, #472]	@ (800273c <main+0x36c>)
  mp->object_size = size;
 8002564:	619c      	str	r4, [r3, #24]
 8002566:	6011      	str	r1, [r2, #0]
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 8002568:	4c75      	ldr	r4, [pc, #468]	@ (8002740 <main+0x370>)

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800256a:	4976      	ldr	r1, [pc, #472]	@ (8002744 <main+0x374>)
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 800256c:	e9c2 5501 	strd	r5, r5, [r2, #4]
 8002570:	63a1      	str	r1, [r4, #56]	@ 0x38
 8002572:	f102 010c 	add.w	r1, r2, #12
  qp->prev = qp;
 8002576:	e9c2 1103 	strd	r1, r1, [r2, #12]
  mp->owner = NULL;
 800257a:	6155      	str	r5, [r2, #20]
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 800257c:	f103 0210 	add.w	r2, r3, #16
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24
 8002588:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
 800258e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8002592:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002594:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
 800259a:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800259e:	e9c3 3300 	strd	r3, r3, [r3]
 80025a2:	609d      	str	r5, [r3, #8]
  mp->next = NULL;
 80025a4:	615d      	str	r5, [r3, #20]
 80025a6:	62dd      	str	r5, [r3, #44]	@ 0x2c
  ch_system.instances[core_id] = oip;
 80025a8:	f8c8 4004 	str.w	r4, [r8, #4]
  oip->core_id = core_id;
 80025ac:	6325      	str	r5, [r4, #48]	@ 0x30
 80025ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80025b0:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 80025b4:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  tp->epending          = (eventmask_t)0;
 80025ba:	e9c4 551d 	strd	r5, r5, [r4, #116]	@ 0x74
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025be:	4b57      	ldr	r3, [pc, #348]	@ (800271c <main+0x34c>)
  pqp->prio = (tprio_t)0;
 80025c0:	60a5      	str	r5, [r4, #8]
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 80025c2:	6365      	str	r5, [r4, #52]	@ 0x34
 80025c4:	68d9      	ldr	r1, [r3, #12]
  reg_value  =  (reg_value                                   |
 80025c6:	4a60      	ldr	r2, [pc, #384]	@ (8002748 <main+0x378>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c8:	ea01 010c 	and.w	r1, r1, ip
  reg_value  =  (reg_value                                   |
 80025cc:	430a      	orrs	r2, r1
  tp->owner             = oip;
 80025ce:	6564      	str	r4, [r4, #84]	@ 0x54
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 80025d0:	65e5      	str	r5, [r4, #92]	@ 0x5c
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80025d2:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80025d4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80025d8:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800274c <main+0x37c>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80025dc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80025e0:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  tp->refs              = (trefs_t)1;
 80025e4:	2201      	movs	r2, #1
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80025e6:	f8dc 1000 	ldr.w	r1, [ip]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	2020      	movs	r0, #32
 80025ec:	4311      	orrs	r1, r2
 80025ee:	f8cc 1000 	str.w	r1, [ip]
  dlhp->delta = (sysinterval_t)-1;
 80025f2:	f04f 31ff 	mov.w	r1, #4294967295
 80025f6:	77d8      	strb	r0, [r3, #31]
 80025f8:	f883 6022 	strb.w	r6, [r3, #34]	@ 0x22
 80025fc:	61a1      	str	r1, [r4, #24]
  tp->name              = name;
 80025fe:	4954      	ldr	r1, [pc, #336]	@ (8002750 <main+0x380>)
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
 8002600:	83a5      	strh	r5, [r4, #28]
 8002602:	65a1      	str	r1, [r4, #88]	@ 0x58
  dlhp->next  = dlhp;
 8002604:	f104 0110 	add.w	r1, r4, #16
  dlhp->prev  = dlhp;
 8002608:	e9c4 1104 	strd	r1, r1, [r4, #16]
  qp->next = qp;
 800260c:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
  return currcore->vtlist.systime;
 8002610:	8ba3      	ldrh	r3, [r4, #28]
  qp->prev = qp;
 8002612:	e9c4 111b 	strd	r1, r1, [r4, #108]	@ 0x6c
  lp->next = lp;
 8002616:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 800261a:	66a1      	str	r1, [r4, #104]	@ 0x68
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800261c:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8002620:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002624:	60e1      	str	r1, [r4, #12]
  tp->hdr.pqueue.prio   = prio;
 8002626:	2380      	movs	r3, #128	@ 0x80
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8002628:	4629      	mov	r1, r5
 800262a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  p->prev->next = p;
 800262e:	f104 0b4c 	add.w	fp, r4, #76	@ 0x4c
  p->prev       = qp->prev;
 8002632:	f104 0928 	add.w	r9, r4, #40	@ 0x28
 8002636:	6463      	str	r3, [r4, #68]	@ 0x44
  tp->realprio          = prio;
 8002638:	67e3      	str	r3, [r4, #124]	@ 0x7c
  p->prev->next = p;
 800263a:	f8c4 b028 	str.w	fp, [r4, #40]	@ 0x28
  tp->refs              = (trefs_t)1;
 800263e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 8002642:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
  p->prev       = qp->prev;
 8002646:	f8c4 9050 	str.w	r9, [r4, #80]	@ 0x50
 800264a:	e9c4 0108 	strd	r0, r1, [r4, #32]

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 800264e:	f04f 0102 	mov.w	r1, #2
  tp->wabase = tdp->wbase;
 8002652:	4b40      	ldr	r3, [pc, #256]	@ (8002754 <main+0x384>)
 8002654:	f888 1000 	strb.w	r1, [r8]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002658:	f103 01c4 	add.w	r1, r3, #196	@ 0xc4
 800265c:	f8c3 10f4 	str.w	r1, [r3, #244]	@ 0xf4
 8002660:	493d      	ldr	r1, [pc, #244]	@ (8002758 <main+0x388>)
 8002662:	f8c3 b0fc 	str.w	fp, [r3, #252]	@ 0xfc
 8002666:	f8c3 10c4 	str.w	r1, [r3, #196]	@ 0xc4
  tp->name              = name;
 800266a:	493c      	ldr	r1, [pc, #240]	@ (800275c <main+0x38c>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800266c:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 8002760 <main+0x390>
  p->prev->next = p;
 8002670:	f103 0af8 	add.w	sl, r3, #248	@ 0xf8
  qp->next = qp;
 8002674:	f503 7e8c 	add.w	lr, r3, #280	@ 0x118
  p->prev->next = p;
 8002678:	f103 0ce8 	add.w	ip, r3, #232	@ 0xe8
  tp->name              = name;
 800267c:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
  lp->next = lp;
 8002680:	f503 718a 	add.w	r1, r3, #276	@ 0x114
  tp->epending          = (eventmask_t)0;
 8002684:	e9c3 5548 	strd	r5, r5, [r3, #288]	@ 0x120
  qp->prev = qp;
 8002688:	e9c3 ee46 	strd	lr, lr, [r3, #280]	@ 0x118
  p->prev       = pqp->prev;
 800268c:	e9c3 443a 	strd	r4, r4, [r3, #232]	@ 0xe8
  pqp->prev     = p;
 8002690:	e9c4 cc00 	strd	ip, ip, [r4]
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 8002694:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
  tp->wabase = tdp->wbase;
 8002698:	f8c3 3108 	str.w	r3, [r3, #264]	@ 0x108
  lp->next = lp;
 800269c:	f8c3 1114 	str.w	r1, [r3, #276]	@ 0x114
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80026a0:	f8c3 50c8 	str.w	r5, [r3, #200]	@ 0xc8
 80026a4:	f8c3 b0e4 	str.w	fp, [r3, #228]	@ 0xe4
  tp->hdr.pqueue.prio   = prio;
 80026a8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  tp->owner             = oip;
 80026ac:	f8c3 4100 	str.w	r4, [r3, #256]	@ 0x100
  tp->realprio          = prio;
 80026b0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
  tp->refs              = (trefs_t)1;
 80026b4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
  p->next       = qp;
 80026b8:	f8c3 90f8 	str.w	r9, [r3, #248]	@ 0xf8
  p->prev->next = p;
 80026bc:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
  qp->prev      = p;
 80026c0:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
 80026c4:	f8a3 510c 	strh.w	r5, [r3, #268]	@ 0x10c
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80026c8:	f385 8811 	msr	BASEPRI, r5
  qp->next = qp;
 80026cc:	4b25      	ldr	r3, [pc, #148]	@ (8002764 <main+0x394>)
    rd_ptr = wr_ptr = &queue[0];
 80026ce:	4a26      	ldr	r2, [pc, #152]	@ (8002768 <main+0x398>)
  qp->prev = qp;
 80026d0:	e9c3 3300 	strd	r3, r3, [r3]
 80026d4:	609d      	str	r5, [r3, #8]
  qp->next = qp;
 80026d6:	4b25      	ldr	r3, [pc, #148]	@ (800276c <main+0x39c>)

    halInit();
    chSysInit(); 
    queueInit();
    palSetPadMode(IOPORT3, 13, PAL_MODE_OUTPUT_PUSHPULL);
 80026d8:	480b      	ldr	r0, [pc, #44]	@ (8002708 <main+0x338>)
  qp->prev = qp;
 80026da:	e9c3 3300 	strd	r3, r3, [r3]
  qp->next = qp;
 80026de:	4b24      	ldr	r3, [pc, #144]	@ (8002770 <main+0x3a0>)
 80026e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  qp->prev = qp;
 80026e4:	e9c3 3300 	strd	r3, r3, [r3]
    rd_ptr = wr_ptr = &queue[0];
 80026e8:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <main+0x3a4>)
    palClearPad(IOPORT3, 13);
    /* pinos de saida */
    palSetGroupMode(IOPORT1, GPIO_OUTPUT_MASK, 0, PAL_MODE_OUTPUT_PUSHPULL);
 80026ea:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8002710 <main+0x340>
    rd_ptr = wr_ptr = &queue[0];
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4a21      	ldr	r2, [pc, #132]	@ (8002778 <main+0x3a8>)
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	e042      	b.n	800277c <main+0x3ac>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	20001408 	.word	0x20001408
 8002700:	40007000 	.word	0x40007000
 8002704:	e000e100 	.word	0xe000e100
 8002708:	40011000 	.word	0x40011000
 800270c:	88388888 	.word	0x88388888
 8002710:	40010800 	.word	0x40010800
 8002714:	40011400 	.word	0x40011400
 8002718:	88888844 	.word	0x88888844
 800271c:	e000ed00 	.word	0xe000ed00
 8002720:	20001370 	.word	0x20001370
 8002724:	20001368 	.word	0x20001368
 8002728:	2000096c 	.word	0x2000096c
 800272c:	08000391 	.word	0x08000391
 8002730:	20001508 	.word	0x20001508
 8002734:	20005000 	.word	0x20005000
 8002738:	20000950 	.word	0x20000950
 800273c:	08000351 	.word	0x08000351
 8002740:	20001380 	.word	0x20001380
 8002744:	08002a84 	.word	0x08002a84
 8002748:	05fa0300 	.word	0x05fa0300
 800274c:	e0001000 	.word	0xe0001000
 8002750:	08002a58 	.word	0x08002a58
 8002754:	20000820 	.word	0x20000820
 8002758:	080002e1 	.word	0x080002e1
 800275c:	08002a44 	.word	0x08002a44
 8002760:	08000251 	.word	0x08000251
 8002764:	20000808 	.word	0x20000808
 8002768:	20001360 	.word	0x20001360
 800276c:	20000818 	.word	0x20000818
 8002770:	20000800 	.word	0x20000800
 8002774:	20001354 	.word	0x20001354
 8002778:	200012a8 	.word	0x200012a8
    qsize = 0;
 800277c:	4b7e      	ldr	r3, [pc, #504]	@ (8002978 <main+0x5a8>)
    palSetPadMode(IOPORT3, 13, PAL_MODE_OUTPUT_PUSHPULL);
 800277e:	2206      	movs	r2, #6
    qsize = 0;
 8002780:	601d      	str	r5, [r3, #0]
    palSetPadMode(IOPORT3, 13, PAL_MODE_OUTPUT_PUSHPULL);
 8002782:	f7fd fd75 	bl	8000270 <_pal_lld_setgroupmode>
    palClearPad(IOPORT3, 13);
 8002786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    palSetGroupMode(IOPORT1, GPIO_OUTPUT_MASK, 0, PAL_MODE_OUTPUT_PUSHPULL);
 800278a:	2206      	movs	r2, #6
    palClearPad(IOPORT3, 13);
 800278c:	6143      	str	r3, [r0, #20]
    palSetGroupMode(IOPORT1, GPIO_OUTPUT_MASK, 0, PAL_MODE_OUTPUT_PUSHPULL);
 800278e:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8002792:	4640      	mov	r0, r8
 8002794:	f7fd fd6c 	bl	8000270 <_pal_lld_setgroupmode>
    /* pinos de entrada */
    palSetGroupMode(IOPORT2, GPIO_INPUT_MASK, 0, PAL_MODE_INPUT_PULLUP);
 8002798:	2203      	movs	r2, #3
 800279a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800279e:	f508 6080 	add.w	r0, r8, #1024	@ 0x400
 80027a2:	f7fd fd65 	bl	8000270 <_pal_lld_setgroupmode>
    /* desliga todos os leds */
    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 80027a6:	4b75      	ldr	r3, [pc, #468]	@ (800297c <main+0x5ac>)
 80027a8:	f8c8 3010 	str.w	r3, [r8, #16]
 80027ac:	f386 8811 	msr	BASEPRI, r6
    /* habilita interrupçoes nos botoes de entrada */
    palEnablePadEvent(IOPORT2, BTN_START, PAL_EVENT_MODE_FALLING_EDGE);
 80027b0:	200c      	movs	r0, #12
 80027b2:	f7fd ff0d 	bl	80005d0 <_pal_lld_enablepadevent.constprop.0>
 80027b6:	f385 8811 	msr	BASEPRI, r5
 80027ba:	f386 8811 	msr	BASEPRI, r6
    palEnablePadEvent(IOPORT2, BTN_HIGH_WATERMARK, PAL_EVENT_MODE_FALLING_EDGE);
 80027be:	200d      	movs	r0, #13
 80027c0:	f7fd ff06 	bl	80005d0 <_pal_lld_enablepadevent.constprop.0>
 80027c4:	f385 8811 	msr	BASEPRI, r5
 80027c8:	f386 8811 	msr	BASEPRI, r6
    palEnablePadEvent(IOPORT2, BTN_LOW_WATERMARK, PAL_EVENT_MODE_FALLING_EDGE);
 80027cc:	200e      	movs	r0, #14
 80027ce:	f7fd feff 	bl	80005d0 <_pal_lld_enablepadevent.constprop.0>
 80027d2:	f385 8811 	msr	BASEPRI, r5
 80027d6:	f386 8811 	msr	BASEPRI, r6
    palEnablePadEvent(IOPORT2, BTN_OPEN_LID, PAL_EVENT_MODE_FALLING_EDGE);
 80027da:	200f      	movs	r0, #15
 80027dc:	f7fd fef8 	bl	80005d0 <_pal_lld_enablepadevent.constprop.0>
 80027e0:	f385 8811 	msr	BASEPRI, r5
 80027e4:	f386 8811 	msr	BASEPRI, r6
 */
void palSetPadCallbackI(ioportid_t port, iopadid_t pad,
                        palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_pad_event(port, pad);
  pep->cb = cb;
 80027e8:	4b65      	ldr	r3, [pc, #404]	@ (8002980 <main+0x5b0>)
  pep->arg = arg;
 80027ea:	f8c7 50cc 	str.w	r5, [r7, #204]	@ 0xcc
  pep->cb = cb;
 80027ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027f2:	f385 8811 	msr	BASEPRI, r5
 80027f6:	f386 8811 	msr	BASEPRI, r6
 80027fa:	4b62      	ldr	r3, [pc, #392]	@ (8002984 <main+0x5b4>)
  pep->arg = arg;
 80027fc:	f8c7 50dc 	str.w	r5, [r7, #220]	@ 0xdc
  pep->cb = cb;
 8002800:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002804:	f385 8811 	msr	BASEPRI, r5
 8002808:	f386 8811 	msr	BASEPRI, r6
 800280c:	4b5e      	ldr	r3, [pc, #376]	@ (8002988 <main+0x5b8>)
  pep->arg = arg;
 800280e:	f8c7 50ec 	str.w	r5, [r7, #236]	@ 0xec
  pep->cb = cb;
 8002812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002816:	f385 8811 	msr	BASEPRI, r5
 800281a:	f386 8811 	msr	BASEPRI, r6
 800281e:	4b5b      	ldr	r3, [pc, #364]	@ (800298c <main+0x5bc>)
  pep->arg = arg;
 8002820:	f8c7 50fc 	str.w	r5, [r7, #252]	@ 0xfc
  pep->cb = cb;
 8002824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002828:	f385 8811 	msr	BASEPRI, r5
 800282c:	f386 8811 	msr	BASEPRI, r6
  tp->hdr.pqueue.prio   = prio;
 8002830:	2281      	movs	r2, #129	@ 0x81
  tp->flags             = CH_FLAG_MODE_STATIC;
 8002832:	f44f 7180 	mov.w	r1, #256	@ 0x100
  tp->wabase = (stkalign_t *)wsp;
 8002836:	4b56      	ldr	r3, [pc, #344]	@ (8002990 <main+0x5c0>)
  p->prev       = qp->prev;
 8002838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
  tp->hdr.pqueue.prio   = prio;
 800283a:	f8c3 28b0 	str.w	r2, [r3, #2224]	@ 0x8b0
  tp->realprio          = prio;
 800283e:	f8c3 28e8 	str.w	r2, [r3, #2280]	@ 0x8e8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002842:	4a54      	ldr	r2, [pc, #336]	@ (8002994 <main+0x5c4>)
  p->prev->next = p;
 8002844:	f603 00b8 	addw	r0, r3, #2232	@ 0x8b8
 8002848:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
  tp->name              = name;
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <main+0x5c8>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800284e:	f603 0784 	addw	r7, r3, #2180	@ 0x884
  tp->name              = name;
 8002852:	f8c3 28c4 	str.w	r2, [r3, #2244]	@ 0x8c4
  qp->next = qp;
 8002856:	f603 02d8 	addw	r2, r3, #2264	@ 0x8d8
  tp->flags             = CH_FLAG_MODE_STATIC;
 800285a:	f8a3 18cd 	strh.w	r1, [r3, #2253]	@ 0x8cd
  p->prev       = qp->prev;
 800285e:	f8c3 68bc 	str.w	r6, [r3, #2236]	@ 0x8bc
  thread_t *otp = __instance_get_currthread(oip);
 8002862:	68e1      	ldr	r1, [r4, #12]
  p->next       = qp;
 8002864:	f8c3 98b8 	str.w	r9, [r3, #2232]	@ 0x8b8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002868:	f8c3 b8a4 	str.w	fp, [r3, #2212]	@ 0x8a4
  tp->wabase = (stkalign_t *)wsp;
 800286c:	f8c3 38c8 	str.w	r3, [r3, #2248]	@ 0x8c8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002870:	f8c3 5888 	str.w	r5, [r3, #2184]	@ 0x888
  tp->owner             = oip;
 8002874:	f8c3 48c0 	str.w	r4, [r3, #2240]	@ 0x8c0
  tp->mtxlist           = NULL;
 8002878:	f8c3 58e4 	str.w	r5, [r3, #2276]	@ 0x8e4
  tp->epending          = (eventmask_t)0;
 800287c:	f8c3 58e0 	str.w	r5, [r3, #2272]	@ 0x8e0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002880:	f8c3 78b4 	str.w	r7, [r3, #2228]	@ 0x8b4
  p->prev->next = p;
 8002884:	6030      	str	r0, [r6, #0]
  qp->next = qp;
 8002886:	f8c3 28d8 	str.w	r2, [r3, #2264]	@ 0x8d8
  qp->prev = qp;
 800288a:	f8c3 28dc 	str.w	r2, [r3, #2268]	@ 0x8dc
  lp->next = lp;
 800288e:	f603 02d4 	addw	r2, r3, #2260	@ 0x8d4
  qp->prev      = p;
 8002892:	62e0      	str	r0, [r4, #44]	@ 0x2c
  lp->next = lp;
 8002894:	f8c3 28d4 	str.w	r2, [r3, #2260]	@ 0x8d4
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8002898:	f8d3 68b0 	ldr.w	r6, [r3, #2224]	@ 0x8b0
 800289c:	6888      	ldr	r0, [r1, #8]
  ntp->u.rdymsg = msg;
 800289e:	f8c3 58d0 	str.w	r5, [r3, #2256]	@ 0x8d0
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80028a2:	4286      	cmp	r6, r0
 80028a4:	d957      	bls.n	8002956 <main+0x586>
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80028a6:	698a      	ldr	r2, [r1, #24]
  tp->state = CH_STATE_READY;
 80028a8:	f881 5024 	strb.w	r5, [r1, #36]	@ 0x24
    pqp = pqp->next;
 80028ac:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio > p->prio));
 80028ae:	6895      	ldr	r5, [r2, #8]
 80028b0:	42a8      	cmp	r0, r5
 80028b2:	d3fb      	bcc.n	80028ac <main+0x4dc>
    ntp->state = CH_STATE_CURRENT;
 80028b4:	2501      	movs	r5, #1
  p->prev       = pqp->prev;
 80028b6:	6850      	ldr	r0, [r2, #4]
  p->next       = pqp;
 80028b8:	600a      	str	r2, [r1, #0]
  p->prev       = pqp->prev;
 80028ba:	6048      	str	r0, [r1, #4]
  p->prev->next = p;
 80028bc:	6001      	str	r1, [r0, #0]
    __instance_set_currthread(oip, ntp);
 80028be:	4837      	ldr	r0, [pc, #220]	@ (800299c <main+0x5cc>)
  pqp->prev     = p;
 80028c0:	6051      	str	r1, [r2, #4]
 80028c2:	60e0      	str	r0, [r4, #12]
    ntp->state = CH_STATE_CURRENT;
 80028c4:	f883 58cc 	strb.w	r5, [r3, #2252]	@ 0x8cc
    chSysSwitch(ntp, otp);
 80028c8:	f7fd fcba 	bl	8000240 <__port_switch>
 80028cc:	2600      	movs	r6, #0
 80028ce:	f386 8811 	msr	BASEPRI, r6
 80028d2:	f04f 0930 	mov.w	r9, #48	@ 0x30
  vtp->reload  = (sysinterval_t)0;
 80028d6:	46b0      	mov	r8, r6
  dlhp->delta = (sysinterval_t)-1;
 80028d8:	f04f 35ff 	mov.w	r5, #4294967295
 80028dc:	4f30      	ldr	r7, [pc, #192]	@ (80029a0 <main+0x5d0>)
 80028de:	f389 8811 	msr	BASEPRI, r9
  thread_t *tp = __instance_get_currthread(currcore);
 80028e2:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
  while (likely(dlp->delta < delta)) {
 80028e6:	6898      	ldr	r0, [r3, #8]
 80028e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028ec:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
  vtp->func    = vtfunc;
 80028f0:	e9cd 7105 	strd	r7, r1, [sp, #20]
  vtp->reload  = (sysinterval_t)0;
 80028f4:	9607      	str	r6, [sp, #28]
 80028f6:	d204      	bcs.n	8002902 <main+0x532>
    dlp = dlp->next;
 80028f8:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80028fa:	1a12      	subs	r2, r2, r0
  while (likely(dlp->delta < delta)) {
 80028fc:	6898      	ldr	r0, [r3, #8]
 80028fe:	4290      	cmp	r0, r2
 8002900:	d3fa      	bcc.n	80028f8 <main+0x528>
  otp->state = newstate;
 8002902:	f04f 0e08 	mov.w	lr, #8
  ntp->state = CH_STATE_CURRENT;
 8002906:	f04f 0c01 	mov.w	ip, #1
  dlp->prev       = dlp->next->prev;
 800290a:	6858      	ldr	r0, [r3, #4]
  dlp->prev->next = dlp;
 800290c:	eb0d 0a0e 	add.w	sl, sp, lr
  dlp->delta      = delta;
 8002910:	9204      	str	r2, [sp, #16]
  dlp->prev       = dlp->next->prev;
 8002912:	e9cd 3002 	strd	r3, r0, [sp, #8]
  dlp->prev->next = dlp;
 8002916:	f8c0 a000 	str.w	sl, [r0]
  dlp->delta -= delta;
 800291a:	6898      	ldr	r0, [r3, #8]
  dlhp->prev      = dlp;
 800291c:	f8c3 a004 	str.w	sl, [r3, #4]
  dlp->delta -= delta;
 8002920:	1a82      	subs	r2, r0, r2
  ch_priority_queue_t *p = pqp->next;
 8002922:	6820      	ldr	r0, [r4, #0]
  dlp->delta -= delta;
 8002924:	609a      	str	r2, [r3, #8]
  otp->state = newstate;
 8002926:	f881 e024 	strb.w	lr, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 800292a:	6803      	ldr	r3, [r0, #0]
  dlhp->delta = (sysinterval_t)-1;
 800292c:	61a5      	str	r5, [r4, #24]
  pqp->next->prev = pqp;
 800292e:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8002930:	f880 c024 	strb.w	ip, [r0, #36]	@ 0x24
  pqp->next       = p->next;
 8002934:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 8002936:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8002938:	f7fd fc82 	bl	8000240 <__port_switch>
  return (bool)(vtp->dlist.next != NULL);
 800293c:	9b02      	ldr	r3, [sp, #8]
    if (chVTIsArmedI(&vt)) {
 800293e:	b13b      	cbz	r3, 8002950 <main+0x580>
  dlp->prev->next = dlp->next;
 8002940:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
  vtp->dlist.next->delta += vtp->dlist.delta;
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4402      	add	r2, r0
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 800294c:	6059      	str	r1, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 800294e:	61a5      	str	r5, [r4, #24]
 8002950:	f388 8811 	msr	BASEPRI, r8
}
 8002954:	e7c3      	b.n	80028de <main+0x50e>
  tp->state = CH_STATE_READY;
 8002956:	4622      	mov	r2, r4
 8002958:	f883 58cc 	strb.w	r5, [r3, #2252]	@ 0x8cc
    pqp = pqp->next;
 800295c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800295e:	6891      	ldr	r1, [r2, #8]
 8002960:	428e      	cmp	r6, r1
 8002962:	d9fb      	bls.n	800295c <main+0x58c>
  p->prev       = pqp->prev;
 8002964:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8002966:	f8c3 28a8 	str.w	r2, [r3, #2216]	@ 0x8a8
  p->prev       = pqp->prev;
 800296a:	f8c3 18ac 	str.w	r1, [r3, #2220]	@ 0x8ac
  p->prev->next = p;
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <main+0x5cc>)
 8002970:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8002972:	6053      	str	r3, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002974:	e7aa      	b.n	80028cc <main+0x4fc>
 8002976:	bf00      	nop
 8002978:	20001364 	.word	0x20001364
 800297c:	01fe0001 	.word	0x01fe0001
 8002980:	08000a21 	.word	0x08000a21
 8002984:	08000aa1 	.word	0x08000aa1
 8002988:	08000b21 	.word	0x08000b21
 800298c:	08000781 	.word	0x08000781
 8002990:	200009b8 	.word	0x200009b8
 8002994:	080010d1 	.word	0x080010d1
 8002998:	08002a4c 	.word	0x08002a4c
 800299c:	20001260 	.word	0x20001260
 80029a0:	08000621 	.word	0x08000621

080029a4 <memset>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	0786      	lsls	r6, r0, #30
 80029a8:	d047      	beq.n	8002a3a <memset+0x96>
 80029aa:	1e54      	subs	r4, r2, #1
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	d03e      	beq.n	8002a2e <memset+0x8a>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b2ca      	uxtb	r2, r1
 80029b4:	e001      	b.n	80029ba <memset+0x16>
 80029b6:	3c01      	subs	r4, #1
 80029b8:	d339      	bcc.n	8002a2e <memset+0x8a>
 80029ba:	f803 2b01 	strb.w	r2, [r3], #1
 80029be:	079d      	lsls	r5, r3, #30
 80029c0:	d1f9      	bne.n	80029b6 <memset+0x12>
 80029c2:	2c03      	cmp	r4, #3
 80029c4:	d92c      	bls.n	8002a20 <memset+0x7c>
 80029c6:	b2cd      	uxtb	r5, r1
 80029c8:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 80029cc:	2c0f      	cmp	r4, #15
 80029ce:	461a      	mov	r2, r3
 80029d0:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 80029d4:	d934      	bls.n	8002a40 <memset+0x9c>
 80029d6:	f1a4 0c10 	sub.w	ip, r4, #16
 80029da:	f02c 060f 	bic.w	r6, ip, #15
 80029de:	f103 0e10 	add.w	lr, r3, #16
 80029e2:	44b6      	add	lr, r6
 80029e4:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80029e8:	e9c2 5500 	strd	r5, r5, [r2]
 80029ec:	e9c2 5502 	strd	r5, r5, [r2, #8]
 80029f0:	3210      	adds	r2, #16
 80029f2:	4572      	cmp	r2, lr
 80029f4:	d1f8      	bne.n	80029e8 <memset+0x44>
 80029f6:	f10c 0201 	add.w	r2, ip, #1
 80029fa:	f014 0f0c 	tst.w	r4, #12
 80029fe:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002a02:	f004 0c0f 	and.w	ip, r4, #15
 8002a06:	d013      	beq.n	8002a30 <memset+0x8c>
 8002a08:	f1ac 0304 	sub.w	r3, ip, #4
 8002a0c:	f023 0303 	bic.w	r3, r3, #3
 8002a10:	3304      	adds	r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	f842 5b04 	str.w	r5, [r2], #4
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d1fb      	bne.n	8002a14 <memset+0x70>
 8002a1c:	f00c 0403 	and.w	r4, ip, #3
 8002a20:	b12c      	cbz	r4, 8002a2e <memset+0x8a>
 8002a22:	b2c9      	uxtb	r1, r1
 8002a24:	441c      	add	r4, r3
 8002a26:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2a:	42a3      	cmp	r3, r4
 8002a2c:	d1fb      	bne.n	8002a26 <memset+0x82>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	4664      	mov	r4, ip
 8002a32:	4613      	mov	r3, r2
 8002a34:	2c00      	cmp	r4, #0
 8002a36:	d1f4      	bne.n	8002a22 <memset+0x7e>
 8002a38:	e7f9      	b.n	8002a2e <memset+0x8a>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	e7c0      	b.n	80029c2 <memset+0x1e>
 8002a40:	46a4      	mov	ip, r4
 8002a42:	e7e1      	b.n	8002a08 <memset+0x64>
