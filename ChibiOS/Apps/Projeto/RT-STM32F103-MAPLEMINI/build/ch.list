
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	08001e51 	.word	0x08001e51
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	080011f1 	.word	0x080011f1
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	08000ba1 	.word	0x08000ba1
 800005c:	08000c11 	.word	0x08000c11
 8000060:	08000c81 	.word	0x08000c81
 8000064:	08000cf1 	.word	0x08000cf1
 8000068:	08000d61 	.word	0x08000d61
 800006c:	0800023b 	.word	0x0800023b
 8000070:	0800023b 	.word	0x0800023b
 8000074:	0800023b 	.word	0x0800023b
 8000078:	0800023b 	.word	0x0800023b
 800007c:	0800023b 	.word	0x0800023b
 8000080:	0800023b 	.word	0x0800023b
 8000084:	0800023b 	.word	0x0800023b
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	0800023b 	.word	0x0800023b
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	08000dd1 	.word	0x08000dd1
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	0800023b 	.word	0x0800023b
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	0800023b 	.word	0x0800023b
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	08000fa1 	.word	0x08000fa1
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4826      	ldr	r0, [pc, #152]	@ (80001fc <endfiniloop+0x6>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4825      	ldr	r0, [pc, #148]	@ (8000200 <endfiniloop+0xa>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 800016e:	4825      	ldr	r0, [pc, #148]	@ (8000204 <endfiniloop+0xe>)
                ldr     r1, =SCB_VTOR
 8000170:	4925      	ldr	r1, [pc, #148]	@ (8000208 <endfiniloop+0x12>)
                str     r0, [r1]
 8000172:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 8000174:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000176:	f380 8814 	msr	CONTROL, r0
                isb
 800017a:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 800017e:	f000 fcc7 	bl	8000b10 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000182:	f001 f87d 	bl	8001280 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000186:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800018a:	4920      	ldr	r1, [pc, #128]	@ (800020c <endfiniloop+0x16>)
                ldr     r2, =__main_stack_end__
 800018c:	4a1b      	ldr	r2, [pc, #108]	@ (80001fc <endfiniloop+0x6>)

0800018e <msloop>:
msloop:
                cmp     r1, r2
 800018e:	4291      	cmp	r1, r2
                itt     lo
 8000190:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000196:	e7fa      	bcc.n	800018e <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000198:	491d      	ldr	r1, [pc, #116]	@ (8000210 <endfiniloop+0x1a>)
                ldr     r2, =__process_stack_end__
 800019a:	4a19      	ldr	r2, [pc, #100]	@ (8000200 <endfiniloop+0xa>)

0800019c <psloop>:
psloop:
                cmp     r1, r2
 800019c:	4291      	cmp	r1, r2
                itt     lo
 800019e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a0:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001a4:	e7fa      	bcc.n	800019c <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 80001a6:	491b      	ldr	r1, [pc, #108]	@ (8000214 <endfiniloop+0x1e>)
                ldr     r2, =__data_base__
 80001a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000218 <endfiniloop+0x22>)
                ldr     r3, =__data_end__
 80001aa:	4b1c      	ldr	r3, [pc, #112]	@ (800021c <endfiniloop+0x26>)

080001ac <dloop>:
dloop:
                cmp     r2, r3
 80001ac:	429a      	cmp	r2, r3
                ittt    lo
 80001ae:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b0:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001b4:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001b8:	e7f8      	bcc.n	80001ac <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 80001ba:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001bc:	4918      	ldr	r1, [pc, #96]	@ (8000220 <endfiniloop+0x2a>)
                ldr     r2, =__bss_end__
 80001be:	4a19      	ldr	r2, [pc, #100]	@ (8000224 <endfiniloop+0x2e>)

080001c0 <bloop>:
bloop:
                cmp     r1, r2
 80001c0:	4291      	cmp	r1, r2
                itt     lo
 80001c2:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001c4:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001c8:	e7fa      	bcc.n	80001c0 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001ca:	f000 fcb9 	bl	8000b40 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001ce:	f000 fca7 	bl	8000b20 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d2:	4c15      	ldr	r4, [pc, #84]	@ (8000228 <endfiniloop+0x32>)
                ldr     r5, =__init_array_end__
 80001d4:	4d15      	ldr	r5, [pc, #84]	@ (800022c <endfiniloop+0x36>)

080001d6 <initloop>:
initloop:
                cmp     r4, r5
 80001d6:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001d8:	da03      	bge.n	80001e2 <endinitloop>
                ldr     r1, [r4], #4
 80001da:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001de:	4788      	blx	r1
                b       initloop
 80001e0:	e7f9      	b.n	80001d6 <initloop>

080001e2 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e2:	f001 fe45 	bl	8001e70 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001e6:	4c12      	ldr	r4, [pc, #72]	@ (8000230 <endfiniloop+0x3a>)
                ldr     r5, =__fini_array_end__
 80001e8:	4d12      	ldr	r5, [pc, #72]	@ (8000234 <endfiniloop+0x3e>)

080001ea <finiloop>:
finiloop:
                cmp     r4, r5
 80001ea:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001ec:	da03      	bge.n	80001f6 <endfiniloop>
                ldr     r1, [r4], #4
 80001ee:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f2:	4788      	blx	r1
                b       finiloop
 80001f4:	e7f9      	b.n	80001ea <finiloop>

080001f6 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001f6:	f000 bc9b 	b.w	8000b30 <__default_exit>
 80001fa:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 80001fc:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000200:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000204:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000208:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	080024ac 	.word	0x080024ac
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 8000220:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 8000224:	20001dc0 	.word	0x20001dc0
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f001 fdb0 	bl	8001dc0 <chThdExit>

08000260 <.zombies>:
.zombies:       b       .zombies
 8000260:	e7fe      	b.n	8000260 <.zombies>

08000262 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 8000262:	f001 f84d 	bl	8001300 <chSchDoPreemption>

08000266 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <__port_exit_from_isr+0x2>
 800026a:	0000      	movs	r0, r0
 800026c:	0000      	movs	r0, r0
	...

08000270 <_pal_lld_setgroupmode>:
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8000270:	2300      	movs	r3, #0
                           iomode_t mode) {
 8000272:	b530      	push	{r4, r5, lr}
  cfg = cfgtab[mode];
 8000274:	4d16      	ldr	r5, [pc, #88]	@ (80002d0 <_pal_lld_setgroupmode+0x60>)
  if (mode == PAL_MODE_INPUT_PULLUP)
 8000276:	2a03      	cmp	r2, #3
  cfg = cfgtab[mode];
 8000278:	5cad      	ldrb	r5, [r5, r2]
 800027a:	f04f 0408 	mov.w	r4, #8
  mh = ml = crh = crl = 0;
 800027e:	469c      	mov	ip, r3
 8000280:	461a      	mov	r2, r3
 8000282:	469e      	mov	lr, r3
    port->BSRR = mask;
 8000284:	bf08      	it	eq
 8000286:	6101      	streq	r1, [r0, #16]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 8000288:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ml <<= 4;
 800028c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    crl <<= 4;
 8000290:	ea4f 1303 	mov.w	r3, r3, lsl #4
    crh <<= 4;
 8000294:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    mh <<= 4;
 8000298:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
      ml |= 0xf;
 800029c:	bf0c      	ite	eq
 800029e:	f042 020f 	orreq.w	r2, r2, #15
    else
      crl |= cfg;
 80002a2:	432b      	orrne	r3, r5
    if ((mask & 0x8000) == 0)
 80002a4:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
      mh |= 0xf;
 80002a8:	bf0c      	ite	eq
 80002aa:	f04e 0e0f 	orreq.w	lr, lr, #15
    else
      crh |= cfg;
 80002ae:	ea4c 0c05 	orrne.w	ip, ip, r5
  for (i = 0; i < 8; i++) {
 80002b2:	3c01      	subs	r4, #1
    mask <<= 1;
 80002b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0; i < 8; i++) {
 80002b8:	d1e6      	bne.n	8000288 <_pal_lld_setgroupmode+0x18>
  }
  port->CRH = (port->CRH & mh) | crh;
 80002ba:	6841      	ldr	r1, [r0, #4]
 80002bc:	ea01 010e 	and.w	r1, r1, lr
 80002c0:	ea41 010c 	orr.w	r1, r1, ip
 80002c4:	6041      	str	r1, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 80002c6:	6801      	ldr	r1, [r0, #0]
 80002c8:	400a      	ands	r2, r1
 80002ca:	4313      	orrs	r3, r2
 80002cc:	6003      	str	r3, [r0, #0]
}
 80002ce:	bd30      	pop	{r4, r5, pc}
 80002d0:	08002418 	.word	0x08002418
	...

080002e0 <__idle_thread>:
 */
static void __idle_thread(void *p) {

  (void)p;

  while (true) {
 80002e0:	e7fe      	b.n	80002e0 <__idle_thread>
 80002e2:	bf00      	nop
	...

080002f0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80002f0:	4b01      	ldr	r3, [pc, #4]	@ (80002f8 <chTMStartMeasurementX+0x8>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80002f4:	6083      	str	r3, [r0, #8]
}
 80002f6:	4770      	bx	lr
 80002f8:	e0001000 	.word	0xe0001000
 80002fc:	00000000 	.word	0x00000000

08000300 <chTMStopMeasurementX>:
 8000300:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000302:	4a0f      	ldr	r2, [pc, #60]	@ (8000340 <chTMStopMeasurementX+0x40>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	6892      	ldr	r2, [r2, #8]
  tmp->last = (now - tmp->last) - offset;
 8000308:	6881      	ldr	r1, [r0, #8]
 800030a:	1a9b      	subs	r3, r3, r2
 800030c:	1a5b      	subs	r3, r3, r1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800030e:	b410      	push	{r4}
  tmp->n++;
 8000310:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000314:	18d2      	adds	r2, r2, r3
 8000316:	6941      	ldr	r1, [r0, #20]
 8000318:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 800031a:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 800031c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8000320:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000322:	6802      	ldr	r2, [r0, #0]
  tmp->n++;
 8000324:	f104 0401 	add.w	r4, r4, #1
    tmp->worst = tmp->last;
 8000328:	bf88      	it	hi
 800032a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800032c:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 800032e:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000332:	6141      	str	r1, [r0, #20]
}
 8000334:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 8000336:	bf38      	it	cc
 8000338:	6003      	strcc	r3, [r0, #0]
}
 800033a:	4770      	bx	lr
 800033c:	e0001000 	.word	0xe0001000
 8000340:	20001c28 	.word	0x20001c28
	...

08000350 <chCoreAllocFromTop>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000350:	2330      	movs	r3, #48	@ 0x30
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000352:	b410      	push	{r4}
 8000354:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000358:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <chCoreAllocFromTop+0x38>)
 800035a:	4249      	negs	r1, r1
 800035c:	685c      	ldr	r4, [r3, #4]
 800035e:	1a20      	subs	r0, r4, r0
 8000360:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000362:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 8000364:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000366:	428a      	cmp	r2, r1
 8000368:	d307      	bcc.n	800037a <chCoreAllocFromTop+0x2a>
 800036a:	4294      	cmp	r4, r2
 800036c:	d305      	bcc.n	800037a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	2300      	movs	r3, #0
 8000372:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000376:	bc10      	pop	{r4}
 8000378:	4770      	bx	lr
    return NULL;
 800037a:	2000      	movs	r0, #0
 800037c:	2300      	movs	r3, #0
 800037e:	f383 8811 	msr	BASEPRI, r3
}
 8000382:	bc10      	pop	{r4}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20001c20 	.word	0x20001c20
 800038c:	00000000 	.word	0x00000000

08000390 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <chCoreAllocAlignedI+0x1c>)
 8000392:	4249      	negs	r1, r1
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	1a10      	subs	r0, r2, r0
 8000398:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800039a:	6819      	ldr	r1, [r3, #0]
 800039c:	4288      	cmp	r0, r1
 800039e:	d303      	bcc.n	80003a8 <chCoreAllocAlignedI+0x18>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	d301      	bcc.n	80003a8 <chCoreAllocAlignedI+0x18>
  ch_memcore.topmem = prev;
 80003a4:	6058      	str	r0, [r3, #4]
  return p;
 80003a6:	4770      	bx	lr
    return NULL;
 80003a8:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80003aa:	4770      	bx	lr
 80003ac:	20001c20 	.word	0x20001c20

080003b0 <__port_irq_epilogue>:
 80003b0:	2330      	movs	r3, #48	@ 0x30
 80003b2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80003b6:	4b0d      	ldr	r3, [pc, #52]	@ (80003ec <__port_irq_epilogue+0x3c>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80003be:	d102      	bne.n	80003c6 <__port_irq_epilogue+0x16>
 80003c0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80003c4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80003c6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80003ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 80003ce:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80003d0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80003d2:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80003d6:	4a06      	ldr	r2, [pc, #24]	@ (80003f0 <__port_irq_epilogue+0x40>)
 80003d8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80003da:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80003dc:	6889      	ldr	r1, [r1, #8]
 80003de:	6892      	ldr	r2, [r2, #8]
 80003e0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80003e2:	bf8c      	ite	hi
 80003e4:	4a03      	ldrhi	r2, [pc, #12]	@ (80003f4 <__port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80003e6:	4a04      	ldrls	r2, [pc, #16]	@ (80003f8 <__port_irq_epilogue+0x48>)
 80003e8:	619a      	str	r2, [r3, #24]
 80003ea:	4770      	bx	lr
 80003ec:	e000ed00 	.word	0xe000ed00
 80003f0:	20001c38 	.word	0x20001c38
 80003f4:	08000263 	.word	0x08000263
 80003f8:	08000266 	.word	0x08000266
 80003fc:	00000000 	.word	0x00000000

08000400 <_pal_lld_enablepadevent.constprop.0>:
                ((EXTI->FTSR & padmask) == 0U), "channel already in use");

  /* Index and mask of the SYSCFG CR register to be used.*/
  cridx  = (uint32_t)pad >> 2U;
  croff = ((uint32_t)pad & 3U) * 4U;
  crmask = ~(0xFU << croff);
 8000400:	f04f 0c0f 	mov.w	ip, #15
  padmask = 1U << (uint32_t)pad;
 8000404:	2201      	movs	r2, #1
void _pal_lld_enablepadevent(ioportid_t port,
 8000406:	b430      	push	{r4, r5}
  /* Port index is obtained assuming that GPIO ports are placed at regular
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;

  /* Port selection in SYSCFG.*/
  AFIO->EXTICR[cridx] = (AFIO->EXTICR[cridx] & crmask) | (portidx << croff);
 8000408:	4d0f      	ldr	r5, [pc, #60]	@ (8000448 <_pal_lld_enablepadevent.constprop.0+0x48>)
  croff = ((uint32_t)pad & 3U) * 4U;
 800040a:	f000 0103 	and.w	r1, r0, #3
  AFIO->EXTICR[cridx] = (AFIO->EXTICR[cridx] & crmask) | (portidx << croff);
 800040e:	696c      	ldr	r4, [r5, #20]
  croff = ((uint32_t)pad & 3U) * 4U;
 8000410:	0089      	lsls	r1, r1, #2
  crmask = ~(0xFU << croff);
 8000412:	fa0c fc01 	lsl.w	ip, ip, r1
  AFIO->EXTICR[cridx] = (AFIO->EXTICR[cridx] & crmask) | (portidx << croff);
 8000416:	ea24 040c 	bic.w	r4, r4, ip
 800041a:	fa02 f101 	lsl.w	r1, r2, r1

  /* Programming edge registers.*/
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
    EXTI->RTSR |= padmask;
  else
    EXTI->RTSR &= ~padmask;
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <_pal_lld_enablepadevent.constprop.0+0x4c>)
  AFIO->EXTICR[cridx] = (AFIO->EXTICR[cridx] & crmask) | (portidx << croff);
 8000420:	430c      	orrs	r4, r1
 8000422:	616c      	str	r4, [r5, #20]
    EXTI->RTSR &= ~padmask;
 8000424:	6899      	ldr	r1, [r3, #8]
  padmask = 1U << (uint32_t)pad;
 8000426:	fa02 f000 	lsl.w	r0, r2, r0
    EXTI->RTSR &= ~padmask;
 800042a:	ea21 0100 	bic.w	r1, r1, r0
 800042e:	6099      	str	r1, [r3, #8]
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
    EXTI->FTSR |= padmask;
 8000430:	68da      	ldr	r2, [r3, #12]
    EXTI->FTSR &= ~padmask;

  /* Programming interrupt and event registers.*/
  EXTI->IMR |= padmask;
  EXTI->EMR &= ~padmask;
}
 8000432:	bc30      	pop	{r4, r5}
    EXTI->FTSR |= padmask;
 8000434:	4302      	orrs	r2, r0
 8000436:	60da      	str	r2, [r3, #12]
  EXTI->IMR |= padmask;
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4302      	orrs	r2, r0
 800043c:	601a      	str	r2, [r3, #0]
  EXTI->EMR &= ~padmask;
 800043e:	685a      	ldr	r2, [r3, #4]
 8000440:	ea22 0200 	bic.w	r2, r2, r0
 8000444:	605a      	str	r2, [r3, #4]
}
 8000446:	4770      	bx	lr
 8000448:	40010000 	.word	0x40010000
 800044c:	40010400 	.word	0x40010400

08000450 <__sch_wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000450:	2330      	movs	r3, #48	@ 0x30
 8000452:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000456:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
 800045a:	2b0c      	cmp	r3, #12
 800045c:	d810      	bhi.n	8000480 <__sch_wakeup+0x30>
 800045e:	e8df f003 	tbb	[pc, r3]
 8000462:	0f2a      	.short	0x0f2a
 8000464:	070b260f 	.word	0x070b260f
 8000468:	0f0f0b0f 	.word	0x0f0f0b0f
 800046c:	0f0f      	.short	0x0f0f
 800046e:	0b          	.byte	0x0b
 800046f:	00          	.byte	0x00
    chSemFastSignalI(tp->u.wtsemp);
 8000470:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000472:	6893      	ldr	r3, [r2, #8]
 8000474:	3301      	adds	r3, #1
 8000476:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8000478:	e9d1 3200 	ldrd	r3, r2, [r1]
 800047c:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800047e:	605a      	str	r2, [r3, #4]
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8000480:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8000482:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000484:	f04f 34ff 	mov.w	r4, #4294967295
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000488:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 800048a:	6888      	ldr	r0, [r1, #8]
  tp->u.rdymsg = MSG_TIMEOUT;
 800048c:	628c      	str	r4, [r1, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 800048e:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
    pqp = pqp->next;
 8000492:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000494:	689a      	ldr	r2, [r3, #8]
 8000496:	4282      	cmp	r2, r0
 8000498:	d2fb      	bcs.n	8000492 <__sch_wakeup+0x42>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	2000      	movs	r0, #0
 800049e:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80004a2:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80004a4:	6059      	str	r1, [r3, #4]
 80004a6:	f380 8811 	msr	BASEPRI, r0
}
 80004aa:	bc10      	pop	{r4}
 80004ac:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80004ae:	2200      	movs	r2, #0
 80004b0:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80004b2:	601a      	str	r2, [r3, #0]
    break;
 80004b4:	e7e4      	b.n	8000480 <__sch_wakeup+0x30>
 80004b6:	2300      	movs	r3, #0
 80004b8:	f383 8811 	msr	BASEPRI, r3
    return;
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <resumeTimer>:
        }
    }
}

static void resumeTimer(Timers vt) {
    if(vt == MOTOR_TIMER) {
 80004c0:	3802      	subs	r0, #2
static void resumeTimer(Timers vt) {
 80004c2:	b4f0      	push	{r4, r5, r6, r7}
 80004c4:	2803      	cmp	r0, #3
 80004c6:	f200 80c5 	bhi.w	8000654 <resumeTimer+0x194>
 80004ca:	e8df f000 	tbb	[pc, r0]
 80004ce:	4409      	.short	0x4409
 80004d0:	026d      	.short	0x026d
            chVTSet(&vt_rinse, remainingTime_rinse, rinseTimerCallback, NULL);
            vt_rinse_paused = 0;
        }
    }
    else if(vt == CENTRIFUGE_TIMER) {
        if(vt_centrifuge_paused) {
 80004d2:	4d7e      	ldr	r5, [pc, #504]	@ (80006cc <resumeTimer+0x20c>)
 80004d4:	782b      	ldrb	r3, [r5, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	f040 808f 	bne.w	80005fa <resumeTimer+0x13a>
            chVTSet(&vt_centrifuge, remainingTime_centrifuge, centrifugeTimerCallback, NULL);
            vt_centrifuge_paused = 0;
        }
    }
}
 80004dc:	bcf0      	pop	{r4, r5, r6, r7}
 80004de:	4770      	bx	lr
        if(vt_soak_paused){
 80004e0:	4d7b      	ldr	r5, [pc, #492]	@ (80006d0 <resumeTimer+0x210>)
 80004e2:	782b      	ldrb	r3, [r5, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <resumeTimer+0x1c>
            chVTSet(&vt_soak, remainingTime_soak, soakTimerCallback, NULL);
 80004e8:	4a7a      	ldr	r2, [pc, #488]	@ (80006d4 <resumeTimer+0x214>)
 80004ea:	2330      	movs	r3, #48	@ 0x30
 80004ec:	6812      	ldr	r2, [r2, #0]
 80004ee:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 80004f2:	4c79      	ldr	r4, [pc, #484]	@ (80006d8 <resumeTimer+0x218>)
 80004f4:	6823      	ldr	r3, [r4, #0]
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	f000 80a4 	beq.w	8000644 <resumeTimer+0x184>
  /* The delta of the timer is added to the next timer.*/
  vtp->dlist.next->delta += vtp->dlist.delta;

 /* Removing the element from the delta list, marking it as not armed.*/
  (void) ch_dlist_dequeue(&vtp->dlist);
  vtp->dlist.next = NULL;
 80004fc:	2600      	movs	r6, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  vtlp->dlist.delta = (sysinterval_t)-1;
 80004fe:	f04f 37ff 	mov.w	r7, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000502:	68a0      	ldr	r0, [r4, #8]
 8000504:	6899      	ldr	r1, [r3, #8]
 8000506:	4401      	add	r1, r0
 8000508:	6099      	str	r1, [r3, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 800050a:	4874      	ldr	r0, [pc, #464]	@ (80006dc <resumeTimer+0x21c>)
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 800050c:	6861      	ldr	r1, [r4, #4]
 800050e:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8000510:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8000512:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000514:	6187      	str	r7, [r0, #24]
  vtp->par     = par;
 8000516:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 8000518:	4971      	ldr	r1, [pc, #452]	@ (80006e0 <resumeTimer+0x220>)
  dlp = dlhp->next;
 800051a:	6903      	ldr	r3, [r0, #16]
 800051c:	60e1      	str	r1, [r4, #12]
  while (likely(dlp->delta < delta)) {
 800051e:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000520:	e9c4 6604 	strd	r6, r6, [r4, #16]
 8000524:	428a      	cmp	r2, r1
 8000526:	d904      	bls.n	8000532 <resumeTimer+0x72>
    dlp = dlp->next;
 8000528:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800052a:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 800052c:	6899      	ldr	r1, [r3, #8]
 800052e:	4291      	cmp	r1, r2
 8000530:	d3fa      	bcc.n	8000528 <resumeTimer+0x68>
  dlhp->delta = (sysinterval_t)-1;
 8000532:	f04f 36ff 	mov.w	r6, #4294967295
  dlp->delta      = delta;
 8000536:	60a2      	str	r2, [r4, #8]
  dlp->delta -= delta;
 8000538:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 800053a:	6023      	str	r3, [r4, #0]
  dlp->delta -= delta;
 800053c:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 800053e:	685a      	ldr	r2, [r3, #4]
 8000540:	6062      	str	r2, [r4, #4]
  dlp->prev->next = dlp;
 8000542:	6014      	str	r4, [r2, #0]
  dlp->delta -= delta;
 8000544:	e9c3 4101 	strd	r4, r1, [r3, #4]
 8000548:	2300      	movs	r3, #0
  dlhp->delta = (sysinterval_t)-1;
 800054a:	6186      	str	r6, [r0, #24]
 800054c:	f383 8811 	msr	BASEPRI, r3
            vt_centrifuge_paused = 0;
 8000550:	702b      	strb	r3, [r5, #0]
}
 8000552:	bcf0      	pop	{r4, r5, r6, r7}
 8000554:	4770      	bx	lr
        if(vt_wash_paused) {
 8000556:	4d63      	ldr	r5, [pc, #396]	@ (80006e4 <resumeTimer+0x224>)
 8000558:	782b      	ldrb	r3, [r5, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0be      	beq.n	80004dc <resumeTimer+0x1c>
            chVTSet(&vt_wash, remainingTime_wash, washTimerCallback, NULL);
 800055e:	4a62      	ldr	r2, [pc, #392]	@ (80006e8 <resumeTimer+0x228>)
 8000560:	2330      	movs	r3, #48	@ 0x30
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000568:	4c60      	ldr	r4, [pc, #384]	@ (80006ec <resumeTimer+0x22c>)
 800056a:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 800056c:	2b00      	cmp	r3, #0
 800056e:	d06d      	beq.n	800064c <resumeTimer+0x18c>
  vtp->dlist.next = NULL;
 8000570:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000572:	f04f 37ff 	mov.w	r7, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000576:	68a0      	ldr	r0, [r4, #8]
 8000578:	6899      	ldr	r1, [r3, #8]
 800057a:	4401      	add	r1, r0
 800057c:	6099      	str	r1, [r3, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 800057e:	4857      	ldr	r0, [pc, #348]	@ (80006dc <resumeTimer+0x21c>)
  dlp->prev->next = dlp->next;
 8000580:	6861      	ldr	r1, [r4, #4]
 8000582:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8000584:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8000586:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000588:	6187      	str	r7, [r0, #24]
  vtp->par     = par;
 800058a:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 800058c:	4958      	ldr	r1, [pc, #352]	@ (80006f0 <resumeTimer+0x230>)
  dlp = dlhp->next;
 800058e:	6903      	ldr	r3, [r0, #16]
 8000590:	60e1      	str	r1, [r4, #12]
  while (likely(dlp->delta < delta)) {
 8000592:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8000594:	e9c4 6604 	strd	r6, r6, [r4, #16]
 8000598:	428a      	cmp	r2, r1
 800059a:	d9ca      	bls.n	8000532 <resumeTimer+0x72>
    dlp = dlp->next;
 800059c:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800059e:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80005a0:	6899      	ldr	r1, [r3, #8]
 80005a2:	4291      	cmp	r1, r2
 80005a4:	d3fa      	bcc.n	800059c <resumeTimer+0xdc>
 80005a6:	e7c4      	b.n	8000532 <resumeTimer+0x72>
        if(vt_rinse_paused) {
 80005a8:	4d52      	ldr	r5, [pc, #328]	@ (80006f4 <resumeTimer+0x234>)
 80005aa:	782b      	ldrb	r3, [r5, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d095      	beq.n	80004dc <resumeTimer+0x1c>
            chVTSet(&vt_rinse, remainingTime_rinse, rinseTimerCallback, NULL);
 80005b0:	4a51      	ldr	r2, [pc, #324]	@ (80006f8 <resumeTimer+0x238>)
 80005b2:	2330      	movs	r3, #48	@ 0x30
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80005ba:	4c50      	ldr	r4, [pc, #320]	@ (80006fc <resumeTimer+0x23c>)
 80005bc:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d042      	beq.n	8000648 <resumeTimer+0x188>
  vtp->dlist.next = NULL;
 80005c2:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 80005c4:	f04f 37ff 	mov.w	r7, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 80005c8:	68a0      	ldr	r0, [r4, #8]
 80005ca:	6899      	ldr	r1, [r3, #8]
 80005cc:	4401      	add	r1, r0
 80005ce:	6099      	str	r1, [r3, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80005d0:	4842      	ldr	r0, [pc, #264]	@ (80006dc <resumeTimer+0x21c>)
  dlp->prev->next = dlp->next;
 80005d2:	6861      	ldr	r1, [r4, #4]
 80005d4:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 80005d6:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 80005d8:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80005da:	6187      	str	r7, [r0, #24]
  vtp->par     = par;
 80005dc:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 80005de:	4948      	ldr	r1, [pc, #288]	@ (8000700 <resumeTimer+0x240>)
  dlp = dlhp->next;
 80005e0:	6903      	ldr	r3, [r0, #16]
 80005e2:	60e1      	str	r1, [r4, #12]
  while (likely(dlp->delta < delta)) {
 80005e4:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80005e6:	e9c4 6604 	strd	r6, r6, [r4, #16]
 80005ea:	428a      	cmp	r2, r1
 80005ec:	d9a1      	bls.n	8000532 <resumeTimer+0x72>
    dlp = dlp->next;
 80005ee:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80005f0:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80005f2:	6899      	ldr	r1, [r3, #8]
 80005f4:	4291      	cmp	r1, r2
 80005f6:	d3fa      	bcc.n	80005ee <resumeTimer+0x12e>
 80005f8:	e79b      	b.n	8000532 <resumeTimer+0x72>
            chVTSet(&vt_centrifuge, remainingTime_centrifuge, centrifugeTimerCallback, NULL);
 80005fa:	4a42      	ldr	r2, [pc, #264]	@ (8000704 <resumeTimer+0x244>)
 80005fc:	2330      	movs	r3, #48	@ 0x30
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000604:	4c40      	ldr	r4, [pc, #256]	@ (8000708 <resumeTimer+0x248>)
 8000606:	6823      	ldr	r3, [r4, #0]
  if (chVTIsArmedI(vtp)) {
 8000608:	b313      	cbz	r3, 8000650 <resumeTimer+0x190>
  vtp->dlist.next = NULL;
 800060a:	2600      	movs	r6, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 800060c:	f04f 37ff 	mov.w	r7, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000610:	68a0      	ldr	r0, [r4, #8]
 8000612:	6899      	ldr	r1, [r3, #8]
 8000614:	4401      	add	r1, r0
 8000616:	6099      	str	r1, [r3, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000618:	4830      	ldr	r0, [pc, #192]	@ (80006dc <resumeTimer+0x21c>)
  dlp->prev->next = dlp->next;
 800061a:	6861      	ldr	r1, [r4, #4]
 800061c:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 800061e:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8000620:	6026      	str	r6, [r4, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000622:	6187      	str	r7, [r0, #24]
  vtp->par     = par;
 8000624:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 8000626:	4939      	ldr	r1, [pc, #228]	@ (800070c <resumeTimer+0x24c>)
  dlp = dlhp->next;
 8000628:	6903      	ldr	r3, [r0, #16]
 800062a:	60e1      	str	r1, [r4, #12]
  while (likely(dlp->delta < delta)) {
 800062c:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 800062e:	e9c4 6604 	strd	r6, r6, [r4, #16]
 8000632:	428a      	cmp	r2, r1
 8000634:	f67f af7d 	bls.w	8000532 <resumeTimer+0x72>
    dlp = dlp->next;
 8000638:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800063a:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 800063c:	6899      	ldr	r1, [r3, #8]
 800063e:	4291      	cmp	r1, r2
 8000640:	d3fa      	bcc.n	8000638 <resumeTimer+0x178>
 8000642:	e776      	b.n	8000532 <resumeTimer+0x72>
 8000644:	4825      	ldr	r0, [pc, #148]	@ (80006dc <resumeTimer+0x21c>)
 8000646:	e766      	b.n	8000516 <resumeTimer+0x56>
 8000648:	4824      	ldr	r0, [pc, #144]	@ (80006dc <resumeTimer+0x21c>)
 800064a:	e7c7      	b.n	80005dc <resumeTimer+0x11c>
 800064c:	4823      	ldr	r0, [pc, #140]	@ (80006dc <resumeTimer+0x21c>)
 800064e:	e79c      	b.n	800058a <resumeTimer+0xca>
 8000650:	4822      	ldr	r0, [pc, #136]	@ (80006dc <resumeTimer+0x21c>)
 8000652:	e7e7      	b.n	8000624 <resumeTimer+0x164>
        if(vt_motor_paused) {
 8000654:	4d2e      	ldr	r5, [pc, #184]	@ (8000710 <resumeTimer+0x250>)
 8000656:	782b      	ldrb	r3, [r5, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	f43f af3f 	beq.w	80004dc <resumeTimer+0x1c>
            chVTSet(&vt_motor, remainingTime_motor, motorTimerCallback, NULL);
 800065e:	4a2d      	ldr	r2, [pc, #180]	@ (8000714 <resumeTimer+0x254>)
 8000660:	2330      	movs	r3, #48	@ 0x30
 8000662:	6811      	ldr	r1, [r2, #0]
 8000664:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8000668:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <resumeTimer+0x258>)
 800066a:	681a      	ldr	r2, [r3, #0]
  if (chVTIsArmedI(vtp)) {
 800066c:	2a00      	cmp	r2, #0
 800066e:	d02b      	beq.n	80006c8 <resumeTimer+0x208>
  vtp->dlist.next = NULL;
 8000670:	2400      	movs	r4, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000672:	f04f 36ff 	mov.w	r6, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8000676:	6890      	ldr	r0, [r2, #8]
 8000678:	689f      	ldr	r7, [r3, #8]
 800067a:	4438      	add	r0, r7
 800067c:	6090      	str	r0, [r2, #8]
  dlp->prev->next = dlp->next;
 800067e:	6858      	ldr	r0, [r3, #4]
 8000680:	6002      	str	r2, [r0, #0]
  dlp->next->prev = dlp->prev;
 8000682:	6050      	str	r0, [r2, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000684:	4815      	ldr	r0, [pc, #84]	@ (80006dc <resumeTimer+0x21c>)
  vtp->dlist.next = NULL;
 8000686:	601c      	str	r4, [r3, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8000688:	6186      	str	r6, [r0, #24]
  vtp->par     = par;
 800068a:	2600      	movs	r6, #0
  vtp->func    = vtfunc;
 800068c:	4c23      	ldr	r4, [pc, #140]	@ (800071c <resumeTimer+0x25c>)
  dlp = dlhp->next;
 800068e:	6902      	ldr	r2, [r0, #16]
 8000690:	60dc      	str	r4, [r3, #12]
  while (likely(dlp->delta < delta)) {
 8000692:	6894      	ldr	r4, [r2, #8]
  vtp->reload  = (sysinterval_t)0;
 8000694:	e9c3 6604 	strd	r6, r6, [r3, #16]
 8000698:	42a1      	cmp	r1, r4
 800069a:	d904      	bls.n	80006a6 <resumeTimer+0x1e6>
    dlp = dlp->next;
 800069c:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 800069e:	1b09      	subs	r1, r1, r4
  while (likely(dlp->delta < delta)) {
 80006a0:	6894      	ldr	r4, [r2, #8]
 80006a2:	428c      	cmp	r4, r1
 80006a4:	d3fa      	bcc.n	800069c <resumeTimer+0x1dc>
  dlhp->delta = (sysinterval_t)-1;
 80006a6:	f04f 36ff 	mov.w	r6, #4294967295
  dlp->delta      = delta;
 80006aa:	6099      	str	r1, [r3, #8]
  dlp->delta -= delta;
 80006ac:	6894      	ldr	r4, [r2, #8]
  dlp->next       = dlhp;
 80006ae:	601a      	str	r2, [r3, #0]
  dlp->delta -= delta;
 80006b0:	1a64      	subs	r4, r4, r1
  dlp->prev       = dlp->next->prev;
 80006b2:	6851      	ldr	r1, [r2, #4]
 80006b4:	6059      	str	r1, [r3, #4]
  dlp->prev->next = dlp;
 80006b6:	600b      	str	r3, [r1, #0]
  dlp->delta -= delta;
 80006b8:	e9c2 3401 	strd	r3, r4, [r2, #4]
 80006bc:	2300      	movs	r3, #0
  dlhp->delta = (sysinterval_t)-1;
 80006be:	6186      	str	r6, [r0, #24]
 80006c0:	f383 8811 	msr	BASEPRI, r3
            vt_motor_paused = 0;
 80006c4:	702b      	strb	r3, [r5, #0]
 80006c6:	e709      	b.n	80004dc <resumeTimer+0x1c>
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <resumeTimer+0x21c>)
 80006ca:	e7de      	b.n	800068a <resumeTimer+0x1ca>
 80006cc:	20001b98 	.word	0x20001b98
 80006d0:	20001bf8 	.word	0x20001bf8
 80006d4:	20001bf4 	.word	0x20001bf4
 80006d8:	20001bdc 	.word	0x20001bdc
 80006dc:	20001c38 	.word	0x20001c38
 80006e0:	080007c1 	.word	0x080007c1
 80006e4:	20001bd8 	.word	0x20001bd8
 80006e8:	20001bd4 	.word	0x20001bd4
 80006ec:	20001bbc 	.word	0x20001bbc
 80006f0:	080007e1 	.word	0x080007e1
 80006f4:	20001bb8 	.word	0x20001bb8
 80006f8:	20001bb4 	.word	0x20001bb4
 80006fc:	20001b9c 	.word	0x20001b9c
 8000700:	08000801 	.word	0x08000801
 8000704:	20001b94 	.word	0x20001b94
 8000708:	20001b7c 	.word	0x20001b7c
 800070c:	08000821 	.word	0x08000821
 8000710:	20001c18 	.word	0x20001c18
 8000714:	20001c14 	.word	0x20001c14
 8000718:	20001bfc 	.word	0x20001bfc
 800071c:	080007a1 	.word	0x080007a1

08000720 <chEvtBroadcastFlagsI.constprop.0>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000720:	b4f0      	push	{r4, r5, r6, r7}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000722:	4c1b      	ldr	r4, [pc, #108]	@ (8000790 <chEvtBroadcastFlagsI.constprop.0+0x70>)
 8000724:	6823      	ldr	r3, [r4, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000726:	42a3      	cmp	r3, r4
 8000728:	d02b      	beq.n	8000782 <chEvtBroadcastFlagsI.constprop.0+0x62>
    tp->u.rdymsg = MSG_OK;
 800072a:	2500      	movs	r5, #0
 800072c:	e005      	b.n	800073a <chEvtBroadcastFlagsI.constprop.0+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800072e:	f1bc 0f0b 	cmp.w	ip, #11
 8000732:	d028      	beq.n	8000786 <chEvtBroadcastFlagsI.constprop.0+0x66>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8000734:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000736:	42a3      	cmp	r3, r4
 8000738:	d023      	beq.n	8000782 <chEvtBroadcastFlagsI.constprop.0+0x62>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 800073a:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
    elp->flags |= flags;
 800073e:	4302      	orrs	r2, r0
    if ((flags == (eventflags_t)0) ||
 8000740:	4208      	tst	r0, r1
    elp->flags |= flags;
 8000742:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 8000744:	d0f6      	beq.n	8000734 <chEvtBroadcastFlagsI.constprop.0+0x14>
  tp->epending |= events;
 8000746:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800074a:	6b96      	ldr	r6, [r2, #56]	@ 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 800074c:	f892 c024 	ldrb.w	ip, [r2, #36]	@ 0x24
  tp->epending |= events;
 8000750:	4331      	orrs	r1, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000752:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 8000756:	6391      	str	r1, [r2, #56]	@ 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000758:	d1e9      	bne.n	800072e <chEvtBroadcastFlagsI.constprop.0+0xe>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800075a:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((tp->state == CH_STATE_WTOREVT) &&
 800075c:	4231      	tst	r1, r6
 800075e:	d0e9      	beq.n	8000734 <chEvtBroadcastFlagsI.constprop.0+0x14>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000760:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000762:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8000764:	6295      	str	r5, [r2, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000766:	f882 5024 	strb.w	r5, [r2, #36]	@ 0x24
    pqp = pqp->next;
 800076a:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800076c:	688e      	ldr	r6, [r1, #8]
 800076e:	42be      	cmp	r6, r7
 8000770:	d2fb      	bcs.n	800076a <chEvtBroadcastFlagsI.constprop.0+0x4a>
    elp = elp->next;
 8000772:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8000774:	684e      	ldr	r6, [r1, #4]
  while (elp != (event_listener_t *)esp) {
 8000776:	42a3      	cmp	r3, r4
 8000778:	e9c2 1600 	strd	r1, r6, [r2]
  p->prev->next = p;
 800077c:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 800077e:	604a      	str	r2, [r1, #4]
 8000780:	d1db      	bne.n	800073a <chEvtBroadcastFlagsI.constprop.0+0x1a>
  }
}
 8000782:	bcf0      	pop	{r4, r5, r6, r7}
 8000784:	4770      	bx	lr
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000786:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 8000788:	ea36 0101 	bics.w	r1, r6, r1
 800078c:	d1d2      	bne.n	8000734 <chEvtBroadcastFlagsI.constprop.0+0x14>
 800078e:	e7e7      	b.n	8000760 <chEvtBroadcastFlagsI.constprop.0+0x40>
 8000790:	20001c1c 	.word	0x20001c1c
	...

080007a0 <motorTimerCallback>:
static void motorTimerCallback(void) {
 80007a0:	b508      	push	{r3, lr}
 80007a2:	2330      	movs	r3, #48	@ 0x30
 80007a4:	f383 8811 	msr	BASEPRI, r3
    chEvtBroadcastFlagsI(&evt_src, TIMEOUT_MOTOR_EVENT);
 80007a8:	2020      	movs	r0, #32
 80007aa:	f7ff ffb9 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
 80007ae:	2300      	movs	r3, #0
 80007b0:	f383 8811 	msr	BASEPRI, r3
}
 80007b4:	bd08      	pop	{r3, pc}
 80007b6:	bf00      	nop
	...

080007c0 <soakTimerCallback>:
static void soakTimerCallback(void) {
 80007c0:	b508      	push	{r3, lr}
 80007c2:	2330      	movs	r3, #48	@ 0x30
 80007c4:	f383 8811 	msr	BASEPRI, r3
    chEvtBroadcastFlagsI(&evt_src, TIMEOUT_SOAK_EVENT);
 80007c8:	2040      	movs	r0, #64	@ 0x40
 80007ca:	f7ff ffa9 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
 80007ce:	2300      	movs	r3, #0
 80007d0:	f383 8811 	msr	BASEPRI, r3
}
 80007d4:	bd08      	pop	{r3, pc}
 80007d6:	bf00      	nop
	...

080007e0 <washTimerCallback>:
static void washTimerCallback(void) {
 80007e0:	b508      	push	{r3, lr}
 80007e2:	2330      	movs	r3, #48	@ 0x30
 80007e4:	f383 8811 	msr	BASEPRI, r3
    chEvtBroadcastFlagsI(&evt_src, TIMEOUT_WASH_EVENT);
 80007e8:	2080      	movs	r0, #128	@ 0x80
 80007ea:	f7ff ff99 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
 80007ee:	2300      	movs	r3, #0
 80007f0:	f383 8811 	msr	BASEPRI, r3
}
 80007f4:	bd08      	pop	{r3, pc}
 80007f6:	bf00      	nop
	...

08000800 <rinseTimerCallback>:
static void rinseTimerCallback(void) {
 8000800:	b508      	push	{r3, lr}
 8000802:	2330      	movs	r3, #48	@ 0x30
 8000804:	f383 8811 	msr	BASEPRI, r3
    chEvtBroadcastFlagsI(&evt_src, TIMEOUT_RINSE_EVENT);
 8000808:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800080c:	f7ff ff88 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
 8000810:	2300      	movs	r3, #0
 8000812:	f383 8811 	msr	BASEPRI, r3
}
 8000816:	bd08      	pop	{r3, pc}
	...

08000820 <centrifugeTimerCallback>:
static void centrifugeTimerCallback(void) {
 8000820:	b508      	push	{r3, lr}
 8000822:	2330      	movs	r3, #48	@ 0x30
 8000824:	f383 8811 	msr	BASEPRI, r3
    chEvtBroadcastFlagsI(&evt_src, TIMEOUT_CENTRIFUGE_EVENT);
 8000828:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800082c:	f7ff ff78 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
 8000830:	2300      	movs	r3, #0
 8000832:	f383 8811 	msr	BASEPRI, r3
}
 8000836:	bd08      	pop	{r3, pc}
	...

08000840 <startButtonCallback>:
static void startButtonCallback(void) {
 8000840:	b508      	push	{r3, lr}
 8000842:	2330      	movs	r3, #48	@ 0x30
 8000844:	f383 8811 	msr	BASEPRI, r3
    chEvtBroadcastFlagsI(&evt_src, START_EVENT);
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff ff69 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
 800084e:	2300      	movs	r3, #0
 8000850:	f383 8811 	msr	BASEPRI, r3
}
 8000854:	bd08      	pop	{r3, pc}
 8000856:	bf00      	nop
	...

08000860 <highWatermarkButtonCallback>:
static void highWatermarkButtonCallback(void) {
 8000860:	b508      	push	{r3, lr}
 8000862:	2330      	movs	r3, #48	@ 0x30
 8000864:	f383 8811 	msr	BASEPRI, r3
    chEvtBroadcastFlagsI(&evt_src, HIGH_WATERMARK_EVENT);
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff ff59 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
 800086e:	2300      	movs	r3, #0
 8000870:	f383 8811 	msr	BASEPRI, r3
}
 8000874:	bd08      	pop	{r3, pc}
 8000876:	bf00      	nop
	...

08000880 <lowWatermarkButtonCallback>:
static void lowWatermarkButtonCallback(void) {
 8000880:	b508      	push	{r3, lr}
 8000882:	2330      	movs	r3, #48	@ 0x30
 8000884:	f383 8811 	msr	BASEPRI, r3
    chEvtBroadcastFlagsI(&evt_src, LOW_WATERMARK_EVENT);
 8000888:	2004      	movs	r0, #4
 800088a:	f7ff ff49 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
 800088e:	2300      	movs	r3, #0
 8000890:	f383 8811 	msr	BASEPRI, r3
}
 8000894:	bd08      	pop	{r3, pc}
 8000896:	bf00      	nop
	...

080008a0 <openLidButtonCallback>:
 80008a0:	2330      	movs	r3, #48	@ 0x30
static void openLidButtonCallback(void) {
 80008a2:	b510      	push	{r4, lr}
 80008a4:	f383 8811 	msr	BASEPRI, r3
    if(is_lid_open) {
 80008a8:	4c0a      	ldr	r4, [pc, #40]	@ (80008d4 <openLidButtonCallback+0x34>)
 80008aa:	7823      	ldrb	r3, [r4, #0]
 80008ac:	b143      	cbz	r3, 80008c0 <openLidButtonCallback+0x20>
        chEvtBroadcastFlagsI(&evt_src, LID_CLOSE_EVENT);
 80008ae:	2010      	movs	r0, #16
 80008b0:	f7ff ff36 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
        is_lid_open = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	7023      	strb	r3, [r4, #0]
 80008b8:	2300      	movs	r3, #0
 80008ba:	f383 8811 	msr	BASEPRI, r3
}
 80008be:	bd10      	pop	{r4, pc}
        chEvtBroadcastFlagsI(&evt_src, LID_OPEN_EVENT);
 80008c0:	2008      	movs	r0, #8
 80008c2:	f7ff ff2d 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
        is_lid_open = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	7023      	strb	r3, [r4, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	f383 8811 	msr	BASEPRI, r3
}
 80008d0:	bd10      	pop	{r4, pc}
 80008d2:	bf00      	nop
 80008d4:	20001c19 	.word	0x20001c19
	...

080008e0 <stateMachine>:
    }
}
static THD_WORKING_AREA(wa_eventHandle, 2048);

/* Recebe como parametro os estados da FSM e os processa */
static THD_FUNCTION(stateMachine, arg) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	2330      	movs	r3, #48	@ 0x30
 80008e4:	b086      	sub	sp, #24
 80008e6:	f383 8811 	msr	BASEPRI, r3
  elp->events   = events;
 80008ea:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80008ee:	2100      	movs	r1, #0
  elp->wflags   = wflags;
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
  elp->next     = esp->next;
 80008f4:	4b3c      	ldr	r3, [pc, #240]	@ (80009e8 <stateMachine+0x108>)
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 80008f6:	4d3d      	ldr	r5, [pc, #244]	@ (80009ec <stateMachine+0x10c>)
  elp->events   = events;
 80008f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  elp->next     = esp->next;
 80008fc:	6819      	ldr	r1, [r3, #0]
  esp->next     = elp;
 80008fe:	f8c3 d000 	str.w	sp, [r3]
 8000902:	68eb      	ldr	r3, [r5, #12]
  elp->wflags   = wflags;
 8000904:	9204      	str	r2, [sp, #16]
  elp->next     = esp->next;
 8000906:	9100      	str	r1, [sp, #0]
 8000908:	2200      	movs	r2, #0
  elp->listener = currtp;
 800090a:	9301      	str	r3, [sp, #4]
 800090c:	f382 8811 	msr	BASEPRI, r2
 8000910:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 80009f0 <stateMachine+0x110>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0091);
                break;

            case OPEN_LID:
                /* desliga todas as saídas, menos o led de funcionamento */
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 8000914:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 80009f4 <stateMachine+0x114>
 8000918:	4e37      	ldr	r6, [pc, #220]	@ (80009f8 <stateMachine+0x118>)
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0091);
 800091a:	4f38      	ldr	r7, [pc, #224]	@ (80009fc <stateMachine+0x11c>)
 800091c:	2330      	movs	r3, #48	@ 0x30
 800091e:	68ec      	ldr	r4, [r5, #12]
 8000920:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
 8000924:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  if (m == (eventmask_t)0) {
 8000926:	055a      	lsls	r2, r3, #21
 8000928:	d541      	bpl.n	80009ae <stateMachine+0xce>
 800092a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
    currtp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = currtp->epending & events;
  }
  currtp->epending &= ~m;
 800092e:	4013      	ands	r3, r2
 8000930:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000932:	2200      	movs	r2, #0
 8000934:	f382 8811 	msr	BASEPRI, r2
        switch(current_state) {
 8000938:	f898 3000 	ldrb.w	r3, [r8]
 800093c:	2b0c      	cmp	r3, #12
 800093e:	d84d      	bhi.n	80009dc <stateMachine+0xfc>
 8000940:	e8df f003 	tbb	[pc, r3]
 8000944:	292d3107 	.word	0x292d3107
 8000948:	191d2125 	.word	0x191d2125
 800094c:	0a0d1115 	.word	0x0a0d1115
 8000950:	07          	.byte	0x07
 8000951:	00          	.byte	0x00
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0001);
 8000952:	f8c9 6010 	str.w	r6, [r9, #16]
                break;
 8000956:	e7e1      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0091);
 8000958:	f8c9 7010 	str.w	r7, [r9, #16]
                break;
 800095c:	e7de      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0049);
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <stateMachine+0x120>)
 8000960:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 8000964:	e7da      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0109);
 8000966:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <stateMachine+0x124>)
 8000968:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 800096c:	e7d6      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0089);
 800096e:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <stateMachine+0x128>)
 8000970:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 8000974:	e7d2      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0029);
 8000976:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <stateMachine+0x12c>)
 8000978:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 800097c:	e7ce      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0045);
 800097e:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <stateMachine+0x130>)
 8000980:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 8000984:	e7ca      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0105);
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <stateMachine+0x134>)
 8000988:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 800098c:	e7c6      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0085);
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <stateMachine+0x138>)
 8000990:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 8000994:	e7c2      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0103);
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <stateMachine+0x13c>)
 8000998:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 800099c:	e7be      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0083);
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <stateMachine+0x140>)
 80009a0:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 80009a4:	e7ba      	b.n	800091c <stateMachine+0x3c>
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0023);
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <stateMachine+0x144>)
 80009a8:	f8c9 3010 	str.w	r3, [r9, #16]
                break;
 80009ac:	e7b6      	b.n	800091c <stateMachine+0x3c>
    currtp->u.ewmask = events;
 80009ae:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  otp->state = newstate;
 80009b2:	230a      	movs	r3, #10
  ntp->state = CH_STATE_CURRENT;
 80009b4:	2201      	movs	r2, #1
  thread_t *otp = __instance_get_currthread(oip);
 80009b6:	68e9      	ldr	r1, [r5, #12]
  ch_priority_queue_t *p = pqp->next;
 80009b8:	6828      	ldr	r0, [r5, #0]
 80009ba:	f8c4 c028 	str.w	ip, [r4, #40]	@ 0x28
  otp->state = newstate;
 80009be:	f881 3024 	strb.w	r3, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 80009c2:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80009c4:	605d      	str	r5, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80009c6:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  pqp->next       = p->next;
 80009ca:	602b      	str	r3, [r5, #0]
  __instance_set_currthread(oip, ntp);
 80009cc:	60e8      	str	r0, [r5, #12]
  chSysSwitch(ntp, otp);
 80009ce:	f7ff fc37 	bl	8000240 <__port_switch>
    m = currtp->epending & events;
 80009d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80009d4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
  currtp->epending &= ~m;
 80009d8:	43d2      	mvns	r2, r2
 80009da:	e7a8      	b.n	800092e <stateMachine+0x4e>

            default:
                /* ERRO: acende todos os leds */
                palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x01FF);
 80009dc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <stateMachine+0x114>)
 80009e2:	611a      	str	r2, [r3, #16]
                break;
 80009e4:	e79a      	b.n	800091c <stateMachine+0x3c>
 80009e6:	bf00      	nop
 80009e8:	20001c1c 	.word	0x20001c1c
 80009ec:	20001c38 	.word	0x20001c38
 80009f0:	20001b79 	.word	0x20001b79
 80009f4:	40010800 	.word	0x40010800
 80009f8:	01fe0001 	.word	0x01fe0001
 80009fc:	016e0091 	.word	0x016e0091
 8000a00:	01b60049 	.word	0x01b60049
 8000a04:	00f60109 	.word	0x00f60109
 8000a08:	01760089 	.word	0x01760089
 8000a0c:	01d60029 	.word	0x01d60029
 8000a10:	01ba0045 	.word	0x01ba0045
 8000a14:	00fa0105 	.word	0x00fa0105
 8000a18:	017a0085 	.word	0x017a0085
 8000a1c:	00fc0103 	.word	0x00fc0103
 8000a20:	017c0083 	.word	0x017c0083
 8000a24:	01dc0023 	.word	0x01dc0023
	...

08000a30 <chThdCreateStatic.constprop.0.isra.0>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	2230      	movs	r2, #48	@ 0x30
 8000a34:	4603      	mov	r3, r0
 8000a36:	f382 8811 	msr	BASEPRI, r2
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000a3a:	f8c3 1884 	str.w	r1, [r3, #2180]	@ 0x884
  tp->flags             = CH_FLAG_MODE_STATIC;
 8000a3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  tp->hdr.pqueue.prio   = prio;
 8000a42:	2581      	movs	r5, #129	@ 0x81
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000a44:	2400      	movs	r4, #0
  tp->owner             = oip;
 8000a46:	4a2f      	ldr	r2, [pc, #188]	@ (8000b04 <chThdCreateStatic.constprop.0.isra.0+0xd4>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000a48:	482f      	ldr	r0, [pc, #188]	@ (8000b08 <chThdCreateStatic.constprop.0.isra.0+0xd8>)
  p->prev       = qp->prev;
 8000a4a:	6ad7      	ldr	r7, [r2, #44]	@ 0x2c
  tp->flags             = CH_FLAG_MODE_STATIC;
 8000a4c:	f8a3 18cd 	strh.w	r1, [r3, #2253]	@ 0x8cd
  tp->name              = name;
 8000a50:	492e      	ldr	r1, [pc, #184]	@ (8000b0c <chThdCreateStatic.constprop.0.isra.0+0xdc>)
  tp->hdr.pqueue.prio   = prio;
 8000a52:	f8c3 58b0 	str.w	r5, [r3, #2224]	@ 0x8b0
  REG_INSERT(oip, tp);
 8000a56:	f603 06b8 	addw	r6, r3, #2232	@ 0x8b8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000a5a:	f8c3 08a4 	str.w	r0, [r3, #2212]	@ 0x8a4
  tp->realprio          = prio;
 8000a5e:	f8c3 58e8 	str.w	r5, [r3, #2280]	@ 0x8e8
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000a62:	f603 0084 	addw	r0, r3, #2180	@ 0x884
  ch_queue_init(&tp->msgqueue);
 8000a66:	f603 05d8 	addw	r5, r3, #2264	@ 0x8d8
  p->next       = qp;
 8000a6a:	f102 0c28 	add.w	ip, r2, #40	@ 0x28
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000a6e:	f8c3 08b4 	str.w	r0, [r3, #2228]	@ 0x8b4
  p->prev       = qp->prev;
 8000a72:	f8c3 78bc 	str.w	r7, [r3, #2236]	@ 0x8bc
  tp->name              = name;
 8000a76:	f8c3 18c4 	str.w	r1, [r3, #2244]	@ 0x8c4
  p->next       = qp;
 8000a7a:	f8c3 c8b8 	str.w	ip, [r3, #2232]	@ 0x8b8
  thread_t *otp = __instance_get_currthread(oip);
 8000a7e:	68d1      	ldr	r1, [r2, #12]
  tp->wabase = (stkalign_t *)wsp;
 8000a80:	f8c3 38c8 	str.w	r3, [r3, #2248]	@ 0x8c8
  tp->owner             = oip;
 8000a84:	f8c3 28c0 	str.w	r2, [r3, #2240]	@ 0x8c0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000a88:	f8c3 4888 	str.w	r4, [r3, #2184]	@ 0x888
  tp->mtxlist           = NULL;
 8000a8c:	f8c3 48e4 	str.w	r4, [r3, #2276]	@ 0x8e4
  tp->epending          = (eventmask_t)0;
 8000a90:	f8c3 48e0 	str.w	r4, [r3, #2272]	@ 0x8e0
  p->prev->next = p;
 8000a94:	603e      	str	r6, [r7, #0]
  qp->next = qp;
 8000a96:	f8c3 58d8 	str.w	r5, [r3, #2264]	@ 0x8d8
  qp->prev = qp;
 8000a9a:	f8c3 58dc 	str.w	r5, [r3, #2268]	@ 0x8dc
  ch_list_init(&tp->waiting);
 8000a9e:	f603 05d4 	addw	r5, r3, #2260	@ 0x8d4
  qp->prev      = p;
 8000aa2:	62d6      	str	r6, [r2, #44]	@ 0x2c
  lp->next = lp;
 8000aa4:	f8c3 58d4 	str.w	r5, [r3, #2260]	@ 0x8d4
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8000aa8:	f8d3 68b0 	ldr.w	r6, [r3, #2224]	@ 0x8b0
 8000aac:	688d      	ldr	r5, [r1, #8]
  tp = threadref(((uint8_t *)wsp + size -
 8000aae:	f603 00a8 	addw	r0, r3, #2216	@ 0x8a8
 8000ab2:	42ae      	cmp	r6, r5
  ntp->u.rdymsg = msg;
 8000ab4:	f8c3 48d0 	str.w	r4, [r3, #2256]	@ 0x8d0
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8000ab8:	d915      	bls.n	8000ae6 <chThdCreateStatic.constprop.0.isra.0+0xb6>
  tp->state = CH_STATE_READY;
 8000aba:	f881 4024 	strb.w	r4, [r1, #36]	@ 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8000abe:	698c      	ldr	r4, [r1, #24]
    pqp = pqp->next;
 8000ac0:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio > p->prio));
 8000ac2:	68a6      	ldr	r6, [r4, #8]
 8000ac4:	42b5      	cmp	r5, r6
 8000ac6:	d3fb      	bcc.n	8000ac0 <chThdCreateStatic.constprop.0.isra.0+0x90>
    ntp->state = CH_STATE_CURRENT;
 8000ac8:	2601      	movs	r6, #1
  p->prev       = pqp->prev;
 8000aca:	6865      	ldr	r5, [r4, #4]
  p->next       = pqp;
 8000acc:	600c      	str	r4, [r1, #0]
  p->prev       = pqp->prev;
 8000ace:	604d      	str	r5, [r1, #4]
  p->prev->next = p;
 8000ad0:	6029      	str	r1, [r5, #0]
  pqp->prev     = p;
 8000ad2:	6061      	str	r1, [r4, #4]
 8000ad4:	f883 68cc 	strb.w	r6, [r3, #2252]	@ 0x8cc
    __instance_set_currthread(oip, ntp);
 8000ad8:	60d0      	str	r0, [r2, #12]
    chSysSwitch(ntp, otp);
 8000ada:	f7ff fbb1 	bl	8000240 <__port_switch>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f383 8811 	msr	BASEPRI, r3
  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
  chSysUnlock();

  return tp;
}
 8000ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->state = CH_STATE_READY;
 8000ae6:	f883 48cc 	strb.w	r4, [r3, #2252]	@ 0x8cc
    pqp = pqp->next;
 8000aea:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000aec:	6891      	ldr	r1, [r2, #8]
 8000aee:	428e      	cmp	r6, r1
 8000af0:	d9fb      	bls.n	8000aea <chThdCreateStatic.constprop.0.isra.0+0xba>
  p->prev       = pqp->prev;
 8000af2:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8000af4:	f8c3 28a8 	str.w	r2, [r3, #2216]	@ 0x8a8
  p->prev       = pqp->prev;
 8000af8:	f8c3 18ac 	str.w	r1, [r3, #2220]	@ 0x8ac
  p->prev->next = p;
 8000afc:	6008      	str	r0, [r1, #0]
  pqp->prev     = p;
 8000afe:	6050      	str	r0, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000b00:	e7ed      	b.n	8000ade <chThdCreateStatic.constprop.0.isra.0+0xae>
 8000b02:	bf00      	nop
 8000b04:	20001c38 	.word	0x20001c38
 8000b08:	08000251 	.word	0x08000251
 8000b0c:	080023c4 	.word	0x080023c4

08000b10 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
	...

08000b20 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
	...

08000b30 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8000b30:	e7fe      	b.n	8000b30 <__default_exit>
 8000b32:	bf00      	nop
	...

08000b40 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4d13      	ldr	r5, [pc, #76]	@ (8000b90 <__init_ram_areas+0x50>)
 8000b44:	f105 0480 	add.w	r4, r5, #128	@ 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000b48:	e955 0103 	ldrd	r0, r1, [r5, #-12]
 8000b4c:	4288      	cmp	r0, r1
    uint32_t *tp = rap->init_text_area;
 8000b4e:	f855 2c10 	ldr.w	r2, [r5, #-16]
    while (p < rap->clear_area) {
 8000b52:	d20d      	bcs.n	8000b70 <__init_ram_areas+0x30>
    uint32_t *p = rap->init_area;
 8000b54:	4603      	mov	r3, r0
 8000b56:	3a04      	subs	r2, #4
      *p = *tp;
 8000b58:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8000b5c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d3f9      	bcc.n	8000b58 <__init_ram_areas+0x18>
 8000b64:	1e4b      	subs	r3, r1, #1
 8000b66:	1a1b      	subs	r3, r3, r0
 8000b68:	f023 0303 	bic.w	r3, r3, #3
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	4418      	add	r0, r3
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000b70:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8000b74:	4282      	cmp	r2, r0
 8000b76:	d907      	bls.n	8000b88 <__init_ram_areas+0x48>
      *p = 0;
 8000b78:	3a01      	subs	r2, #1
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	f022 0203 	bic.w	r2, r2, #3
 8000b80:	2100      	movs	r1, #0
 8000b82:	3204      	adds	r2, #4
 8000b84:	f001 fbce 	bl	8002324 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8000b88:	3510      	adds	r5, #16
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	d1dc      	bne.n	8000b48 <__init_ram_areas+0x8>
#endif
}
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	0800243c 	.word	0x0800243c
	...

08000ba0 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8000ba0:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <Vector58+0x64>)
 8000ba2:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8000ba4:	6813      	ldr	r3, [r2, #0]
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 8000bac:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 8000bae:	b33b      	cbz	r3, 8000c00 <Vector58+0x60>
OSAL_IRQ_HANDLER(Vector58) {
 8000bb0:	b570      	push	{r4, r5, r6, lr}
  exti_serve_irq(pr, 0);
 8000bb2:	4c15      	ldr	r4, [pc, #84]	@ (8000c08 <Vector58+0x68>)
 8000bb4:	68a3      	ldr	r3, [r4, #8]
 8000bb6:	b10b      	cbz	r3, 8000bbc <Vector58+0x1c>
 8000bb8:	68e0      	ldr	r0, [r4, #12]
 8000bba:	4798      	blx	r3
 8000bbc:	2330      	movs	r3, #48	@ 0x30
 8000bbe:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8000bc2:	6821      	ldr	r1, [r4, #0]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (ch_queue_notempty(&tqp->queue)) {
 8000bc4:	42a1      	cmp	r1, r4
 8000bc6:	d014      	beq.n	8000bf2 <Vector58+0x52>

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000bc8:	2600      	movs	r6, #0
 8000bca:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000bcc:	6809      	ldr	r1, [r1, #0]
 8000bce:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000bd0:	689d      	ldr	r5, [r3, #8]
  qp->next->prev = qp;
 8000bd2:	604c      	str	r4, [r1, #4]
  qp->next       = p->next;
 8000bd4:	6021      	str	r1, [r4, #0]
 8000bd6:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000bd8:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000bdc:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000bde:	6890      	ldr	r0, [r2, #8]
 8000be0:	42a8      	cmp	r0, r5
 8000be2:	d2fb      	bcs.n	8000bdc <Vector58+0x3c>
  p->prev       = pqp->prev;
 8000be4:	6850      	ldr	r0, [r2, #4]
 8000be6:	42a1      	cmp	r1, r4
 8000be8:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000bec:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000bee:	6053      	str	r3, [r2, #4]
 8000bf0:	d1eb      	bne.n	8000bca <Vector58+0x2a>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8000bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8000bfc:	f7ff bbd8 	b.w	80003b0 <__port_irq_epilogue>
 8000c00:	f7ff bbd6 	b.w	80003b0 <__port_irq_epilogue>
 8000c04:	40010400 	.word	0x40010400
 8000c08:	20001cc0 	.word	0x20001cc0
 8000c0c:	00000000 	.word	0x00000000

08000c10 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8000c10:	4a18      	ldr	r2, [pc, #96]	@ (8000c74 <Vector5C+0x64>)
OSAL_IRQ_HANDLER(Vector5C) {
 8000c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8000c14:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8000c16:	6813      	ldr	r3, [r2, #0]
 8000c18:	400b      	ands	r3, r1
 8000c1a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 8000c1e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 8000c20:	b31b      	cbz	r3, 8000c6a <Vector5C+0x5a>
 8000c22:	4f15      	ldr	r7, [pc, #84]	@ (8000c78 <Vector5C+0x68>)
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	b10b      	cbz	r3, 8000c2c <Vector5C+0x1c>
 8000c28:	69f8      	ldr	r0, [r7, #28]
 8000c2a:	4798      	blx	r3
 8000c2c:	2330      	movs	r3, #48	@ 0x30
 8000c2e:	f383 8811 	msr	BASEPRI, r3
 8000c32:	4c12      	ldr	r4, [pc, #72]	@ (8000c7c <Vector5C+0x6c>)
  return (bool)(qp->next != qp);
 8000c34:	6939      	ldr	r1, [r7, #16]
 8000c36:	42a1      	cmp	r1, r4
 8000c38:	d014      	beq.n	8000c64 <Vector5C+0x54>
 8000c3a:	2600      	movs	r6, #0
 8000c3c:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000c3e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000c40:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000c42:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8000c44:	6139      	str	r1, [r7, #16]
  qp->next->prev = qp;
 8000c46:	604c      	str	r4, [r1, #4]
 8000c48:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000c4a:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000c4e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000c50:	6890      	ldr	r0, [r2, #8]
 8000c52:	42a8      	cmp	r0, r5
 8000c54:	d2fb      	bcs.n	8000c4e <Vector5C+0x3e>
  p->prev       = pqp->prev;
 8000c56:	6850      	ldr	r0, [r2, #4]
 8000c58:	42a1      	cmp	r1, r4
 8000c5a:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000c5e:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000c60:	6053      	str	r3, [r2, #4]
 8000c62:	d1eb      	bne.n	8000c3c <Vector5C+0x2c>
 8000c64:	2300      	movs	r3, #0
 8000c66:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8000c6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8000c6e:	f7ff bb9f 	b.w	80003b0 <__port_irq_epilogue>
 8000c72:	bf00      	nop
 8000c74:	40010400 	.word	0x40010400
 8000c78:	20001cc0 	.word	0x20001cc0
 8000c7c:	20001cd0 	.word	0x20001cd0

08000c80 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8000c80:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <Vector60+0x64>)
OSAL_IRQ_HANDLER(Vector60) {
 8000c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8000c84:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8000c86:	6813      	ldr	r3, [r2, #0]
 8000c88:	400b      	ands	r3, r1
 8000c8a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8000c8e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 8000c90:	b31b      	cbz	r3, 8000cda <Vector60+0x5a>
 8000c92:	4f15      	ldr	r7, [pc, #84]	@ (8000ce8 <Vector60+0x68>)
 8000c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c96:	b10b      	cbz	r3, 8000c9c <Vector60+0x1c>
 8000c98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c9a:	4798      	blx	r3
 8000c9c:	2330      	movs	r3, #48	@ 0x30
 8000c9e:	f383 8811 	msr	BASEPRI, r3
 8000ca2:	4c12      	ldr	r4, [pc, #72]	@ (8000cec <Vector60+0x6c>)
  return (bool)(qp->next != qp);
 8000ca4:	6a39      	ldr	r1, [r7, #32]
 8000ca6:	42a1      	cmp	r1, r4
 8000ca8:	d014      	beq.n	8000cd4 <Vector60+0x54>
 8000caa:	2600      	movs	r6, #0
 8000cac:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000cae:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000cb0:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000cb2:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8000cb4:	6239      	str	r1, [r7, #32]
  qp->next->prev = qp;
 8000cb6:	604c      	str	r4, [r1, #4]
 8000cb8:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000cba:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000cbe:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000cc0:	6890      	ldr	r0, [r2, #8]
 8000cc2:	42a8      	cmp	r0, r5
 8000cc4:	d2fb      	bcs.n	8000cbe <Vector60+0x3e>
  p->prev       = pqp->prev;
 8000cc6:	6850      	ldr	r0, [r2, #4]
 8000cc8:	42a1      	cmp	r1, r4
 8000cca:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000cce:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000cd0:	6053      	str	r3, [r2, #4]
 8000cd2:	d1eb      	bne.n	8000cac <Vector60+0x2c>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8000cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8000cde:	f7ff bb67 	b.w	80003b0 <__port_irq_epilogue>
 8000ce2:	bf00      	nop
 8000ce4:	40010400 	.word	0x40010400
 8000ce8:	20001cc0 	.word	0x20001cc0
 8000cec:	20001ce0 	.word	0x20001ce0

08000cf0 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8000cf0:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <Vector64+0x64>)
OSAL_IRQ_HANDLER(Vector64) {
 8000cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8000cf4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8000cfe:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 8000d00:	b31b      	cbz	r3, 8000d4a <Vector64+0x5a>
 8000d02:	4f15      	ldr	r7, [pc, #84]	@ (8000d58 <Vector64+0x68>)
 8000d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d06:	b10b      	cbz	r3, 8000d0c <Vector64+0x1c>
 8000d08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000d0a:	4798      	blx	r3
 8000d0c:	2330      	movs	r3, #48	@ 0x30
 8000d0e:	f383 8811 	msr	BASEPRI, r3
 8000d12:	4c12      	ldr	r4, [pc, #72]	@ (8000d5c <Vector64+0x6c>)
  return (bool)(qp->next != qp);
 8000d14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d16:	42a1      	cmp	r1, r4
 8000d18:	d014      	beq.n	8000d44 <Vector64+0x54>
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000d1e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000d20:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000d22:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8000d24:	6339      	str	r1, [r7, #48]	@ 0x30
  qp->next->prev = qp;
 8000d26:	604c      	str	r4, [r1, #4]
 8000d28:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000d2a:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000d2e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000d30:	6890      	ldr	r0, [r2, #8]
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	d2fb      	bcs.n	8000d2e <Vector64+0x3e>
  p->prev       = pqp->prev;
 8000d36:	6850      	ldr	r0, [r2, #4]
 8000d38:	42a1      	cmp	r1, r4
 8000d3a:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000d3e:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000d40:	6053      	str	r3, [r2, #4]
 8000d42:	d1eb      	bne.n	8000d1c <Vector64+0x2c>
 8000d44:	2300      	movs	r3, #0
 8000d46:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8000d4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8000d4e:	f7ff bb2f 	b.w	80003b0 <__port_irq_epilogue>
 8000d52:	bf00      	nop
 8000d54:	40010400 	.word	0x40010400
 8000d58:	20001cc0 	.word	0x20001cc0
 8000d5c:	20001cf0 	.word	0x20001cf0

08000d60 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8000d60:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <Vector68+0x64>)
OSAL_IRQ_HANDLER(Vector68) {
 8000d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8000d64:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	400b      	ands	r3, r1
 8000d6a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8000d6e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 8000d70:	b31b      	cbz	r3, 8000dba <Vector68+0x5a>
 8000d72:	4f15      	ldr	r7, [pc, #84]	@ (8000dc8 <Vector68+0x68>)
 8000d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d76:	b10b      	cbz	r3, 8000d7c <Vector68+0x1c>
 8000d78:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000d7a:	4798      	blx	r3
 8000d7c:	2330      	movs	r3, #48	@ 0x30
 8000d7e:	f383 8811 	msr	BASEPRI, r3
 8000d82:	4c12      	ldr	r4, [pc, #72]	@ (8000dcc <Vector68+0x6c>)
  return (bool)(qp->next != qp);
 8000d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000d86:	42a1      	cmp	r1, r4
 8000d88:	d014      	beq.n	8000db4 <Vector68+0x54>
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000d8e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000d90:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000d92:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8000d94:	6439      	str	r1, [r7, #64]	@ 0x40
  qp->next->prev = qp;
 8000d96:	604c      	str	r4, [r1, #4]
 8000d98:	629e      	str	r6, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000d9a:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000d9e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000da0:	6890      	ldr	r0, [r2, #8]
 8000da2:	42a8      	cmp	r0, r5
 8000da4:	d2fb      	bcs.n	8000d9e <Vector68+0x3e>
  p->prev       = pqp->prev;
 8000da6:	6850      	ldr	r0, [r2, #4]
 8000da8:	42a1      	cmp	r1, r4
 8000daa:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000dae:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000db0:	6053      	str	r3, [r2, #4]
 8000db2:	d1eb      	bne.n	8000d8c <Vector68+0x2c>
 8000db4:	2300      	movs	r3, #0
 8000db6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8000dba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8000dbe:	f7ff baf7 	b.w	80003b0 <__port_irq_epilogue>
 8000dc2:	bf00      	nop
 8000dc4:	40010400 	.word	0x40010400
 8000dc8:	20001cc0 	.word	0x20001cc0
 8000dcc:	20001d00 	.word	0x20001d00

08000dd0 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8000dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f84 <Vector9C+0x1b4>)
 8000dd4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8000dd6:	681d      	ldr	r5, [r3, #0]
 8000dd8:	4015      	ands	r5, r2
 8000dda:	f405 7278 	and.w	r2, r5, #992	@ 0x3e0
                     (1U << 9));
  EXTI->PR = pr;

  exti_serve_irq(pr, 5);
 8000dde:	06ac      	lsls	r4, r5, #26
  EXTI->PR = pr;
 8000de0:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 8000de2:	d525      	bpl.n	8000e30 <Vector9C+0x60>
 8000de4:	4c68      	ldr	r4, [pc, #416]	@ (8000f88 <Vector9C+0x1b8>)
 8000de6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000de8:	b10b      	cbz	r3, 8000dee <Vector9C+0x1e>
 8000dea:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8000dec:	4798      	blx	r3
 8000dee:	2330      	movs	r3, #48	@ 0x30
 8000df0:	f383 8811 	msr	BASEPRI, r3
 8000df4:	4e65      	ldr	r6, [pc, #404]	@ (8000f8c <Vector9C+0x1bc>)
  return (bool)(qp->next != qp);
 8000df6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8000df8:	42b1      	cmp	r1, r6
 8000dfa:	d016      	beq.n	8000e2a <Vector9C+0x5a>
 8000dfc:	f04f 0c00 	mov.w	ip, #0
 8000e00:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000e02:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000e04:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000e06:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8000e08:	6521      	str	r1, [r4, #80]	@ 0x50
  qp->next->prev = qp;
 8000e0a:	604e      	str	r6, [r1, #4]
 8000e0c:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000e10:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000e14:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000e16:	6890      	ldr	r0, [r2, #8]
 8000e18:	42b8      	cmp	r0, r7
 8000e1a:	d2fb      	bcs.n	8000e14 <Vector9C+0x44>
  p->prev       = pqp->prev;
 8000e1c:	6850      	ldr	r0, [r2, #4]
 8000e1e:	42b1      	cmp	r1, r6
 8000e20:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000e24:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000e26:	6053      	str	r3, [r2, #4]
 8000e28:	d1ea      	bne.n	8000e00 <Vector9C+0x30>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 8000e30:	0668      	lsls	r0, r5, #25
 8000e32:	d525      	bpl.n	8000e80 <Vector9C+0xb0>
 8000e34:	4c54      	ldr	r4, [pc, #336]	@ (8000f88 <Vector9C+0x1b8>)
 8000e36:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8000e38:	b10b      	cbz	r3, 8000e3e <Vector9C+0x6e>
 8000e3a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8000e3c:	4798      	blx	r3
 8000e3e:	2330      	movs	r3, #48	@ 0x30
 8000e40:	f383 8811 	msr	BASEPRI, r3
 8000e44:	4e52      	ldr	r6, [pc, #328]	@ (8000f90 <Vector9C+0x1c0>)
  return (bool)(qp->next != qp);
 8000e46:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8000e48:	42b1      	cmp	r1, r6
 8000e4a:	d016      	beq.n	8000e7a <Vector9C+0xaa>
 8000e4c:	f04f 0c00 	mov.w	ip, #0
 8000e50:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000e52:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000e54:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000e56:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8000e58:	6621      	str	r1, [r4, #96]	@ 0x60
  qp->next->prev = qp;
 8000e5a:	604e      	str	r6, [r1, #4]
 8000e5c:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000e60:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000e64:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000e66:	6890      	ldr	r0, [r2, #8]
 8000e68:	42b8      	cmp	r0, r7
 8000e6a:	d2fb      	bcs.n	8000e64 <Vector9C+0x94>
  p->prev       = pqp->prev;
 8000e6c:	6850      	ldr	r0, [r2, #4]
 8000e6e:	42b1      	cmp	r1, r6
 8000e70:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000e74:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000e76:	6053      	str	r3, [r2, #4]
 8000e78:	d1ea      	bne.n	8000e50 <Vector9C+0x80>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 8000e80:	0629      	lsls	r1, r5, #24
 8000e82:	d525      	bpl.n	8000ed0 <Vector9C+0x100>
 8000e84:	4c40      	ldr	r4, [pc, #256]	@ (8000f88 <Vector9C+0x1b8>)
 8000e86:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000e88:	b10b      	cbz	r3, 8000e8e <Vector9C+0xbe>
 8000e8a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8000e8c:	4798      	blx	r3
 8000e8e:	2330      	movs	r3, #48	@ 0x30
 8000e90:	f383 8811 	msr	BASEPRI, r3
 8000e94:	4e3f      	ldr	r6, [pc, #252]	@ (8000f94 <Vector9C+0x1c4>)
  return (bool)(qp->next != qp);
 8000e96:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8000e98:	42b1      	cmp	r1, r6
 8000e9a:	d016      	beq.n	8000eca <Vector9C+0xfa>
 8000e9c:	f04f 0c00 	mov.w	ip, #0
 8000ea0:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000ea2:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000ea4:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000ea6:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8000ea8:	6721      	str	r1, [r4, #112]	@ 0x70
  qp->next->prev = qp;
 8000eaa:	604e      	str	r6, [r1, #4]
 8000eac:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000eb0:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000eb4:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000eb6:	6890      	ldr	r0, [r2, #8]
 8000eb8:	42b8      	cmp	r0, r7
 8000eba:	d2fb      	bcs.n	8000eb4 <Vector9C+0xe4>
  p->prev       = pqp->prev;
 8000ebc:	6850      	ldr	r0, [r2, #4]
 8000ebe:	42b1      	cmp	r1, r6
 8000ec0:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000ec4:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000ec6:	6053      	str	r3, [r2, #4]
 8000ec8:	d1ea      	bne.n	8000ea0 <Vector9C+0xd0>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8000ed0:	05ea      	lsls	r2, r5, #23
 8000ed2:	d529      	bpl.n	8000f28 <Vector9C+0x158>
 8000ed4:	4c2c      	ldr	r4, [pc, #176]	@ (8000f88 <Vector9C+0x1b8>)
 8000ed6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8000eda:	b113      	cbz	r3, 8000ee2 <Vector9C+0x112>
 8000edc:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8000ee0:	4798      	blx	r3
 8000ee2:	2330      	movs	r3, #48	@ 0x30
 8000ee4:	f383 8811 	msr	BASEPRI, r3
 8000ee8:	4e2b      	ldr	r6, [pc, #172]	@ (8000f98 <Vector9C+0x1c8>)
  return (bool)(qp->next != qp);
 8000eea:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8000eee:	42b1      	cmp	r1, r6
 8000ef0:	d017      	beq.n	8000f22 <Vector9C+0x152>
 8000ef2:	f04f 0c00 	mov.w	ip, #0
 8000ef6:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000ef8:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000efa:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000efc:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8000efe:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  qp->next->prev = qp;
 8000f02:	604e      	str	r6, [r1, #4]
 8000f04:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000f08:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000f0c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000f0e:	6890      	ldr	r0, [r2, #8]
 8000f10:	42b8      	cmp	r0, r7
 8000f12:	d2fb      	bcs.n	8000f0c <Vector9C+0x13c>
  p->prev       = pqp->prev;
 8000f14:	6850      	ldr	r0, [r2, #4]
 8000f16:	42b1      	cmp	r1, r6
 8000f18:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000f1c:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000f1e:	6053      	str	r3, [r2, #4]
 8000f20:	d1e9      	bne.n	8000ef6 <Vector9C+0x126>
 8000f22:	2300      	movs	r3, #0
 8000f24:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 8000f28:	05ab      	lsls	r3, r5, #22
 8000f2a:	d527      	bpl.n	8000f7c <Vector9C+0x1ac>
 8000f2c:	4c16      	ldr	r4, [pc, #88]	@ (8000f88 <Vector9C+0x1b8>)
 8000f2e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8000f32:	b113      	cbz	r3, 8000f3a <Vector9C+0x16a>
 8000f34:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8000f38:	4798      	blx	r3
 8000f3a:	2330      	movs	r3, #48	@ 0x30
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	4d16      	ldr	r5, [pc, #88]	@ (8000f9c <Vector9C+0x1cc>)
  return (bool)(qp->next != qp);
 8000f42:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8000f46:	42a9      	cmp	r1, r5
 8000f48:	d015      	beq.n	8000f76 <Vector9C+0x1a6>
 8000f4a:	2700      	movs	r7, #0
 8000f4c:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000f4e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000f50:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000f52:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8000f54:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
  qp->next->prev = qp;
 8000f58:	604d      	str	r5, [r1, #4]
 8000f5a:	629f      	str	r7, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000f5c:	f883 7024 	strb.w	r7, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000f60:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000f62:	6890      	ldr	r0, [r2, #8]
 8000f64:	42b0      	cmp	r0, r6
 8000f66:	d2fb      	bcs.n	8000f60 <Vector9C+0x190>
  p->prev       = pqp->prev;
 8000f68:	6850      	ldr	r0, [r2, #4]
 8000f6a:	42a9      	cmp	r1, r5
 8000f6c:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000f70:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000f72:	6053      	str	r3, [r2, #4]
 8000f74:	d1ea      	bne.n	8000f4c <Vector9C+0x17c>
 8000f76:	2300      	movs	r3, #0
 8000f78:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8000f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8000f80:	f7ff ba16 	b.w	80003b0 <__port_irq_epilogue>
 8000f84:	40010400 	.word	0x40010400
 8000f88:	20001cc0 	.word	0x20001cc0
 8000f8c:	20001d10 	.word	0x20001d10
 8000f90:	20001d20 	.word	0x20001d20
 8000f94:	20001d30 	.word	0x20001d30
 8000f98:	20001d40 	.word	0x20001d40
 8000f9c:	20001d50 	.word	0x20001d50

08000fa0 <VectorE0>:
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8000fa2:	4b88      	ldr	r3, [pc, #544]	@ (80011c4 <VectorE0+0x224>)
 8000fa4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8000fa6:	681d      	ldr	r5, [r3, #0]
 8000fa8:	4015      	ands	r5, r2
 8000faa:	f405 427c 	and.w	r2, r5, #64512	@ 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;

  exti_serve_irq(pr, 10);
 8000fae:	056e      	lsls	r6, r5, #21
  EXTI->PR = pr;
 8000fb0:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 10);
 8000fb2:	d529      	bpl.n	8001008 <VectorE0+0x68>
 8000fb4:	4c84      	ldr	r4, [pc, #528]	@ (80011c8 <VectorE0+0x228>)
 8000fb6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8000fba:	b113      	cbz	r3, 8000fc2 <VectorE0+0x22>
 8000fbc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8000fc0:	4798      	blx	r3
 8000fc2:	2330      	movs	r3, #48	@ 0x30
 8000fc4:	f383 8811 	msr	BASEPRI, r3
 8000fc8:	4e80      	ldr	r6, [pc, #512]	@ (80011cc <VectorE0+0x22c>)
  return (bool)(qp->next != qp);
 8000fca:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8000fce:	42b1      	cmp	r1, r6
 8000fd0:	d017      	beq.n	8001002 <VectorE0+0x62>
 8000fd2:	f04f 0c00 	mov.w	ip, #0
 8000fd6:	460b      	mov	r3, r1
  qp->next       = p->next;
 8000fd8:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000fda:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000fdc:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8000fde:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0
  qp->next->prev = qp;
 8000fe2:	604e      	str	r6, [r1, #4]
 8000fe4:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8000fe8:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8000fec:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000fee:	6890      	ldr	r0, [r2, #8]
 8000ff0:	42b8      	cmp	r0, r7
 8000ff2:	d2fb      	bcs.n	8000fec <VectorE0+0x4c>
  p->prev       = pqp->prev;
 8000ff4:	6850      	ldr	r0, [r2, #4]
 8000ff6:	42b1      	cmp	r1, r6
 8000ff8:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8000ffc:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000ffe:	6053      	str	r3, [r2, #4]
 8001000:	d1e9      	bne.n	8000fd6 <VectorE0+0x36>
 8001002:	2300      	movs	r3, #0
 8001004:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 8001008:	052c      	lsls	r4, r5, #20
 800100a:	d529      	bpl.n	8001060 <VectorE0+0xc0>
 800100c:	4c6e      	ldr	r4, [pc, #440]	@ (80011c8 <VectorE0+0x228>)
 800100e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8001012:	b113      	cbz	r3, 800101a <VectorE0+0x7a>
 8001014:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8001018:	4798      	blx	r3
 800101a:	2330      	movs	r3, #48	@ 0x30
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	4e6b      	ldr	r6, [pc, #428]	@ (80011d0 <VectorE0+0x230>)
  return (bool)(qp->next != qp);
 8001022:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8001026:	42b1      	cmp	r1, r6
 8001028:	d017      	beq.n	800105a <VectorE0+0xba>
 800102a:	f04f 0c00 	mov.w	ip, #0
 800102e:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001030:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001032:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001034:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8001036:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0
  qp->next->prev = qp;
 800103a:	604e      	str	r6, [r1, #4]
 800103c:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001040:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 8001044:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001046:	6890      	ldr	r0, [r2, #8]
 8001048:	42b8      	cmp	r0, r7
 800104a:	d2fb      	bcs.n	8001044 <VectorE0+0xa4>
  p->prev       = pqp->prev;
 800104c:	6850      	ldr	r0, [r2, #4]
 800104e:	42b1      	cmp	r1, r6
 8001050:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001054:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001056:	6053      	str	r3, [r2, #4]
 8001058:	d1e9      	bne.n	800102e <VectorE0+0x8e>
 800105a:	2300      	movs	r3, #0
 800105c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 8001060:	04e8      	lsls	r0, r5, #19
 8001062:	d529      	bpl.n	80010b8 <VectorE0+0x118>
 8001064:	4c58      	ldr	r4, [pc, #352]	@ (80011c8 <VectorE0+0x228>)
 8001066:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800106a:	b113      	cbz	r3, 8001072 <VectorE0+0xd2>
 800106c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8001070:	4798      	blx	r3
 8001072:	2330      	movs	r3, #48	@ 0x30
 8001074:	f383 8811 	msr	BASEPRI, r3
 8001078:	4e56      	ldr	r6, [pc, #344]	@ (80011d4 <VectorE0+0x234>)
  return (bool)(qp->next != qp);
 800107a:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 800107e:	42b1      	cmp	r1, r6
 8001080:	d017      	beq.n	80010b2 <VectorE0+0x112>
 8001082:	f04f 0c00 	mov.w	ip, #0
 8001086:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001088:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800108a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800108c:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800108e:	f8c4 10c0 	str.w	r1, [r4, #192]	@ 0xc0
  qp->next->prev = qp;
 8001092:	604e      	str	r6, [r1, #4]
 8001094:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001098:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 800109c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800109e:	6890      	ldr	r0, [r2, #8]
 80010a0:	42b8      	cmp	r0, r7
 80010a2:	d2fb      	bcs.n	800109c <VectorE0+0xfc>
  p->prev       = pqp->prev;
 80010a4:	6850      	ldr	r0, [r2, #4]
 80010a6:	42b1      	cmp	r1, r6
 80010a8:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 80010ac:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 80010ae:	6053      	str	r3, [r2, #4]
 80010b0:	d1e9      	bne.n	8001086 <VectorE0+0xe6>
 80010b2:	2300      	movs	r3, #0
 80010b4:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 80010b8:	04a9      	lsls	r1, r5, #18
 80010ba:	d529      	bpl.n	8001110 <VectorE0+0x170>
 80010bc:	4c42      	ldr	r4, [pc, #264]	@ (80011c8 <VectorE0+0x228>)
 80010be:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80010c2:	b113      	cbz	r3, 80010ca <VectorE0+0x12a>
 80010c4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
 80010c8:	4798      	blx	r3
 80010ca:	2330      	movs	r3, #48	@ 0x30
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	4e41      	ldr	r6, [pc, #260]	@ (80011d8 <VectorE0+0x238>)
  return (bool)(qp->next != qp);
 80010d2:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 80010d6:	42b1      	cmp	r1, r6
 80010d8:	d017      	beq.n	800110a <VectorE0+0x16a>
 80010da:	f04f 0c00 	mov.w	ip, #0
 80010de:	460b      	mov	r3, r1
  qp->next       = p->next;
 80010e0:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80010e2:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80010e4:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 80010e6:	f8c4 10d0 	str.w	r1, [r4, #208]	@ 0xd0
  qp->next->prev = qp;
 80010ea:	604e      	str	r6, [r1, #4]
 80010ec:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 80010f0:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 80010f4:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80010f6:	6890      	ldr	r0, [r2, #8]
 80010f8:	42b8      	cmp	r0, r7
 80010fa:	d2fb      	bcs.n	80010f4 <VectorE0+0x154>
  p->prev       = pqp->prev;
 80010fc:	6850      	ldr	r0, [r2, #4]
 80010fe:	42b1      	cmp	r1, r6
 8001100:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8001104:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001106:	6053      	str	r3, [r2, #4]
 8001108:	d1e9      	bne.n	80010de <VectorE0+0x13e>
 800110a:	2300      	movs	r3, #0
 800110c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 8001110:	046a      	lsls	r2, r5, #17
 8001112:	d529      	bpl.n	8001168 <VectorE0+0x1c8>
 8001114:	4c2c      	ldr	r4, [pc, #176]	@ (80011c8 <VectorE0+0x228>)
 8001116:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 800111a:	b113      	cbz	r3, 8001122 <VectorE0+0x182>
 800111c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 8001120:	4798      	blx	r3
 8001122:	2330      	movs	r3, #48	@ 0x30
 8001124:	f383 8811 	msr	BASEPRI, r3
 8001128:	4e2c      	ldr	r6, [pc, #176]	@ (80011dc <VectorE0+0x23c>)
  return (bool)(qp->next != qp);
 800112a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 800112e:	42b1      	cmp	r1, r6
 8001130:	d017      	beq.n	8001162 <VectorE0+0x1c2>
 8001132:	f04f 0c00 	mov.w	ip, #0
 8001136:	460b      	mov	r3, r1
  qp->next       = p->next;
 8001138:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800113a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800113c:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 800113e:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
  qp->next->prev = qp;
 8001142:	604e      	str	r6, [r1, #4]
 8001144:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 8001148:	f883 c024 	strb.w	ip, [r3, #36]	@ 0x24
    pqp = pqp->next;
 800114c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800114e:	6890      	ldr	r0, [r2, #8]
 8001150:	42b8      	cmp	r0, r7
 8001152:	d2fb      	bcs.n	800114c <VectorE0+0x1ac>
  p->prev       = pqp->prev;
 8001154:	6850      	ldr	r0, [r2, #4]
 8001156:	42b1      	cmp	r1, r6
 8001158:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800115c:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800115e:	6053      	str	r3, [r2, #4]
 8001160:	d1e9      	bne.n	8001136 <VectorE0+0x196>
 8001162:	2300      	movs	r3, #0
 8001164:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 8001168:	042b      	lsls	r3, r5, #16
 800116a:	d527      	bpl.n	80011bc <VectorE0+0x21c>
 800116c:	4c16      	ldr	r4, [pc, #88]	@ (80011c8 <VectorE0+0x228>)
 800116e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8001172:	b113      	cbz	r3, 800117a <VectorE0+0x1da>
 8001174:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
 8001178:	4798      	blx	r3
 800117a:	2330      	movs	r3, #48	@ 0x30
 800117c:	f383 8811 	msr	BASEPRI, r3
 8001180:	4d17      	ldr	r5, [pc, #92]	@ (80011e0 <VectorE0+0x240>)
  return (bool)(qp->next != qp);
 8001182:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8001186:	42a9      	cmp	r1, r5
 8001188:	d015      	beq.n	80011b6 <VectorE0+0x216>
 800118a:	2700      	movs	r7, #0
 800118c:	460b      	mov	r3, r1
  qp->next       = p->next;
 800118e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001190:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001192:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8001194:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0
  qp->next->prev = qp;
 8001198:	604d      	str	r5, [r1, #4]
 800119a:	629f      	str	r7, [r3, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 800119c:	f883 7024 	strb.w	r7, [r3, #36]	@ 0x24
    pqp = pqp->next;
 80011a0:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80011a2:	6890      	ldr	r0, [r2, #8]
 80011a4:	42b0      	cmp	r0, r6
 80011a6:	d2fb      	bcs.n	80011a0 <VectorE0+0x200>
  p->prev       = pqp->prev;
 80011a8:	6850      	ldr	r0, [r2, #4]
 80011aa:	42a9      	cmp	r1, r5
 80011ac:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 80011b0:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 80011b2:	6053      	str	r3, [r2, #4]
 80011b4:	d1ea      	bne.n	800118c <VectorE0+0x1ec>
 80011b6:	2300      	movs	r3, #0
 80011b8:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80011bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80011c0:	f7ff b8f6 	b.w	80003b0 <__port_irq_epilogue>
 80011c4:	40010400 	.word	0x40010400
 80011c8:	20001cc0 	.word	0x20001cc0
 80011cc:	20001d60 	.word	0x20001d60
 80011d0:	20001d70 	.word	0x20001d70
 80011d4:	20001d80 	.word	0x20001d80
 80011d8:	20001d90 	.word	0x20001d90
 80011dc:	20001da0 	.word	0x20001da0
 80011e0:	20001db0 	.word	0x20001db0
	...

080011f0 <SysTick_Handler>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	2630      	movs	r6, #48	@ 0x30
 80011f4:	f386 8811 	msr	BASEPRI, r6
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
 80011f8:	4d1f      	ldr	r5, [pc, #124]	@ (8001278 <SysTick_Handler+0x88>)
  return (bool)(dlhp != dlhp->next);
 80011fa:	462a      	mov	r2, r5
 80011fc:	8bab      	ldrh	r3, [r5, #28]
 80011fe:	f852 4f10 	ldr.w	r4, [r2, #16]!
 8001202:	3301      	adds	r3, #1
 8001204:	b29b      	uxth	r3, r3
  if (ch_dlist_notempty(&vtlp->dlist)) {
 8001206:	4294      	cmp	r4, r2
  vtlp->systime++;
 8001208:	83ab      	strh	r3, [r5, #28]
  if (ch_dlist_notempty(&vtlp->dlist)) {
 800120a:	d016      	beq.n	800123a <SysTick_Handler+0x4a>
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
 800120c:	68a3      	ldr	r3, [r4, #8]
 800120e:	3b01      	subs	r3, #1
 8001210:	60a3      	str	r3, [r4, #8]
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 8001212:	b993      	cbnz	r3, 800123a <SysTick_Handler+0x4a>
  dlp->prev->next = dlp->next;
 8001214:	e9d4 2100 	ldrd	r2, r1, [r4]
 8001218:	600a      	str	r2, [r1, #0]
  dlp->next->prev = dlp->prev;
 800121a:	6051      	str	r1, [r2, #4]
      /* Triggered timer.*/
      vtp = (virtual_timer_t *)vtlp->dlist.next;

      /* Removing the element from the delta list, marking it as not armed.*/
      (void) ch_dlist_dequeue(&vtp->dlist);
      vtp->dlist.next = NULL;
 800121c:	6023      	str	r3, [r4, #0]
 800121e:	f383 8811 	msr	BASEPRI, r3

      chSysUnlockFromISR();
      vtp->func(vtp, vtp->par);
 8001222:	4620      	mov	r0, r4
 8001224:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8001228:	4798      	blx	r3
 800122a:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* If a reload is defined the timer needs to be restarted.*/
      if (vtp->reload > (sysinterval_t)0) {
 800122e:	6963      	ldr	r3, [r4, #20]
 8001230:	b953      	cbnz	r3, 8001248 <SysTick_Handler+0x58>
  dlp = dlhp->next;
 8001232:	692c      	ldr	r4, [r5, #16]
  while (likely(dlp->delta < delta)) {
 8001234:	68a3      	ldr	r3, [r4, #8]
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ec      	beq.n	8001214 <SysTick_Handler+0x24>
 800123a:	2300      	movs	r3, #0
 800123c:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  st_lld_serve_interrupt();

  OSAL_IRQ_EPILOGUE();
}
 8001240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8001244:	f7ff b8b4 	b.w	80003b0 <__port_irq_epilogue>
  dlp = dlhp->next;
 8001248:	692a      	ldr	r2, [r5, #16]
  while (likely(dlp->delta < delta)) {
 800124a:	6891      	ldr	r1, [r2, #8]
 800124c:	428b      	cmp	r3, r1
 800124e:	d904      	bls.n	800125a <SysTick_Handler+0x6a>
    dlp = dlp->next;
 8001250:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8001252:	1a5b      	subs	r3, r3, r1
  while (likely(dlp->delta < delta)) {
 8001254:	6891      	ldr	r1, [r2, #8]
 8001256:	4299      	cmp	r1, r3
 8001258:	d3fa      	bcc.n	8001250 <SysTick_Handler+0x60>
  dlhp->delta = (sysinterval_t)-1;
 800125a:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->prev       = dlp->next->prev;
 800125e:	6851      	ldr	r1, [r2, #4]
  dlp->delta      = delta;
 8001260:	60a3      	str	r3, [r4, #8]
  dlp->prev       = dlp->next->prev;
 8001262:	6061      	str	r1, [r4, #4]
  dlp->next       = dlhp;
 8001264:	6022      	str	r2, [r4, #0]
  dlp->prev->next = dlp;
 8001266:	600c      	str	r4, [r1, #0]
  dlp->delta -= delta;
 8001268:	6891      	ldr	r1, [r2, #8]
  dlhp->prev      = dlp;
 800126a:	6054      	str	r4, [r2, #4]
  dlp->delta -= delta;
 800126c:	1ac9      	subs	r1, r1, r3
 800126e:	692c      	ldr	r4, [r5, #16]
 8001270:	6091      	str	r1, [r2, #8]
  dlhp->delta = (sysinterval_t)-1;
 8001272:	61a8      	str	r0, [r5, #24]
 8001274:	68a3      	ldr	r3, [r4, #8]
}
 8001276:	e7cc      	b.n	8001212 <SysTick_Handler+0x22>
 8001278:	20001c38 	.word	0x20001c38
 800127c:	00000000 	.word	0x00000000

08001280 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001280:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <__early_init+0x70>)
 8001282:	6813      	ldr	r3, [r2, #0]
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	0798      	lsls	r0, r3, #30
 800128e:	d5fc      	bpl.n	800128a <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001290:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001292:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001294:	4916      	ldr	r1, [pc, #88]	@ (80012f0 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001296:	f003 03f9 	and.w	r3, r3, #249	@ 0xf9
 800129a:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800129c:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800129e:	684b      	ldr	r3, [r1, #4]
 80012a0:	f013 0f0c 	tst.w	r3, #12
 80012a4:	d1fb      	bne.n	800129e <__early_init+0x1e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80012a6:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 80012aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ae:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	0399      	lsls	r1, r3, #14
 80012b4:	d5fc      	bpl.n	80012b0 <__early_init+0x30>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80012b6:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80012b8:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80012ba:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 80012be:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012c6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80012c8:	680b      	ldr	r3, [r1, #0]
 80012ca:	019b      	lsls	r3, r3, #6
 80012cc:	d5fc      	bpl.n	80012c8 <__early_init+0x48>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80012ce:	2012      	movs	r0, #18
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80012d0:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <__early_init+0x74>)
  FLASH->ACR = STM32_FLASHBITS;
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <__early_init+0x78>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80012d4:	604a      	str	r2, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 80012d6:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80012d8:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80012da:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80012e2:	6853      	ldr	r3, [r2, #4]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d1fa      	bne.n	80012e2 <__early_init+0x62>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	001d6400 	.word	0x001d6400
 80012f8:	40022000 	.word	0x40022000
 80012fc:	00000000 	.word	0x00000000

08001300 <chSchDoPreemption>:
static void __sch_reschedule_ahead(void) {
 8001300:	b410      	push	{r4}
  ntp->state = CH_STATE_CURRENT;
 8001302:	2401      	movs	r4, #1
  tp->state = CH_STATE_READY;
 8001304:	f04f 0c00 	mov.w	ip, #0
  thread_t *otp = __instance_get_currthread(oip);
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <chSchDoPreemption+0x3c>)
  ch_priority_queue_t *p = pqp->next;
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	68d9      	ldr	r1, [r3, #12]
  pqp->next       = p->next;
 800130e:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8001310:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001312:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  pqp->next       = p->next;
 8001316:	601a      	str	r2, [r3, #0]
  __instance_set_currthread(oip, ntp);
 8001318:	60d8      	str	r0, [r3, #12]
  } while (unlikely(pqp->prio > p->prio));
 800131a:	688c      	ldr	r4, [r1, #8]
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 800131c:	698b      	ldr	r3, [r1, #24]
  tp->state = CH_STATE_READY;
 800131e:	f881 c024 	strb.w	ip, [r1, #36]	@ 0x24
    pqp = pqp->next;
 8001322:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	42a2      	cmp	r2, r4
 8001328:	d8fb      	bhi.n	8001322 <chSchDoPreemption+0x22>
  p->prev       = pqp->prev;
 800132a:	685a      	ldr	r2, [r3, #4]
}
 800132c:	bc10      	pop	{r4}
 800132e:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8001332:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8001334:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8001336:	f7fe bf83 	b.w	8000240 <__port_switch>
 800133a:	bf00      	nop
 800133c:	20001c38 	.word	0x20001c38

08001340 <eventHandle>:
static THD_FUNCTION(eventHandle, arg) {
 8001340:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001344:	2530      	movs	r5, #48	@ 0x30
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	f385 8811 	msr	BASEPRI, r5
  elp->wflags   = wflags;
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
  elp->events   = events;
 8001350:	2001      	movs	r0, #1
 8001352:	2100      	movs	r1, #0
  elp->next     = esp->next;
 8001354:	4b9c      	ldr	r3, [pc, #624]	@ (80015c8 <eventHandle+0x288>)
  elp->wflags   = wflags;
 8001356:	9206      	str	r2, [sp, #24]
  elp->next     = esp->next;
 8001358:	681a      	ldr	r2, [r3, #0]
  return __sch_get_currthread();
 800135a:	4c9c      	ldr	r4, [pc, #624]	@ (80015cc <eventHandle+0x28c>)
 800135c:	9202      	str	r2, [sp, #8]
  esp->next     = elp;
 800135e:	aa02      	add	r2, sp, #8
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	68e3      	ldr	r3, [r4, #12]
 8001364:	f04f 0900 	mov.w	r9, #0
  elp->events   = events;
 8001368:	e9cd 0104 	strd	r0, r1, [sp, #16]
  elp->listener = currtp;
 800136c:	9303      	str	r3, [sp, #12]
 800136e:	f389 8811 	msr	BASEPRI, r9
 8001372:	f8df 825c 	ldr.w	r8, [pc, #604]	@ 80015d0 <eventHandle+0x290>
  currtp->epending &= ~m;
 8001376:	464e      	mov	r6, r9
 8001378:	f8df b258 	ldr.w	fp, [pc, #600]	@ 80015d4 <eventHandle+0x294>
 800137c:	f8df a258 	ldr.w	sl, [pc, #600]	@ 80015d8 <eventHandle+0x298>
 8001380:	4f96      	ldr	r7, [pc, #600]	@ (80015dc <eventHandle+0x29c>)
}
 8001382:	e017      	b.n	80013b4 <eventHandle+0x74>
            if(current_state == IDLE) {
 8001384:	f898 3000 	ldrb.w	r3, [r8]
 8001388:	b923      	cbnz	r3, 8001394 <eventHandle+0x54>
                previous_state = IDLE;
 800138a:	f88b 3000 	strb.w	r3, [fp]
                current_state = SOAK_WATER_IN;
 800138e:	2301      	movs	r3, #1
 8001390:	f888 3000 	strb.w	r3, [r8]
 8001394:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8001398:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800139c:	f7ff f9c0 	bl	8000720 <chEvtBroadcastFlagsI.constprop.0>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	68e3      	ldr	r3, [r4, #12]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d901      	bls.n	80013b0 <eventHandle+0x70>
    __sch_reschedule_ahead();
 80013ac:	f7ff ffa8 	bl	8001300 <chSchDoPreemption>
 80013b0:	f386 8811 	msr	BASEPRI, r6
 80013b4:	68e2      	ldr	r2, [r4, #12]
 80013b6:	f385 8811 	msr	BASEPRI, r5
  m = currtp->epending & events;
 80013ba:	6b93      	ldr	r3, [r2, #56]	@ 0x38
  if (m == (eventmask_t)0) {
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8082 	beq.w	80014c6 <eventHandle+0x186>
  currtp->epending &= ~m;
 80013c2:	f8c2 9038 	str.w	r9, [r2, #56]	@ 0x38
 80013c6:	f386 8811 	msr	BASEPRI, r6
        if(events & START_EVENT) {
 80013ca:	f013 0201 	ands.w	r2, r3, #1
 80013ce:	d1d9      	bne.n	8001384 <eventHandle+0x44>
        else if(events & HIGH_WATERMARK_EVENT) {
 80013d0:	f013 0102 	ands.w	r1, r3, #2
 80013d4:	f000 808d 	beq.w	80014f2 <eventHandle+0x1b2>
            if(current_state == SOAK_WATER_IN) {
 80013d8:	f898 3000 	ldrb.w	r3, [r8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f000 8291 	beq.w	8001904 <eventHandle+0x5c4>
            else if(current_state == RINSE_WATER_IN) {
 80013e2:	2b07      	cmp	r3, #7
 80013e4:	d1d6      	bne.n	8001394 <eventHandle+0x54>
                previous_state = RINSE_WATER_IN;
 80013e6:	f88b 3000 	strb.w	r3, [fp]
                current_state = RINSE_TURN_CLKWISE;
 80013ea:	2308      	movs	r3, #8
 80013ec:	f888 3000 	strb.w	r3, [r8]
 80013f0:	f385 8811 	msr	BASEPRI, r5
  return (bool)(vtp->dlist.next != NULL);
 80013f4:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 80015e0 <eventHandle+0x2a0>
 80013f8:	f8dc 3000 	ldr.w	r3, [ip]
  if (chVTIsArmedI(vtp)) {
 80013fc:	b16b      	cbz	r3, 800141a <eventHandle+0xda>
  vtlp->dlist.delta = (sysinterval_t)-1;
 80013fe:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001402:	6899      	ldr	r1, [r3, #8]
 8001404:	f8dc e008 	ldr.w	lr, [ip, #8]
 8001408:	4471      	add	r1, lr
 800140a:	6099      	str	r1, [r3, #8]
  dlp->prev->next = dlp->next;
 800140c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8001410:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8001412:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8001414:	f8cc 2000 	str.w	r2, [ip]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001418:	61a0      	str	r0, [r4, #24]
  vtp->par     = par;
 800141a:	4b71      	ldr	r3, [pc, #452]	@ (80015e0 <eventHandle+0x2a0>)
  vtp->func    = vtfunc;
 800141c:	4a71      	ldr	r2, [pc, #452]	@ (80015e4 <eventHandle+0x2a4>)
  vtp->par     = par;
 800141e:	f8c3 9010 	str.w	r9, [r3, #16]
  vtp->func    = vtfunc;
 8001422:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
 8001424:	f8c3 9014 	str.w	r9, [r3, #20]
  dlp = dlhp->next;
 8001428:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 800142a:	4a6f      	ldr	r2, [pc, #444]	@ (80015e8 <eventHandle+0x2a8>)
 800142c:	6899      	ldr	r1, [r3, #8]
 800142e:	4291      	cmp	r1, r2
 8001430:	f200 83b3 	bhi.w	8001b9a <eventHandle+0x85a>
 8001434:	3201      	adds	r2, #1
    dlp = dlp->next;
 8001436:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001438:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	4291      	cmp	r1, r2
 800143e:	d3fa      	bcc.n	8001436 <eventHandle+0xf6>
  dlhp->delta = (sysinterval_t)-1;
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 8001444:	f8df c198 	ldr.w	ip, [pc, #408]	@ 80015e0 <eventHandle+0x2a0>
 8001448:	f8cc 2008 	str.w	r2, [ip, #8]
  dlp->delta -= delta;
 800144c:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 800144e:	f8cc 3000 	str.w	r3, [ip]
  dlp->delta -= delta;
 8001452:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	f8cc 2004 	str.w	r2, [ip, #4]
  dlp->prev->next = dlp;
 800145a:	f8c2 c000 	str.w	ip, [r2]
  dlhp->prev      = dlp;
 800145e:	e9c3 c101 	strd	ip, r1, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 8001462:	61a0      	str	r0, [r4, #24]
 8001464:	f386 8811 	msr	BASEPRI, r6
 8001468:	f385 8811 	msr	BASEPRI, r5
  return (bool)(vtp->dlist.next != NULL);
 800146c:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 800146e:	b14b      	cbz	r3, 8001484 <eventHandle+0x144>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	68b9      	ldr	r1, [r7, #8]
 8001474:	440a      	add	r2, r1
 8001476:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 800147c:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 800147e:	f8c7 9000 	str.w	r9, [r7]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001482:	61a0      	str	r0, [r4, #24]
  vtp->func    = vtfunc;
 8001484:	4b59      	ldr	r3, [pc, #356]	@ (80015ec <eventHandle+0x2ac>)
  while (likely(dlp->delta < delta)) {
 8001486:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800148a:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 800148c:	6923      	ldr	r3, [r4, #16]
  vtp->par     = par;
 800148e:	f8c7 9010 	str.w	r9, [r7, #16]
  while (likely(dlp->delta < delta)) {
 8001492:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8001494:	f8c7 9014 	str.w	r9, [r7, #20]
 8001498:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 800149c:	d204      	bcs.n	80014a8 <eventHandle+0x168>
    dlp = dlp->next;
 800149e:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80014a0:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80014a2:	6899      	ldr	r1, [r3, #8]
 80014a4:	4291      	cmp	r1, r2
 80014a6:	d3fa      	bcc.n	800149e <eventHandle+0x15e>
  dlhp->delta = (sysinterval_t)-1;
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 80014ac:	60ba      	str	r2, [r7, #8]
  dlp->delta -= delta;
 80014ae:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 80014b0:	603b      	str	r3, [r7, #0]
  dlp->delta -= delta;
 80014b2:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	607a      	str	r2, [r7, #4]
  dlp->prev->next = dlp;
 80014b8:	6017      	str	r7, [r2, #0]
  dlhp->prev      = dlp;
 80014ba:	e9c3 7101 	strd	r7, r1, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 80014be:	61a0      	str	r0, [r4, #24]
 80014c0:	f386 8811 	msr	BASEPRI, r6
                           vtfunc_t vtfunc, void *par) {

  chSysLock();
  chVTSetI(vtp, delay, vtfunc, par);
  chSysUnlock();
}
 80014c4:	e766      	b.n	8001394 <eventHandle+0x54>
    currtp->u.ewmask = events;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	6293      	str	r3, [r2, #40]	@ 0x28
  otp->state = newstate;
 80014cc:	230a      	movs	r3, #10
  ntp->state = CH_STATE_CURRENT;
 80014ce:	f04f 0c01 	mov.w	ip, #1
  thread_t *otp = __instance_get_currthread(oip);
 80014d2:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80014d4:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80014d6:	f881 3024 	strb.w	r3, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 80014da:	6803      	ldr	r3, [r0, #0]
 80014dc:	9201      	str	r2, [sp, #4]
  pqp->next->prev = pqp;
 80014de:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80014e0:	f880 c024 	strb.w	ip, [r0, #36]	@ 0x24
  pqp->next       = p->next;
 80014e4:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 80014e6:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80014e8:	f7fe feaa 	bl	8000240 <__port_switch>
    m = currtp->epending & events;
 80014ec:	9a01      	ldr	r2, [sp, #4]
 80014ee:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80014f0:	e767      	b.n	80013c2 <eventHandle+0x82>
        else if(events & LOW_WATERMARK_EVENT) {
 80014f2:	0758      	lsls	r0, r3, #29
 80014f4:	d54a      	bpl.n	800158c <eventHandle+0x24c>
            if(current_state == WASH_WATER_OUT){
 80014f6:	f898 3000 	ldrb.w	r3, [r8]
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	f000 8262 	beq.w	80019c4 <eventHandle+0x684>
            else if(current_state == RINSE_WATER_OUT){
 8001500:	2b0a      	cmp	r3, #10
 8001502:	f47f af47 	bne.w	8001394 <eventHandle+0x54>
                previous_state = RINSE_WATER_OUT;
 8001506:	f88b 3000 	strb.w	r3, [fp]
                current_state = CENTRIFUGE;
 800150a:	230b      	movs	r3, #11
 800150c:	f888 3000 	strb.w	r3, [r8]
 8001510:	f385 8811 	msr	BASEPRI, r5
  return (bool)(vtp->dlist.next != NULL);
 8001514:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 80015f0 <eventHandle+0x2b0>
 8001518:	f8dc 3000 	ldr.w	r3, [ip]
  if (chVTIsArmedI(vtp)) {
 800151c:	b16b      	cbz	r3, 800153a <eventHandle+0x1fa>
  vtlp->dlist.delta = (sysinterval_t)-1;
 800151e:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	f8dc e008 	ldr.w	lr, [ip, #8]
 8001528:	4472      	add	r2, lr
 800152a:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 800152c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001530:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001532:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001534:	f8cc 1000 	str.w	r1, [ip]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001538:	61a0      	str	r0, [r4, #24]
  vtp->par     = par;
 800153a:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <eventHandle+0x2b0>)
  vtp->func    = vtfunc;
 800153c:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <eventHandle+0x2b4>)
  vtp->par     = par;
 800153e:	f8c3 9010 	str.w	r9, [r3, #16]
  vtp->func    = vtfunc;
 8001542:	60da      	str	r2, [r3, #12]
  while (likely(dlp->delta < delta)) {
 8001544:	f649 423f 	movw	r2, #39999	@ 0x9c3f
  vtp->reload  = (sysinterval_t)0;
 8001548:	f8c3 9014 	str.w	r9, [r3, #20]
  dlp = dlhp->next;
 800154c:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 800154e:	6899      	ldr	r1, [r3, #8]
 8001550:	4291      	cmp	r1, r2
 8001552:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001556:	d804      	bhi.n	8001562 <eventHandle+0x222>
    dlp = dlp->next;
 8001558:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800155a:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 800155c:	6899      	ldr	r1, [r3, #8]
 800155e:	4291      	cmp	r1, r2
 8001560:	d3fa      	bcc.n	8001558 <eventHandle+0x218>
  dlhp->delta = (sysinterval_t)-1;
 8001562:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 8001566:	f8df c088 	ldr.w	ip, [pc, #136]	@ 80015f0 <eventHandle+0x2b0>
 800156a:	f8cc 2008 	str.w	r2, [ip, #8]
  dlp->delta -= delta;
 800156e:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 8001570:	f8cc 3000 	str.w	r3, [ip]
  dlp->delta -= delta;
 8001574:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	f8cc 2004 	str.w	r2, [ip, #4]
  dlp->prev->next = dlp;
 800157c:	f8c2 c000 	str.w	ip, [r2]
  dlhp->prev      = dlp;
 8001580:	e9c3 c101 	strd	ip, r1, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 8001584:	61a0      	str	r0, [r4, #24]
 8001586:	f386 8811 	msr	BASEPRI, r6
}
 800158a:	e703      	b.n	8001394 <eventHandle+0x54>
        else if(events & TIMEOUT_MOTOR_EVENT) {
 800158c:	f013 0220 	ands.w	r2, r3, #32
 8001590:	f000 8142 	beq.w	8001818 <eventHandle+0x4d8>
            if(current_state == SOAK_TURN_CLKWISE) {
 8001594:	f898 3000 	ldrb.w	r3, [r8]
 8001598:	3b02      	subs	r3, #2
 800159a:	2b07      	cmp	r3, #7
 800159c:	f63f aefa 	bhi.w	8001394 <eventHandle+0x54>
 80015a0:	a201      	add	r2, pc, #4	@ (adr r2, 80015a8 <eventHandle+0x268>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080016bf 	.word	0x080016bf
 80015ac:	080017bf 	.word	0x080017bf
 80015b0:	08001713 	.word	0x08001713
 80015b4:	08001769 	.word	0x08001769
 80015b8:	08001395 	.word	0x08001395
 80015bc:	08001395 	.word	0x08001395
 80015c0:	0800166b 	.word	0x0800166b
 80015c4:	080015f9 	.word	0x080015f9
 80015c8:	20001c1c 	.word	0x20001c1c
 80015cc:	20001c38 	.word	0x20001c38
 80015d0:	20001b79 	.word	0x20001b79
 80015d4:	20001b78 	.word	0x20001b78
 80015d8:	20001bdc 	.word	0x20001bdc
 80015dc:	20001bfc 	.word	0x20001bfc
 80015e0:	20001b9c 	.word	0x20001b9c
 80015e4:	08000801 	.word	0x08000801
 80015e8:	0001d4bf 	.word	0x0001d4bf
 80015ec:	080007a1 	.word	0x080007a1
 80015f0:	20001b7c 	.word	0x20001b7c
 80015f4:	08000821 	.word	0x08000821
                previous_state = RINSE_TURN_ANTI_CLKWISE;
 80015f8:	2309      	movs	r3, #9
 80015fa:	f88b 3000 	strb.w	r3, [fp]
                current_state = RINSE_TURN_CLKWISE;
 80015fe:	2308      	movs	r3, #8
 8001600:	f888 3000 	strb.w	r3, [r8]
 8001604:	2330      	movs	r3, #48	@ 0x30
 8001606:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 800160a:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 800160c:	b163      	cbz	r3, 8001628 <eventHandle+0x2e8>
  vtp->dlist.next = NULL;
 800160e:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800161a:	4462      	add	r2, ip
 800161c:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001622:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001624:	6038      	str	r0, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001626:	61a1      	str	r1, [r4, #24]
  vtp->par     = par;
 8001628:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 800162a:	4b7a      	ldr	r3, [pc, #488]	@ (8001814 <eventHandle+0x4d4>)
 800162c:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 800162e:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 8001630:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8001632:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8001636:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 800163a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800163e:	d204      	bcs.n	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 8001640:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001642:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8001644:	6899      	ldr	r1, [r3, #8]
 8001646:	4291      	cmp	r1, r2
 8001648:	d3fa      	bcc.n	8001640 <eventHandle+0x300>
  dlhp->delta = (sysinterval_t)-1;
 800164a:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 800164e:	60ba      	str	r2, [r7, #8]
  dlp->delta -= delta;
 8001650:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 8001652:	603b      	str	r3, [r7, #0]
  dlp->delta -= delta;
 8001654:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	607a      	str	r2, [r7, #4]
  dlp->prev->next = dlp;
 800165a:	6017      	str	r7, [r2, #0]
  dlhp->prev      = dlp;
 800165c:	e9c3 7101 	strd	r7, r1, [r3, #4]
 8001660:	2300      	movs	r3, #0
  dlhp->delta = (sysinterval_t)-1;
 8001662:	61a0      	str	r0, [r4, #24]
 8001664:	f383 8811 	msr	BASEPRI, r3
}
 8001668:	e694      	b.n	8001394 <eventHandle+0x54>
                previous_state = RINSE_TURN_CLKWISE;
 800166a:	2308      	movs	r3, #8
 800166c:	f88b 3000 	strb.w	r3, [fp]
                current_state = RINSE_TURN_ANTI_CLKWISE;
 8001670:	2309      	movs	r3, #9
 8001672:	f888 3000 	strb.w	r3, [r8]
 8001676:	2330      	movs	r3, #48	@ 0x30
 8001678:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 800167c:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 800167e:	b163      	cbz	r3, 800169a <eventHandle+0x35a>
  vtp->dlist.next = NULL;
 8001680:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001682:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800168c:	4462      	add	r2, ip
 800168e:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001694:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001696:	6038      	str	r0, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001698:	61a1      	str	r1, [r4, #24]
  vtp->par     = par;
 800169a:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 800169c:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <eventHandle+0x4d4>)
 800169e:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 80016a0:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 80016a2:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80016a4:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80016a8:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 80016ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016b0:	d2cb      	bcs.n	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 80016b2:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80016b4:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80016b6:	6899      	ldr	r1, [r3, #8]
 80016b8:	4291      	cmp	r1, r2
 80016ba:	d3fa      	bcc.n	80016b2 <eventHandle+0x372>
 80016bc:	e7c5      	b.n	800164a <eventHandle+0x30a>
                previous_state = SOAK_TURN_CLKWISE;
 80016be:	2302      	movs	r3, #2
 80016c0:	f88b 3000 	strb.w	r3, [fp]
                current_state = SOAK_TURN_ANTI_CLKWISE;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f888 3000 	strb.w	r3, [r8]
 80016ca:	2330      	movs	r3, #48	@ 0x30
 80016cc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80016d0:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 80016d2:	b163      	cbz	r3, 80016ee <eventHandle+0x3ae>
  vtp->dlist.next = NULL;
 80016d4:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 80016d6:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80016e0:	4462      	add	r2, ip
 80016e2:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80016e8:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 80016ea:	6038      	str	r0, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80016ec:	61a1      	str	r1, [r4, #24]
  vtp->par     = par;
 80016ee:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 80016f0:	4b48      	ldr	r3, [pc, #288]	@ (8001814 <eventHandle+0x4d4>)
 80016f2:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 80016f4:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 80016f6:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80016f8:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80016fc:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8001700:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001704:	d2a1      	bcs.n	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 8001706:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001708:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 800170a:	6899      	ldr	r1, [r3, #8]
 800170c:	4291      	cmp	r1, r2
 800170e:	d3fa      	bcc.n	8001706 <eventHandle+0x3c6>
 8001710:	e79b      	b.n	800164a <eventHandle+0x30a>
                previous_state = WASH_TURN_CLKWISE;
 8001712:	2304      	movs	r3, #4
 8001714:	f88b 3000 	strb.w	r3, [fp]
                current_state = WASH_TURN_ANTI_CLKWISE;
 8001718:	2305      	movs	r3, #5
 800171a:	f888 3000 	strb.w	r3, [r8]
 800171e:	2330      	movs	r3, #48	@ 0x30
 8001720:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001724:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 8001726:	b163      	cbz	r3, 8001742 <eventHandle+0x402>
  vtp->dlist.next = NULL;
 8001728:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001734:	4462      	add	r2, ip
 8001736:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 800173c:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 800173e:	6038      	str	r0, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001740:	61a1      	str	r1, [r4, #24]
  vtp->par     = par;
 8001742:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <eventHandle+0x4d4>)
 8001746:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 8001748:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 800174a:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 800174c:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8001750:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8001754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001758:	f4bf af77 	bcs.w	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 800175c:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800175e:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	4291      	cmp	r1, r2
 8001764:	d3fa      	bcc.n	800175c <eventHandle+0x41c>
 8001766:	e770      	b.n	800164a <eventHandle+0x30a>
                previous_state = WASH_TURN_ANTI_CLKWISE;
 8001768:	2305      	movs	r3, #5
 800176a:	f88b 3000 	strb.w	r3, [fp]
                current_state = WASH_TURN_CLKWISE;
 800176e:	2304      	movs	r3, #4
 8001770:	f888 3000 	strb.w	r3, [r8]
 8001774:	2330      	movs	r3, #48	@ 0x30
 8001776:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 800177a:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 800177c:	b163      	cbz	r3, 8001798 <eventHandle+0x458>
  vtp->dlist.next = NULL;
 800177e:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800178a:	4462      	add	r2, ip
 800178c:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001792:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001794:	6038      	str	r0, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001796:	61a1      	str	r1, [r4, #24]
  vtp->par     = par;
 8001798:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <eventHandle+0x4d4>)
 800179c:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 800179e:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 80017a0:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80017a2:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80017a6:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 80017aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017ae:	f4bf af4c 	bcs.w	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 80017b2:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80017b4:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	4291      	cmp	r1, r2
 80017ba:	d3fa      	bcc.n	80017b2 <eventHandle+0x472>
 80017bc:	e745      	b.n	800164a <eventHandle+0x30a>
                previous_state = SOAK_TURN_ANTI_CLKWISE;
 80017be:	2303      	movs	r3, #3
 80017c0:	f88b 3000 	strb.w	r3, [fp]
                current_state = SOAK_TURN_CLKWISE;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f888 3000 	strb.w	r3, [r8]
 80017ca:	2330      	movs	r3, #48	@ 0x30
 80017cc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80017d0:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 80017d2:	b163      	cbz	r3, 80017ee <eventHandle+0x4ae>
  vtp->dlist.next = NULL;
 80017d4:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 80017d6:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80017e0:	4462      	add	r2, ip
 80017e2:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80017e8:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 80017ea:	6038      	str	r0, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80017ec:	61a1      	str	r1, [r4, #24]
  vtp->par     = par;
 80017ee:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <eventHandle+0x4d4>)
 80017f2:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 80017f4:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 80017f6:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80017f8:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80017fc:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8001800:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001804:	f4bf af21 	bcs.w	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 8001808:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800180a:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 800180c:	6899      	ldr	r1, [r3, #8]
 800180e:	4291      	cmp	r1, r2
 8001810:	d3fa      	bcc.n	8001808 <eventHandle+0x4c8>
 8001812:	e71a      	b.n	800164a <eventHandle+0x30a>
 8001814:	080007a1 	.word	0x080007a1
        else if(events & TIMEOUT_SOAK_EVENT) {
 8001818:	0659      	lsls	r1, r3, #25
 800181a:	f140 80d9 	bpl.w	80019d0 <eventHandle+0x690>
            if(current_state == SOAK_TURN_CLKWISE) {
 800181e:	f898 3000 	ldrb.w	r3, [r8]
 8001822:	2b02      	cmp	r3, #2
 8001824:	f000 8100 	beq.w	8001a28 <eventHandle+0x6e8>
            else if(current_state == SOAK_TURN_ANTI_CLKWISE) {
 8001828:	2b03      	cmp	r3, #3
 800182a:	f47f adb3 	bne.w	8001394 <eventHandle+0x54>
                previous_state = SOAK_TURN_ANTI_CLKWISE;
 800182e:	f88b 3000 	strb.w	r3, [fp]
                current_state = WASH_TURN_CLKWISE;
 8001832:	2304      	movs	r3, #4
 8001834:	f888 3000 	strb.w	r3, [r8]
 8001838:	2330      	movs	r3, #48	@ 0x30
 800183a:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 800183e:	f8df c2b4 	ldr.w	ip, [pc, #692]	@ 8001af4 <eventHandle+0x7b4>
 8001842:	f8dc 3000 	ldr.w	r3, [ip]
  if (chVTIsArmedI(vtp)) {
 8001846:	b16b      	cbz	r3, 8001864 <eventHandle+0x524>
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 800184c:	6899      	ldr	r1, [r3, #8]
 800184e:	f8dc e008 	ldr.w	lr, [ip, #8]
 8001852:	4471      	add	r1, lr
 8001854:	6099      	str	r1, [r3, #8]
  dlp->prev->next = dlp->next;
 8001856:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800185a:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 800185c:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 800185e:	f8cc 2000 	str.w	r2, [ip]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001862:	61a0      	str	r0, [r4, #24]
  vtp->par     = par;
 8001864:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 8001866:	f8df c28c 	ldr.w	ip, [pc, #652]	@ 8001af4 <eventHandle+0x7b4>
 800186a:	4ba3      	ldr	r3, [pc, #652]	@ (8001af8 <eventHandle+0x7b8>)
  while (likely(dlp->delta < delta)) {
 800186c:	48a3      	ldr	r0, [pc, #652]	@ (8001afc <eventHandle+0x7bc>)
 800186e:	f8cc 300c 	str.w	r3, [ip, #12]
  dlp = dlhp->next;
 8001872:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 8001874:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8001876:	e9cc 2204 	strd	r2, r2, [ip, #16]
 800187a:	4281      	cmp	r1, r0
 800187c:	4aa0      	ldr	r2, [pc, #640]	@ (8001b00 <eventHandle+0x7c0>)
 800187e:	d804      	bhi.n	800188a <eventHandle+0x54a>
    dlp = dlp->next;
 8001880:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001882:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8001884:	6899      	ldr	r1, [r3, #8]
 8001886:	4291      	cmp	r1, r2
 8001888:	d3fa      	bcc.n	8001880 <eventHandle+0x540>
  dlhp->delta = (sysinterval_t)-1;
 800188a:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 800188e:	f8df c264 	ldr.w	ip, [pc, #612]	@ 8001af4 <eventHandle+0x7b4>
 8001892:	f8cc 2008 	str.w	r2, [ip, #8]
  dlp->delta -= delta;
 8001896:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 8001898:	f8cc 3000 	str.w	r3, [ip]
  dlp->delta -= delta;
 800189c:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	f8cc 2004 	str.w	r2, [ip, #4]
  dlp->prev->next = dlp;
 80018a4:	f8c2 c000 	str.w	ip, [r2]
  dlhp->prev      = dlp;
 80018a8:	e9c3 c101 	strd	ip, r1, [r3, #4]
 80018ac:	2100      	movs	r1, #0
  dlhp->delta = (sysinterval_t)-1;
 80018ae:	61a0      	str	r0, [r4, #24]
 80018b0:	f381 8811 	msr	BASEPRI, r1
 80018b4:	2330      	movs	r3, #48	@ 0x30
 80018b6:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 80018ba:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 80018bc:	b14b      	cbz	r3, 80018d2 <eventHandle+0x592>
  vtp->dlist.next->delta += vtp->dlist.delta;
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80018c4:	4462      	add	r2, ip
 80018c6:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80018cc:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 80018ce:	6039      	str	r1, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80018d0:	61a0      	str	r0, [r4, #24]
  vtp->par     = par;
 80018d2:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 80018d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001b04 <eventHandle+0x7c4>)
 80018d6:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 80018d8:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 80018da:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80018dc:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80018e0:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 80018e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018e8:	f4bf aeaf 	bcs.w	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 80018ec:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80018ee:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80018f0:	6899      	ldr	r1, [r3, #8]
 80018f2:	4291      	cmp	r1, r2
 80018f4:	f4bf aea9 	bcs.w	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 80018f8:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80018fa:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80018fc:	6899      	ldr	r1, [r3, #8]
 80018fe:	4291      	cmp	r1, r2
 8001900:	d3f4      	bcc.n	80018ec <eventHandle+0x5ac>
 8001902:	e6a2      	b.n	800164a <eventHandle+0x30a>
                previous_state = SOAK_WATER_IN;
 8001904:	f88b 3000 	strb.w	r3, [fp]
                current_state = SOAK_TURN_CLKWISE;
 8001908:	2302      	movs	r3, #2
 800190a:	f888 3000 	strb.w	r3, [r8]
 800190e:	f385 8811 	msr	BASEPRI, r5
  return (bool)(vtp->dlist.next != NULL);
 8001912:	f8da 3000 	ldr.w	r3, [sl]
  if (chVTIsArmedI(vtp)) {
 8001916:	b16b      	cbz	r3, 8001934 <eventHandle+0x5f4>
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 800191c:	6899      	ldr	r1, [r3, #8]
 800191e:	f8da c008 	ldr.w	ip, [sl, #8]
 8001922:	4461      	add	r1, ip
 8001924:	6099      	str	r1, [r3, #8]
  dlp->prev->next = dlp->next;
 8001926:	f8da 1004 	ldr.w	r1, [sl, #4]
 800192a:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 800192c:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 800192e:	f8ca 2000 	str.w	r2, [sl]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001932:	61a0      	str	r0, [r4, #24]
  while (likely(dlp->delta < delta)) {
 8001934:	f644 621f 	movw	r2, #19999	@ 0x4e1f
  vtp->func    = vtfunc;
 8001938:	4b73      	ldr	r3, [pc, #460]	@ (8001b08 <eventHandle+0x7c8>)
  vtp->par     = par;
 800193a:	f8ca 9010 	str.w	r9, [sl, #16]
  vtp->func    = vtfunc;
 800193e:	f8ca 300c 	str.w	r3, [sl, #12]
  dlp = dlhp->next;
 8001942:	6923      	ldr	r3, [r4, #16]
  vtp->reload  = (sysinterval_t)0;
 8001944:	f8ca 9014 	str.w	r9, [sl, #20]
  while (likely(dlp->delta < delta)) {
 8001948:	6899      	ldr	r1, [r3, #8]
 800194a:	4291      	cmp	r1, r2
 800194c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001950:	d804      	bhi.n	800195c <eventHandle+0x61c>
    dlp = dlp->next;
 8001952:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001954:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	4291      	cmp	r1, r2
 800195a:	d3fa      	bcc.n	8001952 <eventHandle+0x612>
  dlhp->delta = (sysinterval_t)-1;
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 8001960:	f8ca 2008 	str.w	r2, [sl, #8]
  dlp->delta -= delta;
 8001964:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 8001966:	f8ca 3000 	str.w	r3, [sl]
  dlp->delta -= delta;
 800196a:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	f8ca 2004 	str.w	r2, [sl, #4]
  dlp->prev->next = dlp;
 8001972:	f8c2 a000 	str.w	sl, [r2]
  dlhp->prev      = dlp;
 8001976:	e9c3 a101 	strd	sl, r1, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 800197a:	61a0      	str	r0, [r4, #24]
 800197c:	f386 8811 	msr	BASEPRI, r6
 8001980:	f385 8811 	msr	BASEPRI, r5
  return (bool)(vtp->dlist.next != NULL);
 8001984:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 8001986:	b14b      	cbz	r3, 800199c <eventHandle+0x65c>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	440a      	add	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001994:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001996:	f8c7 9000 	str.w	r9, [r7]
  vtlp->dlist.delta = (sysinterval_t)-1;
 800199a:	61a0      	str	r0, [r4, #24]
  vtp->func    = vtfunc;
 800199c:	4b59      	ldr	r3, [pc, #356]	@ (8001b04 <eventHandle+0x7c4>)
  while (likely(dlp->delta < delta)) {
 800199e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019a2:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 80019a4:	6923      	ldr	r3, [r4, #16]
  vtp->par     = par;
 80019a6:	f8c7 9010 	str.w	r9, [r7, #16]
  while (likely(dlp->delta < delta)) {
 80019aa:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 80019ac:	f8c7 9014 	str.w	r9, [r7, #20]
 80019b0:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 80019b4:	f4bf ad78 	bcs.w	80014a8 <eventHandle+0x168>
    dlp = dlp->next;
 80019b8:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80019ba:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	4291      	cmp	r1, r2
 80019c0:	d3fa      	bcc.n	80019b8 <eventHandle+0x678>
 80019c2:	e571      	b.n	80014a8 <eventHandle+0x168>
                previous_state = WASH_WATER_OUT;
 80019c4:	f88b 3000 	strb.w	r3, [fp]
                current_state = RINSE_WATER_IN;
 80019c8:	2307      	movs	r3, #7
 80019ca:	f888 3000 	strb.w	r3, [r8]
 80019ce:	e4e1      	b.n	8001394 <eventHandle+0x54>
        else if(events & TIMEOUT_WASH_EVENT) {
 80019d0:	0618      	lsls	r0, r3, #24
 80019d2:	d50c      	bpl.n	80019ee <eventHandle+0x6ae>
            if(current_state == WASH_TURN_CLKWISE) {
 80019d4:	f898 3000 	ldrb.w	r3, [r8]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d002      	beq.n	80019e2 <eventHandle+0x6a2>
            else if(current_state == WASH_TURN_ANTI_CLKWISE) {
 80019dc:	2b05      	cmp	r3, #5
 80019de:	f47f acd9 	bne.w	8001394 <eventHandle+0x54>
                previous_state = WASH_TURN_ANTI_CLKWISE;
 80019e2:	f88b 3000 	strb.w	r3, [fp]
                current_state = WASH_WATER_OUT;
 80019e6:	2306      	movs	r3, #6
 80019e8:	f888 3000 	strb.w	r3, [r8]
 80019ec:	e4d2      	b.n	8001394 <eventHandle+0x54>
        else if(events & TIMEOUT_RINSE_EVENT) {
 80019ee:	f413 7180 	ands.w	r1, r3, #256	@ 0x100
 80019f2:	d00c      	beq.n	8001a0e <eventHandle+0x6ce>
            if(current_state == RINSE_TURN_CLKWISE) {
 80019f4:	f898 3000 	ldrb.w	r3, [r8]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d002      	beq.n	8001a02 <eventHandle+0x6c2>
            else if(current_state == RINSE_TURN_ANTI_CLKWISE) {
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	f47f acc9 	bne.w	8001394 <eventHandle+0x54>
                previous_state = RINSE_TURN_ANTI_CLKWISE;
 8001a02:	f88b 3000 	strb.w	r3, [fp]
                current_state = RINSE_WATER_OUT;
 8001a06:	230a      	movs	r3, #10
 8001a08:	f888 3000 	strb.w	r3, [r8]
 8001a0c:	e4c2      	b.n	8001394 <eventHandle+0x54>
        else if(events & TIMEOUT_CENTRIFUGE_EVENT) {
 8001a0e:	f413 7200 	ands.w	r2, r3, #512	@ 0x200
 8001a12:	d07b      	beq.n	8001b0c <eventHandle+0x7cc>
            if(current_state == CENTRIFUGE) {
 8001a14:	f898 3000 	ldrb.w	r3, [r8]
 8001a18:	2b0b      	cmp	r3, #11
 8001a1a:	f47f acbb 	bne.w	8001394 <eventHandle+0x54>
                previous_state = CENTRIFUGE;
 8001a1e:	f88b 3000 	strb.w	r3, [fp]
                current_state = IDLE;
 8001a22:	f888 1000 	strb.w	r1, [r8]
 8001a26:	e4b5      	b.n	8001394 <eventHandle+0x54>
                previous_state = SOAK_TURN_CLKWISE;
 8001a28:	f88b 3000 	strb.w	r3, [fp]
                current_state = WASH_TURN_CLKWISE;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	f888 3000 	strb.w	r3, [r8]
 8001a32:	2330      	movs	r3, #48	@ 0x30
 8001a34:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001a38:	f8df c0b8 	ldr.w	ip, [pc, #184]	@ 8001af4 <eventHandle+0x7b4>
 8001a3c:	f8dc 3000 	ldr.w	r3, [ip]
  if (chVTIsArmedI(vtp)) {
 8001a40:	b16b      	cbz	r3, 8001a5e <eventHandle+0x71e>
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001a42:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	f8dc e008 	ldr.w	lr, [ip, #8]
 8001a4c:	4471      	add	r1, lr
 8001a4e:	6099      	str	r1, [r3, #8]
  dlp->prev->next = dlp->next;
 8001a50:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8001a54:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8001a56:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8001a58:	f8cc 2000 	str.w	r2, [ip]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001a5c:	61a0      	str	r0, [r4, #24]
  vtp->par     = par;
 8001a5e:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 8001a60:	f8df c090 	ldr.w	ip, [pc, #144]	@ 8001af4 <eventHandle+0x7b4>
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <eventHandle+0x7b8>)
  while (likely(dlp->delta < delta)) {
 8001a66:	4825      	ldr	r0, [pc, #148]	@ (8001afc <eventHandle+0x7bc>)
 8001a68:	f8cc 300c 	str.w	r3, [ip, #12]
  dlp = dlhp->next;
 8001a6c:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 8001a6e:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8001a70:	e9cc 2204 	strd	r2, r2, [ip, #16]
 8001a74:	4281      	cmp	r1, r0
 8001a76:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <eventHandle+0x7c0>)
 8001a78:	d804      	bhi.n	8001a84 <eventHandle+0x744>
    dlp = dlp->next;
 8001a7a:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001a7c:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	4291      	cmp	r1, r2
 8001a82:	d3fa      	bcc.n	8001a7a <eventHandle+0x73a>
  dlhp->delta = (sysinterval_t)-1;
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
  dlp->delta      = delta;
 8001a88:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8001af4 <eventHandle+0x7b4>
 8001a8c:	f8cc 2008 	str.w	r2, [ip, #8]
  dlp->delta -= delta;
 8001a90:	6899      	ldr	r1, [r3, #8]
  dlp->next       = dlhp;
 8001a92:	f8cc 3000 	str.w	r3, [ip]
  dlp->delta -= delta;
 8001a96:	1a89      	subs	r1, r1, r2
  dlp->prev       = dlp->next->prev;
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	f8cc 2004 	str.w	r2, [ip, #4]
  dlp->prev->next = dlp;
 8001a9e:	f8c2 c000 	str.w	ip, [r2]
  dlhp->prev      = dlp;
 8001aa2:	e9c3 c101 	strd	ip, r1, [r3, #4]
 8001aa6:	2100      	movs	r1, #0
  dlhp->delta = (sysinterval_t)-1;
 8001aa8:	61a0      	str	r0, [r4, #24]
 8001aaa:	f381 8811 	msr	BASEPRI, r1
 8001aae:	2330      	movs	r3, #48	@ 0x30
 8001ab0:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 8001ab6:	b14b      	cbz	r3, 8001acc <eventHandle+0x78c>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001abe:	4462      	add	r2, ip
 8001ac0:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001ac6:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001ac8:	6039      	str	r1, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001aca:	61a0      	str	r0, [r4, #24]
  vtp->par     = par;
 8001acc:	2200      	movs	r2, #0
  vtp->func    = vtfunc;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <eventHandle+0x7c4>)
 8001ad0:	60fb      	str	r3, [r7, #12]
  dlp = dlhp->next;
 8001ad2:	6923      	ldr	r3, [r4, #16]
  while (likely(dlp->delta < delta)) {
 8001ad4:	6899      	ldr	r1, [r3, #8]
  vtp->reload  = (sysinterval_t)0;
 8001ad6:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8001ada:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8001ade:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ae2:	f4bf adb2 	bcs.w	800164a <eventHandle+0x30a>
    dlp = dlp->next;
 8001ae6:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8001ae8:	1a52      	subs	r2, r2, r1
  while (likely(dlp->delta < delta)) {
 8001aea:	6899      	ldr	r1, [r3, #8]
 8001aec:	4291      	cmp	r1, r2
 8001aee:	d3fa      	bcc.n	8001ae6 <eventHandle+0x7a6>
 8001af0:	e5ab      	b.n	800164a <eventHandle+0x30a>
 8001af2:	bf00      	nop
 8001af4:	20001bbc 	.word	0x20001bbc
 8001af8:	080007e1 	.word	0x080007e1
 8001afc:	000176ff 	.word	0x000176ff
 8001b00:	00017700 	.word	0x00017700
 8001b04:	080007a1 	.word	0x080007a1
 8001b08:	080007c1 	.word	0x080007c1
        else if(events & LID_OPEN_EVENT) {
 8001b0c:	0719      	lsls	r1, r3, #28
 8001b0e:	d546      	bpl.n	8001b9e <eventHandle+0x85e>
            current_state = OPEN_LID;
 8001b10:	210c      	movs	r1, #12
            previous_state = current_state;
 8001b12:	f898 3000 	ldrb.w	r3, [r8]
            current_state = OPEN_LID;
 8001b16:	f888 1000 	strb.w	r1, [r8]
            if(previous_state == SOAK_TURN_CLKWISE || previous_state == SOAK_TURN_ANTI_CLKWISE) {
 8001b1a:	1e99      	subs	r1, r3, #2
 8001b1c:	2901      	cmp	r1, #1
            previous_state = current_state;
 8001b1e:	f88b 3000 	strb.w	r3, [fp]
            if(previous_state == SOAK_TURN_CLKWISE || previous_state == SOAK_TURN_ANTI_CLKWISE) {
 8001b22:	d95f      	bls.n	8001be4 <eventHandle+0x8a4>
            else if(previous_state == WASH_TURN_CLKWISE || previous_state == WASH_TURN_ANTI_CLKWISE) {
 8001b24:	1f19      	subs	r1, r3, #4
 8001b26:	2901      	cmp	r1, #1
 8001b28:	f240 80b7 	bls.w	8001c9a <eventHandle+0x95a>
            else if(previous_state == RINSE_TURN_CLKWISE || previous_state == RINSE_TURN_ANTI_CLKWISE) {
 8001b2c:	3b08      	subs	r3, #8
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	f63f ac30 	bhi.w	8001394 <eventHandle+0x54>
        if (!vt_rinse_paused) {
 8001b34:	4b96      	ldr	r3, [pc, #600]	@ (8001d90 <eventHandle+0xa50>)
 8001b36:	7819      	ldrb	r1, [r3, #0]
 8001b38:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 8001b3c:	2900      	cmp	r1, #0
 8001b3e:	f000 80c5 	beq.w	8001ccc <eventHandle+0x98c>
        if (!vt_motor_paused) {
 8001b42:	4b94      	ldr	r3, [pc, #592]	@ (8001d94 <eventHandle+0xa54>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f47f ac24 	bne.w	8001394 <eventHandle+0x54>
  dlp = vtlp->dlist.next;
 8001b4c:	6923      	ldr	r3, [r4, #16]
 8001b4e:	e004      	b.n	8001b5a <eventHandle+0x81a>
    dlp = dlp->next;
 8001b50:	681b      	ldr	r3, [r3, #0]
  } while (dlp != &vtlp->dlist);
 8001b52:	4991      	ldr	r1, [pc, #580]	@ (8001d98 <eventHandle+0xa58>)
 8001b54:	428b      	cmp	r3, r1
 8001b56:	f000 80b6 	beq.w	8001cc6 <eventHandle+0x986>
    delta += dlp->delta;
 8001b5a:	6899      	ldr	r1, [r3, #8]
    if (dlp == &vtp->dlist) {
 8001b5c:	42bb      	cmp	r3, r7
    delta += dlp->delta;
 8001b5e:	440a      	add	r2, r1
    if (dlp == &vtp->dlist) {
 8001b60:	d1f6      	bne.n	8001b50 <eventHandle+0x810>
            remainingTime_motor = chVTGetRemainingIntervalI(&vt_motor);
 8001b62:	4b8e      	ldr	r3, [pc, #568]	@ (8001d9c <eventHandle+0xa5c>)
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	2330      	movs	r3, #48	@ 0x30
 8001b68:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
  if (chVTIsArmedI(vtp)) {
 8001b6e:	b163      	cbz	r3, 8001b8a <eventHandle+0x84a>
  vtp->dlist.next = NULL;
 8001b70:	2000      	movs	r0, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001b72:	f04f 31ff 	mov.w	r1, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001b7c:	4462      	add	r2, ip
 8001b7e:	609a      	str	r2, [r3, #8]
  dlp->prev->next = dlp->next;
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001b84:	605a      	str	r2, [r3, #4]
  vtp->dlist.next = NULL;
 8001b86:	6038      	str	r0, [r7, #0]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001b88:	61a1      	str	r1, [r4, #24]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f383 8811 	msr	BASEPRI, r3
            vt_motor_paused = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	4a80      	ldr	r2, [pc, #512]	@ (8001d94 <eventHandle+0xa54>)
 8001b94:	7013      	strb	r3, [r2, #0]
 8001b96:	f7ff bbfd 	b.w	8001394 <eventHandle+0x54>
  while (likely(dlp->delta < delta)) {
 8001b9a:	4a81      	ldr	r2, [pc, #516]	@ (8001da0 <eventHandle+0xa60>)
 8001b9c:	e450      	b.n	8001440 <eventHandle+0x100>
        else if(events & LID_CLOSE_EVENT) {
 8001b9e:	06db      	lsls	r3, r3, #27
 8001ba0:	f57f abf8 	bpl.w	8001394 <eventHandle+0x54>
            current_state = previous_state;
 8001ba4:	f89b 3000 	ldrb.w	r3, [fp]
 8001ba8:	f888 3000 	strb.w	r3, [r8]
            if(previous_state == SOAK_TURN_CLKWISE || previous_state == SOAK_TURN_ANTI_CLKWISE) {
 8001bac:	3b02      	subs	r3, #2
 8001bae:	2b09      	cmp	r3, #9
 8001bb0:	f63f abf0 	bhi.w	8001394 <eventHandle+0x54>
 8001bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <eventHandle+0x87c>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001c1f 	.word	0x08001c1f
 8001bc8:	08001c1f 	.word	0x08001c1f
 8001bcc:	08001395 	.word	0x08001395
 8001bd0:	08001395 	.word	0x08001395
 8001bd4:	08001c0f 	.word	0x08001c0f
 8001bd8:	08001c0f 	.word	0x08001c0f
 8001bdc:	08001395 	.word	0x08001395
 8001be0:	08001c91 	.word	0x08001c91
        if (!vt_soak_paused) {
 8001be4:	4b6f      	ldr	r3, [pc, #444]	@ (8001da4 <eventHandle+0xa64>)
 8001be6:	7819      	ldrb	r1, [r3, #0]
 8001be8:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 8001bec:	b339      	cbz	r1, 8001c3e <eventHandle+0x8fe>
        if (!vt_motor_paused) {
 8001bee:	4b69      	ldr	r3, [pc, #420]	@ (8001d94 <eventHandle+0xa54>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f abce 	bne.w	8001394 <eventHandle+0x54>
  dlp = vtlp->dlist.next;
 8001bf8:	6923      	ldr	r3, [r4, #16]
 8001bfa:	e003      	b.n	8001c04 <eventHandle+0x8c4>
    dlp = dlp->next;
 8001bfc:	681b      	ldr	r3, [r3, #0]
  } while (dlp != &vtlp->dlist);
 8001bfe:	4966      	ldr	r1, [pc, #408]	@ (8001d98 <eventHandle+0xa58>)
 8001c00:	428b      	cmp	r3, r1
 8001c02:	d060      	beq.n	8001cc6 <eventHandle+0x986>
    delta += dlp->delta;
 8001c04:	6899      	ldr	r1, [r3, #8]
    if (dlp == &vtp->dlist) {
 8001c06:	42bb      	cmp	r3, r7
    delta += dlp->delta;
 8001c08:	440a      	add	r2, r1
    if (dlp == &vtp->dlist) {
 8001c0a:	d1f7      	bne.n	8001bfc <eventHandle+0x8bc>
 8001c0c:	e7a9      	b.n	8001b62 <eventHandle+0x822>
                resumeTimer(RINSE_TIMER);
 8001c0e:	2004      	movs	r0, #4
 8001c10:	f7fe fc56 	bl	80004c0 <resumeTimer>
                resumeTimer(MOTOR_TIMER);
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7fe fc53 	bl	80004c0 <resumeTimer>
 8001c1a:	f7ff bbbb 	b.w	8001394 <eventHandle+0x54>
                resumeTimer(WASH_TIMER);
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f7fe fc4e 	bl	80004c0 <resumeTimer>
                resumeTimer(MOTOR_TIMER);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7fe fc4b 	bl	80004c0 <resumeTimer>
 8001c2a:	f7ff bbb3 	b.w	8001394 <eventHandle+0x54>
                resumeTimer(SOAK_TIMER);
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f7fe fc46 	bl	80004c0 <resumeTimer>
                resumeTimer(MOTOR_TIMER);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7fe fc43 	bl	80004c0 <resumeTimer>
 8001c3a:	f7ff bbab 	b.w	8001394 <eventHandle+0x54>
  dlp = vtlp->dlist.next;
 8001c3e:	6921      	ldr	r1, [r4, #16]
 8001c40:	e003      	b.n	8001c4a <eventHandle+0x90a>
    dlp = dlp->next;
 8001c42:	6809      	ldr	r1, [r1, #0]
  } while (dlp != &vtlp->dlist);
 8001c44:	4854      	ldr	r0, [pc, #336]	@ (8001d98 <eventHandle+0xa58>)
 8001c46:	4281      	cmp	r1, r0
 8001c48:	d06c      	beq.n	8001d24 <eventHandle+0x9e4>
    delta += dlp->delta;
 8001c4a:	6888      	ldr	r0, [r1, #8]
    if (dlp == &vtp->dlist) {
 8001c4c:	4551      	cmp	r1, sl
    delta += dlp->delta;
 8001c4e:	4403      	add	r3, r0
    if (dlp == &vtp->dlist) {
 8001c50:	d1f7      	bne.n	8001c42 <eventHandle+0x902>
            remainingTime_soak = chVTGetRemainingIntervalI(&vt_soak);
 8001c52:	4955      	ldr	r1, [pc, #340]	@ (8001da8 <eventHandle+0xa68>)
 8001c54:	600b      	str	r3, [r1, #0]
 8001c56:	2330      	movs	r3, #48	@ 0x30
 8001c58:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001c5c:	f8da 3000 	ldr.w	r3, [sl]
  if (chVTIsArmedI(vtp)) {
 8001c60:	b17b      	cbz	r3, 8001c82 <eventHandle+0x942>
  vtp->dlist.next = NULL;
 8001c62:	f04f 0e00 	mov.w	lr, #0
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	f8da c008 	ldr.w	ip, [sl, #8]
 8001c70:	4461      	add	r1, ip
 8001c72:	6099      	str	r1, [r3, #8]
  dlp->prev->next = dlp->next;
 8001c74:	f8da 1004 	ldr.w	r1, [sl, #4]
 8001c78:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8001c7a:	6059      	str	r1, [r3, #4]
  vtp->dlist.next = NULL;
 8001c7c:	f8ca e000 	str.w	lr, [sl]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001c80:	61a0      	str	r0, [r4, #24]
 8001c82:	2300      	movs	r3, #0
 8001c84:	f383 8811 	msr	BASEPRI, r3
            vt_soak_paused = 1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	4946      	ldr	r1, [pc, #280]	@ (8001da4 <eventHandle+0xa64>)
 8001c8c:	700b      	strb	r3, [r1, #0]
 8001c8e:	e7ae      	b.n	8001bee <eventHandle+0x8ae>
                resumeTimer(CENTRIFUGE_TIMER);
 8001c90:	2005      	movs	r0, #5
 8001c92:	f7fe fc15 	bl	80004c0 <resumeTimer>
 8001c96:	f7ff bb7d 	b.w	8001394 <eventHandle+0x54>
        if (!vt_wash_paused) {
 8001c9a:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <eventHandle+0xa6c>)
 8001c9c:	7819      	ldrb	r1, [r3, #0]
 8001c9e:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 8001ca2:	2900      	cmp	r1, #0
 8001ca4:	d041      	beq.n	8001d2a <eventHandle+0x9ea>
        if (!vt_motor_paused) {
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8001d94 <eventHandle+0xa54>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f47f ab72 	bne.w	8001394 <eventHandle+0x54>
  dlp = vtlp->dlist.next;
 8001cb0:	6923      	ldr	r3, [r4, #16]
 8001cb2:	e003      	b.n	8001cbc <eventHandle+0x97c>
    dlp = dlp->next;
 8001cb4:	681b      	ldr	r3, [r3, #0]
  } while (dlp != &vtlp->dlist);
 8001cb6:	4938      	ldr	r1, [pc, #224]	@ (8001d98 <eventHandle+0xa58>)
 8001cb8:	428b      	cmp	r3, r1
 8001cba:	d004      	beq.n	8001cc6 <eventHandle+0x986>
    delta += dlp->delta;
 8001cbc:	6899      	ldr	r1, [r3, #8]
    if (dlp == &vtp->dlist) {
 8001cbe:	42bb      	cmp	r3, r7
    delta += dlp->delta;
 8001cc0:	440a      	add	r2, r1
    if (dlp == &vtp->dlist) {
 8001cc2:	d1f7      	bne.n	8001cb4 <eventHandle+0x974>
 8001cc4:	e74d      	b.n	8001b62 <eventHandle+0x822>
  return (sysinterval_t)-1;
 8001cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cca:	e74a      	b.n	8001b62 <eventHandle+0x822>
  dlp = vtlp->dlist.next;
 8001ccc:	6921      	ldr	r1, [r4, #16]
 8001cce:	e003      	b.n	8001cd8 <eventHandle+0x998>
    dlp = dlp->next;
 8001cd0:	6809      	ldr	r1, [r1, #0]
  } while (dlp != &vtlp->dlist);
 8001cd2:	4831      	ldr	r0, [pc, #196]	@ (8001d98 <eventHandle+0xa58>)
 8001cd4:	4281      	cmp	r1, r0
 8001cd6:	d057      	beq.n	8001d88 <eventHandle+0xa48>
    delta += dlp->delta;
 8001cd8:	6888      	ldr	r0, [r1, #8]
 8001cda:	4403      	add	r3, r0
    if (dlp == &vtp->dlist) {
 8001cdc:	4834      	ldr	r0, [pc, #208]	@ (8001db0 <eventHandle+0xa70>)
 8001cde:	4281      	cmp	r1, r0
 8001ce0:	d1f6      	bne.n	8001cd0 <eventHandle+0x990>
            remainingTime_rinse = chVTGetRemainingIntervalI(&vt_rinse);
 8001ce2:	4934      	ldr	r1, [pc, #208]	@ (8001db4 <eventHandle+0xa74>)
 8001ce4:	600b      	str	r3, [r1, #0]
 8001ce6:	2330      	movs	r3, #48	@ 0x30
 8001ce8:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001cec:	f8df c0c0 	ldr.w	ip, [pc, #192]	@ 8001db0 <eventHandle+0xa70>
 8001cf0:	f8dc 3000 	ldr.w	r3, [ip]
  if (chVTIsArmedI(vtp)) {
 8001cf4:	b17b      	cbz	r3, 8001d16 <eventHandle+0x9d6>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001cf6:	6898      	ldr	r0, [r3, #8]
 8001cf8:	f8dc 1008 	ldr.w	r1, [ip, #8]
  vtp->dlist.next = NULL;
 8001cfc:	f04f 0e00 	mov.w	lr, #0
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001d00:	4408      	add	r0, r1
  dlp->prev->next = dlp->next;
 8001d02:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8001d06:	6098      	str	r0, [r3, #8]
 8001d08:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8001d0a:	6059      	str	r1, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
  vtp->dlist.next = NULL;
 8001d10:	f8cc e000 	str.w	lr, [ip]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001d14:	61a3      	str	r3, [r4, #24]
 8001d16:	2300      	movs	r3, #0
 8001d18:	f383 8811 	msr	BASEPRI, r3
            vt_rinse_paused = 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	491c      	ldr	r1, [pc, #112]	@ (8001d90 <eventHandle+0xa50>)
 8001d20:	700b      	strb	r3, [r1, #0]
 8001d22:	e70e      	b.n	8001b42 <eventHandle+0x802>
  return (sysinterval_t)-1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e793      	b.n	8001c52 <eventHandle+0x912>
  dlp = vtlp->dlist.next;
 8001d2a:	6921      	ldr	r1, [r4, #16]
 8001d2c:	e003      	b.n	8001d36 <eventHandle+0x9f6>
    dlp = dlp->next;
 8001d2e:	6809      	ldr	r1, [r1, #0]
  } while (dlp != &vtlp->dlist);
 8001d30:	4819      	ldr	r0, [pc, #100]	@ (8001d98 <eventHandle+0xa58>)
 8001d32:	4281      	cmp	r1, r0
 8001d34:	d025      	beq.n	8001d82 <eventHandle+0xa42>
    delta += dlp->delta;
 8001d36:	6888      	ldr	r0, [r1, #8]
 8001d38:	4403      	add	r3, r0
    if (dlp == &vtp->dlist) {
 8001d3a:	481f      	ldr	r0, [pc, #124]	@ (8001db8 <eventHandle+0xa78>)
 8001d3c:	4281      	cmp	r1, r0
 8001d3e:	d1f6      	bne.n	8001d2e <eventHandle+0x9ee>
            remainingTime_wash = chVTGetRemainingIntervalI(&vt_wash);
 8001d40:	491e      	ldr	r1, [pc, #120]	@ (8001dbc <eventHandle+0xa7c>)
 8001d42:	600b      	str	r3, [r1, #0]
 8001d44:	2330      	movs	r3, #48	@ 0x30
 8001d46:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->dlist.next != NULL);
 8001d4a:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8001db8 <eventHandle+0xa78>
 8001d4e:	f8dc 3000 	ldr.w	r3, [ip]
  if (chVTIsArmedI(vtp)) {
 8001d52:	b17b      	cbz	r3, 8001d74 <eventHandle+0xa34>
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001d54:	6898      	ldr	r0, [r3, #8]
 8001d56:	f8dc 1008 	ldr.w	r1, [ip, #8]
  vtp->dlist.next = NULL;
 8001d5a:	f04f 0e00 	mov.w	lr, #0
  vtp->dlist.next->delta += vtp->dlist.delta;
 8001d5e:	4408      	add	r0, r1
  dlp->prev->next = dlp->next;
 8001d60:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8001d64:	6098      	str	r0, [r3, #8]
 8001d66:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 8001d68:	6059      	str	r1, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
  vtp->dlist.next = NULL;
 8001d6e:	f8cc e000 	str.w	lr, [ip]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001d72:	61a3      	str	r3, [r4, #24]
 8001d74:	2300      	movs	r3, #0
 8001d76:	f383 8811 	msr	BASEPRI, r3
            vt_wash_paused = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	490b      	ldr	r1, [pc, #44]	@ (8001dac <eventHandle+0xa6c>)
 8001d7e:	700b      	strb	r3, [r1, #0]
 8001d80:	e791      	b.n	8001ca6 <eventHandle+0x966>
  return (sysinterval_t)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e7db      	b.n	8001d40 <eventHandle+0xa00>
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	e7a9      	b.n	8001ce2 <eventHandle+0x9a2>
 8001d8e:	bf00      	nop
 8001d90:	20001bb8 	.word	0x20001bb8
 8001d94:	20001c18 	.word	0x20001c18
 8001d98:	20001c48 	.word	0x20001c48
 8001d9c:	20001c14 	.word	0x20001c14
 8001da0:	0001d4c0 	.word	0x0001d4c0
 8001da4:	20001bf8 	.word	0x20001bf8
 8001da8:	20001bf4 	.word	0x20001bf4
 8001dac:	20001bd8 	.word	0x20001bd8
 8001db0:	20001b9c 	.word	0x20001b9c
 8001db4:	20001bb4 	.word	0x20001bb4
 8001db8:	20001bbc 	.word	0x20001bbc
 8001dbc:	20001bd4 	.word	0x20001bd4

08001dc0 <chThdExit>:
 8001dc0:	2330      	movs	r3, #48	@ 0x30
void chThdExit(msg_t msg) {
 8001dc2:	b570      	push	{r4, r5, r6, lr}
 8001dc4:	f383 8811 	msr	BASEPRI, r3
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <chThdExit+0x84>)
 8001dca:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 8001dcc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8001dce:	f101 0c2c 	add.w	ip, r1, #44	@ 0x2c
 8001dd2:	4562      	cmp	r2, ip
  tp->state = CH_STATE_READY;
 8001dd4:	bf18      	it	ne
 8001dd6:	f04f 0e00 	movne.w	lr, #0
  currtp->u.exitcode = msg;
 8001dda:	6288      	str	r0, [r1, #40]	@ 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8001ddc:	d113      	bne.n	8001e06 <chThdExit+0x46>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8001dde:	f891 2026 	ldrb.w	r2, [r1, #38]	@ 0x26
 8001de2:	b32a      	cbz	r2, 8001e30 <chThdExit+0x70>
  otp->state = newstate;
 8001de4:	220f      	movs	r2, #15
  ntp->state = CH_STATE_CURRENT;
 8001de6:	f04f 0c01 	mov.w	ip, #1
  ch_priority_queue_t *p = pqp->next;
 8001dea:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8001dec:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 8001df0:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8001df2:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001df4:	f880 c024 	strb.w	ip, [r0, #36]	@ 0x24
}
 8001df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pqp->next       = p->next;
 8001dfc:	601a      	str	r2, [r3, #0]
  __instance_set_currthread(oip, ntp);
 8001dfe:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8001e00:	f7fe ba1e 	b.w	8000240 <__port_switch>
 8001e04:	4622      	mov	r2, r4
  lp->next = p->next;
 8001e06:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001e08:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001e0a:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 8001e0c:	62cc      	str	r4, [r1, #44]	@ 0x2c
  tp->state = CH_STATE_READY;
 8001e0e:	f882 e024 	strb.w	lr, [r2, #36]	@ 0x24
    pqp = pqp->next;
 8001e12:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001e14:	6885      	ldr	r5, [r0, #8]
 8001e16:	42b5      	cmp	r5, r6
 8001e18:	d2fb      	bcs.n	8001e12 <chThdExit+0x52>
  p->prev       = pqp->prev;
 8001e1a:	6845      	ldr	r5, [r0, #4]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8001e1c:	4564      	cmp	r4, ip
  p->next       = pqp;
 8001e1e:	6010      	str	r0, [r2, #0]
  p->prev       = pqp->prev;
 8001e20:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 8001e22:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8001e24:	6042      	str	r2, [r0, #4]
 8001e26:	d1ed      	bne.n	8001e04 <chThdExit+0x44>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8001e28:	f891 2026 	ldrb.w	r2, [r1, #38]	@ 0x26
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	d1d9      	bne.n	8001de4 <chThdExit+0x24>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 8001e30:	f891 2025 	ldrb.w	r2, [r1, #37]	@ 0x25
 8001e34:	0792      	lsls	r2, r2, #30
 8001e36:	d1d5      	bne.n	8001de4 <chThdExit+0x24>
  p->prev->next = p->next;
 8001e38:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8001e3c:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 8001e3e:	6050      	str	r0, [r2, #4]
  return p;
 8001e40:	e7d0      	b.n	8001de4 <chThdExit+0x24>
 8001e42:	bf00      	nop
 8001e44:	20001c38 	.word	0x20001c38
	...

08001e50 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001e50:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8001e54:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001e56:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f383 8811 	msr	BASEPRI, r3
}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
	...

08001e70 <main>:
  rccResetAPB1(0xFFFFFFFF);
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	2200      	movs	r2, #0
        }
    }
}
static THD_WORKING_AREA(wa_stateMachine, 2048);

int main(void) {
 8001e76:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001e7a:	49c8      	ldr	r1, [pc, #800]	@ (800219c <main+0x32c>)
 8001e7c:	b089      	sub	sp, #36	@ 0x24
 8001e7e:	690c      	ldr	r4, [r1, #16]
 8001e80:	610b      	str	r3, [r1, #16]
 8001e82:	690d      	ldr	r5, [r1, #16]
 8001e84:	610a      	str	r2, [r1, #16]
 8001e86:	690d      	ldr	r5, [r1, #16]
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e88:	f44f 7480 	mov.w	r4, #256	@ 0x100
  rccResetAPB2(0xFFFFFFFF);
 8001e8c:	68cd      	ldr	r5, [r1, #12]
 8001e8e:	f8df 8310 	ldr.w	r8, [pc, #784]	@ 80021a0 <main+0x330>
 8001e92:	60cb      	str	r3, [r1, #12]
 8001e94:	68cb      	ldr	r3, [r1, #12]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001e96:	2060      	movs	r0, #96	@ 0x60
 8001e98:	60ca      	str	r2, [r1, #12]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e9a:	f04f 0940 	mov.w	r9, #64	@ 0x40
 8001e9e:	f04f 0e80 	mov.w	lr, #128	@ 0x80
 8001ea2:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8001ea6:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8001eaa:	f44f 0600 	mov.w	r6, #8388608	@ 0x800000
 8001eae:	68cb      	ldr	r3, [r1, #12]
  rccEnablePWRInterface(true);
 8001eb0:	4643      	mov	r3, r8
 8001eb2:	69cd      	ldr	r5, [r1, #28]
  PWR->CR |= PWR_CR_DBP;
 8001eb4:	f8df a2ec 	ldr.w	sl, [pc, #748]	@ 80021a4 <main+0x334>
  rccEnablePWRInterface(true);
 8001eb8:	f045 5580 	orr.w	r5, r5, #268435456	@ 0x10000000
 8001ebc:	61cd      	str	r5, [r1, #28]
 8001ebe:	69cd      	ldr	r5, [r1, #28]
  rccEnableBKPInterface(true);
 8001ec0:	69cd      	ldr	r5, [r1, #28]
 8001ec2:	f045 6500 	orr.w	r5, r5, #134217728	@ 0x8000000
 8001ec6:	61cd      	str	r5, [r1, #28]
 8001ec8:	69c9      	ldr	r1, [r1, #28]
  PWR->CR |= PWR_CR_DBP;
 8001eca:	f8da 5000 	ldr.w	r5, [sl]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001ece:	49b6      	ldr	r1, [pc, #728]	@ (80021a8 <main+0x338>)
 8001ed0:	4325      	orrs	r5, r4
 8001ed2:	f8ca 5000 	str.w	r5, [sl]
 8001ed6:	f881 0306 	strb.w	r0, [r1, #774]	@ 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001eda:	f8c1 9180 	str.w	r9, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001ede:	f8c1 9000 	str.w	r9, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001ee2:	f881 0307 	strb.w	r0, [r1, #775]	@ 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ee6:	f8c1 e180 	str.w	lr, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001eea:	f8c1 e000 	str.w	lr, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001eee:	f881 0308 	strb.w	r0, [r1, #776]	@ 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ef2:	f8c1 4180 	str.w	r4, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001ef6:	600c      	str	r4, [r1, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001ef8:	f881 0309 	strb.w	r0, [r1, #777]	@ 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001efc:	f8c1 c180 	str.w	ip, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001f00:	f8c1 c000 	str.w	ip, [r1]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001f04:	f881 030a 	strb.w	r0, [r1, #778]	@ 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f08:	f8c1 7180 	str.w	r7, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001f0c:	600f      	str	r7, [r1, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001f0e:	f881 0317 	strb.w	r0, [r1, #791]	@ 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f12:	f8c1 6180 	str.w	r6, [r1, #384]	@ 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001f16:	600e      	str	r6, [r1, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001f18:	f881 0328 	strb.w	r0, [r1, #808]	@ 0x328
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f1c:	f8c1 4184 	str.w	r4, [r1, #388]	@ 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001f20:	604c      	str	r4, [r1, #4]
void _pal_lld_init(const PALConfig *config) {
 8001f22:	eb08 0104 	add.w	r1, r8, r4
  qp->prev = qp;
 8001f26:	e9c3 3300 	strd	r3, r3, [r3]
    _pal_init_event(i);
 8001f2a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  for (i = 0; i < 16; i++) {
 8001f2e:	3310      	adds	r3, #16
 8001f30:	4299      	cmp	r1, r3
 8001f32:	d1f8      	bne.n	8001f26 <main+0xb6>
  GPIOA->CRH = config->PAData.crh;
 8001f34:	f04f 3388 	mov.w	r3, #2290649224	@ 0x88888888
  GPIOA->ODR = config->PAData.odr;
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (SYSTICK_CK / OSAL_ST_FREQUENCY) - 1;
 8001f3c:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8001f40:	f04f 0907 	mov.w	r9, #7
  SysTick->LOAD = (SYSTICK_CK / OSAL_ST_FREQUENCY) - 1;
 8001f44:	f648 4a9f 	movw	sl, #35999	@ 0x8c9f
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  SCB->__SHPR[_SHP_IDX(handler)] = (SCB->__SHPR[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                   (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#else
  SCB->__SHPR[handler] = NVIC_PRIORITY_MASK(prio);
 8001f48:	f04f 0e80 	mov.w	lr, #128	@ 0x80
  rccEnableAPB2(APB2_EN_MASK, true);
 8001f4c:	4c93      	ldr	r4, [pc, #588]	@ (800219c <main+0x32c>)
  GPIOC->ODR = config->PCData.odr;
 8001f4e:	4f97      	ldr	r7, [pc, #604]	@ (80021ac <main+0x33c>)
  rccEnableAPB2(APB2_EN_MASK, true);
 8001f50:	69a6      	ldr	r6, [r4, #24]
  GPIOC->CRH = config->PCData.crh;
 8001f52:	f8df b25c 	ldr.w	fp, [pc, #604]	@ 80021b0 <main+0x340>
  rccEnableAPB2(APB2_EN_MASK, true);
 8001f56:	f046 067d 	orr.w	r6, r6, #125	@ 0x7d
 8001f5a:	61a6      	str	r6, [r4, #24]
 8001f5c:	69a4      	ldr	r4, [r4, #24]
  GPIOA->ODR = config->PAData.odr;
 8001f5e:	4c95      	ldr	r4, [pc, #596]	@ (80021b4 <main+0x344>)
  GPIOD->ODR = config->PDData.odr;
 8001f60:	4e95      	ldr	r6, [pc, #596]	@ (80021b8 <main+0x348>)
  GPIOA->ODR = config->PAData.odr;
 8001f62:	60e1      	str	r1, [r4, #12]
  GPIOA->CRH = config->PAData.crh;
 8001f64:	6063      	str	r3, [r4, #4]
  GPIOA->CRL = config->PAData.crl;
 8001f66:	6023      	str	r3, [r4, #0]
  GPIOB->ODR = config->PBData.odr;
 8001f68:	f8c4 140c 	str.w	r1, [r4, #1036]	@ 0x40c
  GPIOB->CRH = config->PBData.crh;
 8001f6c:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  GPIOB->CRL = config->PBData.crl;
 8001f70:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
  GPIOC->ODR = config->PCData.odr;
 8001f74:	60f9      	str	r1, [r7, #12]
  GPIOC->CRH = config->PCData.crh;
 8001f76:	f8c7 b004 	str.w	fp, [r7, #4]
  GPIOC->CRL = config->PCData.crl;
 8001f7a:	603b      	str	r3, [r7, #0]
  GPIOD->CRL = config->PDData.crl;
 8001f7c:	4f8f      	ldr	r7, [pc, #572]	@ (80021bc <main+0x34c>)
  GPIOB->ODR = config->PBData.odr;
 8001f7e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  GPIOD->ODR = config->PDData.odr;
 8001f82:	60f1      	str	r1, [r6, #12]
  GPIOD->CRH = config->PDData.crh;
 8001f84:	6073      	str	r3, [r6, #4]
  GPIOD->CRL = config->PDData.crl;
 8001f86:	6037      	str	r7, [r6, #0]
  GPIOE->ODR = config->PEData.odr;
 8001f88:	f8c4 1c0c 	str.w	r1, [r4, #3084]	@ 0xc0c
  GPIOE->CRH = config->PEData.crh;
 8001f8c:	f8c4 3c04 	str.w	r3, [r4, #3076]	@ 0xc04
  GPIOE->CRL = config->PEData.crl;
 8001f90:	f8c4 3c00 	str.w	r3, [r4, #3072]	@ 0xc00
 8001f94:	4b8a      	ldr	r3, [pc, #552]	@ (80021c0 <main+0x350>)
 8001f96:	f8c0 a014 	str.w	sl, [r0, #20]
  SysTick->VAL = 0;
 8001f9a:	6182      	str	r2, [r0, #24]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9c:	f8c0 9010 	str.w	r9, [r0, #16]
 8001fa0:	f883 e023 	strb.w	lr, [r3, #35]	@ 0x23
  tmp->cumulative = (rttime_t)0;
 8001fa4:	2000      	movs	r0, #0
  tmp->worst      = (rtcnt_t)0;
 8001fa6:	e9cd 1202 	strd	r1, r2, [sp, #8]
  tmp->cumulative = (rttime_t)0;
 8001faa:	2100      	movs	r1, #0
 */
void chSysInit(void) {
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 8001fac:	f04f 0c01 	mov.w	ip, #1
}
 8001fb0:	2504      	movs	r5, #4
 8001fb2:	f8df 9210 	ldr.w	r9, [pc, #528]	@ 80021c4 <main+0x354>
  tmp->cumulative = (rttime_t)0;
 8001fb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8001fba:	9205      	str	r2, [sp, #20]
 8001fbc:	f889 c000 	strb.w	ip, [r9]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8001fc0:	f8c9 2008 	str.w	r2, [r9, #8]
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 8001fc4:	a802      	add	r0, sp, #8
 8001fc6:	f7fe f993 	bl	80002f0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8001fca:	f7fe f999 	bl	8000300 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 8001fce:	3d01      	subs	r5, #1
 8001fd0:	d1f8      	bne.n	8001fc4 <main+0x154>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 8001fd2:	201c      	movs	r0, #28
  mp->align = align;
 8001fd4:	2204      	movs	r2, #4
  mp->object_size = size;
 8001fd6:	2414      	movs	r4, #20
  tcp->offset = tm.best;
 8001fd8:	9b02      	ldr	r3, [sp, #8]
  ch_memcore.basemem = __heap_base__;
 8001fda:	497b      	ldr	r1, [pc, #492]	@ (80021c8 <main+0x358>)
 8001fdc:	f8c9 3008 	str.w	r3, [r9, #8]
  qp->next = qp;
 8001fe0:	4b7a      	ldr	r3, [pc, #488]	@ (80021cc <main+0x35c>)
 8001fe2:	2730      	movs	r7, #48	@ 0x30
 8001fe4:	6318      	str	r0, [r3, #48]	@ 0x30
  mp->provider = provider;
 8001fe6:	487a      	ldr	r0, [pc, #488]	@ (80021d0 <main+0x360>)
  mp->align = align;
 8001fe8:	61da      	str	r2, [r3, #28]
  mp->provider = provider;
 8001fea:	6218      	str	r0, [r3, #32]
 8001fec:	6398      	str	r0, [r3, #56]	@ 0x38
 8001fee:	4879      	ldr	r0, [pc, #484]	@ (80021d4 <main+0x364>)
  mp->align = align;
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff2:	6008      	str	r0, [r1, #0]
  ch_memcore.topmem  = __heap_end__;
 8001ff4:	4878      	ldr	r0, [pc, #480]	@ (80021d8 <main+0x368>)
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001ff6:	4a79      	ldr	r2, [pc, #484]	@ (80021dc <main+0x36c>)
 8001ff8:	6048      	str	r0, [r1, #4]
 8001ffa:	4979      	ldr	r1, [pc, #484]	@ (80021e0 <main+0x370>)
  mp->object_size = size;
 8001ffc:	619c      	str	r4, [r3, #24]
 8001ffe:	6011      	str	r1, [r2, #0]
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 8002000:	4c78      	ldr	r4, [pc, #480]	@ (80021e4 <main+0x374>)

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 8002002:	4979      	ldr	r1, [pc, #484]	@ (80021e8 <main+0x378>)
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 8002004:	e9c2 5501 	strd	r5, r5, [r2, #4]
 8002008:	63a1      	str	r1, [r4, #56]	@ 0x38
 800200a:	f102 010c 	add.w	r1, r2, #12
  qp->prev = qp;
 800200e:	e9c2 1103 	strd	r1, r1, [r2, #12]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8002012:	6155      	str	r5, [r2, #20]
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8002014:	f103 0210 	add.w	r2, r3, #16
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002020:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
 8002026:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800202a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800202c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
 8002032:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8002036:	e9c3 3300 	strd	r3, r3, [r3]
 800203a:	609d      	str	r5, [r3, #8]
  mp->next = NULL;
 800203c:	615d      	str	r5, [r3, #20]
 800203e:	62dd      	str	r5, [r3, #44]	@ 0x2c
  ch_system.instances[core_id] = oip;
 8002040:	f8c9 4004 	str.w	r4, [r9, #4]
  oip->core_id = core_id;
 8002044:	6325      	str	r5, [r4, #48]	@ 0x30
 8002046:	645a      	str	r2, [r3, #68]	@ 0x44
 8002048:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 800204c:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	f64f 06ff 	movw	r6, #63743	@ 0xf8ff
  tp->epending          = (eventmask_t)0;
 8002052:	e9c4 551d 	strd	r5, r5, [r4, #116]	@ 0x74
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002056:	4b5a      	ldr	r3, [pc, #360]	@ (80021c0 <main+0x350>)
  pqp->prio = (tprio_t)0;
 8002058:	60a5      	str	r5, [r4, #8]
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 800205a:	6365      	str	r5, [r4, #52]	@ 0x34
 800205c:	68d9      	ldr	r1, [r3, #12]
  reg_value  =  (reg_value                                   |
 800205e:	4a63      	ldr	r2, [pc, #396]	@ (80021ec <main+0x37c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002060:	4031      	ands	r1, r6
  reg_value  =  (reg_value                                   |
 8002062:	430a      	orrs	r2, r1
  tp->owner             = oip;
 8002064:	6564      	str	r4, [r4, #84]	@ 0x54
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 8002066:	65e5      	str	r5, [r4, #92]	@ 0x5c
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002068:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800206a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800206e:	4e60      	ldr	r6, [pc, #384]	@ (80021f0 <main+0x380>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002070:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002074:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  tp->refs              = (trefs_t)1;
 8002078:	2201      	movs	r2, #1
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800207a:	6831      	ldr	r1, [r6, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	2020      	movs	r0, #32
 800207e:	4311      	orrs	r1, r2
 8002080:	6031      	str	r1, [r6, #0]
  tp->hdr.pqueue.prio   = prio;
 8002082:	2180      	movs	r1, #128	@ 0x80
 8002084:	77d8      	strb	r0, [r3, #31]
 8002086:	f883 7022 	strb.w	r7, [r3, #34]	@ 0x22
 800208a:	6461      	str	r1, [r4, #68]	@ 0x44
  tp->realprio          = prio;
 800208c:	67e1      	str	r1, [r4, #124]	@ 0x7c
  tp->name              = name;
 800208e:	4959      	ldr	r1, [pc, #356]	@ (80021f4 <main+0x384>)
  dlhp->delta = (sysinterval_t)-1;
 8002090:	f04f 36ff 	mov.w	r6, #4294967295
 8002094:	65a1      	str	r1, [r4, #88]	@ 0x58
  dlhp->next  = dlhp;
 8002096:	f104 0110 	add.w	r1, r4, #16
  dlhp->prev  = dlhp;
 800209a:	e9c4 1104 	strd	r1, r1, [r4, #16]
  qp->next = qp;
 800209e:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
  qp->prev = qp;
 80020a2:	e9c4 111b 	strd	r1, r1, [r4, #108]	@ 0x6c
  lp->next = lp;
 80020a6:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 80020aa:	66a1      	str	r1, [r4, #104]	@ 0x68
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 80020ac:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80020b0:	60e1      	str	r1, [r4, #12]
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 80020b2:	4629      	mov	r1, r5
  vtlp->systime = (systime_t)0;
 80020b4:	83a5      	strh	r5, [r4, #28]
  return currcore->vtlist.systime;
 80020b6:	8ba3      	ldrh	r3, [r4, #28]
  p->prev       = qp->prev;
 80020b8:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 80020bc:	f8ad 3006 	strh.w	r3, [sp, #6]
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 80020c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  p->prev->next = p;
 80020c4:	f104 0a4c 	add.w	sl, r4, #76	@ 0x4c
  tp->refs              = (trefs_t)1;
 80020c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 80020cc:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
  dlhp->delta = (sysinterval_t)-1;
 80020d0:	61a6      	str	r6, [r4, #24]
  p->prev       = qp->prev;
 80020d2:	f8c4 b050 	str.w	fp, [r4, #80]	@ 0x50
  p->prev->next = p;
 80020d6:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
 80020da:	e9c4 0108 	strd	r0, r1, [r4, #32]

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 80020de:	f04f 0102 	mov.w	r1, #2
  tp->wabase = tdp->wbase;
 80020e2:	4b45      	ldr	r3, [pc, #276]	@ (80021f8 <main+0x388>)
 80020e4:	f889 1000 	strb.w	r1, [r9]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80020e8:	f103 01c4 	add.w	r1, r3, #196	@ 0xc4
 80020ec:	f8c3 10f4 	str.w	r1, [r3, #244]	@ 0xf4
 80020f0:	4942      	ldr	r1, [pc, #264]	@ (80021fc <main+0x38c>)
  qp->next = qp;
 80020f2:	f503 7c8c 	add.w	ip, r3, #280	@ 0x118
 80020f6:	f8c3 10c4 	str.w	r1, [r3, #196]	@ 0xc4
 80020fa:	4941      	ldr	r1, [pc, #260]	@ (8002200 <main+0x390>)
  p->prev->next = p;
 80020fc:	f103 0ef8 	add.w	lr, r3, #248	@ 0xf8
 8002100:	f8c3 10e4 	str.w	r1, [r3, #228]	@ 0xe4
  tp->name              = name;
 8002104:	493f      	ldr	r1, [pc, #252]	@ (8002204 <main+0x394>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002106:	f8c3 50c8 	str.w	r5, [r3, #200]	@ 0xc8
  tp->name              = name;
 800210a:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
  lp->next = lp;
 800210e:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 8002112:	f8c3 1114 	str.w	r1, [r3, #276]	@ 0x114
  tp->hdr.pqueue.prio   = prio;
 8002116:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  tp->owner             = oip;
 800211a:	f8c3 4100 	str.w	r4, [r3, #256]	@ 0x100
  tp->realprio          = prio;
 800211e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
  tp->refs              = (trefs_t)1;
 8002122:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
 8002126:	f8a3 510c 	strh.w	r5, [r3, #268]	@ 0x10c
  p->prev       = qp->prev;
 800212a:	e9c3 ba3e 	strd	fp, sl, [r3, #248]	@ 0xf8
  tp->epending          = (eventmask_t)0;
 800212e:	e9c3 5548 	strd	r5, r5, [r3, #288]	@ 0x120
  qp->prev = qp;
 8002132:	e9c3 cc46 	strd	ip, ip, [r3, #280]	@ 0x118
  p->prev       = pqp->prev;
 8002136:	e9c3 443a 	strd	r4, r4, [r3, #232]	@ 0xe8
  tp->wabase = tdp->wbase;
 800213a:	f8c3 3108 	str.w	r3, [r3, #264]	@ 0x108
  p->prev->next = p;
 800213e:	33e8      	adds	r3, #232	@ 0xe8
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 8002140:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
  p->prev->next = p;
 8002144:	f8c4 e04c 	str.w	lr, [r4, #76]	@ 0x4c
  qp->prev      = p;
 8002148:	f8c4 e02c 	str.w	lr, [r4, #44]	@ 0x2c
  pqp->prev     = p;
 800214c:	e9c4 3300 	strd	r3, r3, [r4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002150:	f385 8811 	msr	BASEPRI, r5

    halInit();
    chSysInit(); 
    
    /* pinos de saida */
    palSetGroupMode(IOPORT1, GPIO_OUTPUT_MASK, 0, PAL_MODE_OUTPUT_PUSHPULL);
 8002154:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 80021b4 <main+0x344>
 8002158:	2206      	movs	r2, #6
 800215a:	4648      	mov	r0, r9
 800215c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8002160:	f7fe f886 	bl	8000270 <_pal_lld_setgroupmode>
    /* pinos de entrada */
    palSetGroupMode(IOPORT2, GPIO_INPUT_MASK, 0, PAL_MODE_INPUT_PULLUP);
 8002164:	2203      	movs	r2, #3
 8002166:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800216a:	f509 6080 	add.w	r0, r9, #1024	@ 0x400
 800216e:	f7fe f87f 	bl	8000270 <_pal_lld_setgroupmode>
    /* desliga todos os leds */
    palWriteGroup(IOPORT1, GPIO_OUTPUT_MASK, 0, 0x0000);
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <main+0x398>)
 8002174:	f8c9 3010 	str.w	r3, [r9, #16]
 8002178:	f387 8811 	msr	BASEPRI, r7
    /* habilita interrupçoes nos botoes de entrada */
    palEnablePadEvent(IOPORT2, BTN_START, PAL_EVENT_MODE_FALLING_EDGE);
 800217c:	200c      	movs	r0, #12
 800217e:	f7fe f93f 	bl	8000400 <_pal_lld_enablepadevent.constprop.0>
 8002182:	f385 8811 	msr	BASEPRI, r5
 8002186:	f387 8811 	msr	BASEPRI, r7
    palEnablePadEvent(IOPORT2, BTN_HIGH_WATERMARK, PAL_EVENT_MODE_FALLING_EDGE);
 800218a:	200d      	movs	r0, #13
 800218c:	f7fe f938 	bl	8000400 <_pal_lld_enablepadevent.constprop.0>
 8002190:	f385 8811 	msr	BASEPRI, r5
 8002194:	f387 8811 	msr	BASEPRI, r7
    palEnablePadEvent(IOPORT2, BTN_LOW_WATERMARK, PAL_EVENT_MODE_FALLING_EDGE);
 8002198:	200e      	movs	r0, #14
 800219a:	e037      	b.n	800220c <main+0x39c>
 800219c:	40021000 	.word	0x40021000
 80021a0:	20001cc0 	.word	0x20001cc0
 80021a4:	40007000 	.word	0x40007000
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	40011000 	.word	0x40011000
 80021b0:	88388888 	.word	0x88388888
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40011400 	.word	0x40011400
 80021bc:	88888844 	.word	0x88888844
 80021c0:	e000ed00 	.word	0xe000ed00
 80021c4:	20001c28 	.word	0x20001c28
 80021c8:	20001c20 	.word	0x20001c20
 80021cc:	2000094c 	.word	0x2000094c
 80021d0:	08000391 	.word	0x08000391
 80021d4:	20001dc0 	.word	0x20001dc0
 80021d8:	20005000 	.word	0x20005000
 80021dc:	20000930 	.word	0x20000930
 80021e0:	08000351 	.word	0x08000351
 80021e4:	20001c38 	.word	0x20001c38
 80021e8:	08002404 	.word	0x08002404
 80021ec:	05fa0300 	.word	0x05fa0300
 80021f0:	e0001000 	.word	0xe0001000
 80021f4:	080023d8 	.word	0x080023d8
 80021f8:	20000800 	.word	0x20000800
 80021fc:	080002e1 	.word	0x080002e1
 8002200:	08000251 	.word	0x08000251
 8002204:	080023cc 	.word	0x080023cc
 8002208:	01ff0000 	.word	0x01ff0000
 800220c:	f7fe f8f8 	bl	8000400 <_pal_lld_enablepadevent.constprop.0>
 8002210:	f385 8811 	msr	BASEPRI, r5
 8002214:	f387 8811 	msr	BASEPRI, r7
    palEnablePadEvent(IOPORT2, BTN_OPEN_LID, PAL_EVENT_MODE_FALLING_EDGE);
 8002218:	200f      	movs	r0, #15
 800221a:	f7fe f8f1 	bl	8000400 <_pal_lld_enablepadevent.constprop.0>
 800221e:	f385 8811 	msr	BASEPRI, r5
 8002222:	f387 8811 	msr	BASEPRI, r7
 */
void palSetPadCallbackI(ioportid_t port, iopadid_t pad,
                        palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_pad_event(port, pad);
  pep->cb = cb;
 8002226:	4b35      	ldr	r3, [pc, #212]	@ (80022fc <main+0x48c>)
  pep->arg = arg;
 8002228:	f8c8 50cc 	str.w	r5, [r8, #204]	@ 0xcc
  pep->cb = cb;
 800222c:	f8c8 30c8 	str.w	r3, [r8, #200]	@ 0xc8
 8002230:	f385 8811 	msr	BASEPRI, r5
 8002234:	f387 8811 	msr	BASEPRI, r7
 8002238:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <main+0x490>)
  pep->arg = arg;
 800223a:	f8c8 50dc 	str.w	r5, [r8, #220]	@ 0xdc
  pep->cb = cb;
 800223e:	f8c8 30d8 	str.w	r3, [r8, #216]	@ 0xd8
 8002242:	f385 8811 	msr	BASEPRI, r5
 8002246:	f387 8811 	msr	BASEPRI, r7
 800224a:	4b2e      	ldr	r3, [pc, #184]	@ (8002304 <main+0x494>)
  pep->arg = arg;
 800224c:	f8c8 50ec 	str.w	r5, [r8, #236]	@ 0xec
  pep->cb = cb;
 8002250:	f8c8 30e8 	str.w	r3, [r8, #232]	@ 0xe8
 8002254:	f385 8811 	msr	BASEPRI, r5
 8002258:	f387 8811 	msr	BASEPRI, r7
 800225c:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <main+0x498>)
  pep->arg = arg;
 800225e:	f8c8 50fc 	str.w	r5, [r8, #252]	@ 0xfc
  pep->cb = cb;
 8002262:	f8c8 30f8 	str.w	r3, [r8, #248]	@ 0xf8
 8002266:	f385 8811 	msr	BASEPRI, r5
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800226a:	4b28      	ldr	r3, [pc, #160]	@ (800230c <main+0x49c>)
    chVTObjectInit(&vt_centrifuge);
    */
    /* inicializa os event sources */
    chEvtObjectInit(&evt_src);

    thread_t* ptr_eventHandle = chThdCreateStatic(wa_eventHandle, sizeof(wa_eventHandle), NORMALPRIO + 1, eventHandle, NULL);
 800226c:	4928      	ldr	r1, [pc, #160]	@ (8002310 <main+0x4a0>)
 800226e:	4829      	ldr	r0, [pc, #164]	@ (8002314 <main+0x4a4>)
 8002270:	601b      	str	r3, [r3, #0]
 8002272:	f7fe fbdd 	bl	8000a30 <chThdCreateStatic.constprop.0.isra.0>
    thread_t* ptr_stateMachine = chThdCreateStatic(wa_stateMachine, sizeof(wa_stateMachine), NORMALPRIO + 1, stateMachine, NULL);
 8002276:	4928      	ldr	r1, [pc, #160]	@ (8002318 <main+0x4a8>)
 8002278:	4828      	ldr	r0, [pc, #160]	@ (800231c <main+0x4ac>)
 800227a:	f7fe fbd9 	bl	8000a30 <chThdCreateStatic.constprop.0.isra.0>
 800227e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8002320 <main+0x4b0>
 8002282:	f387 8811 	msr	BASEPRI, r7
  thread_t *tp = __instance_get_currthread(currcore);
 8002286:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
  while (likely(dlp->delta < delta)) {
 800228a:	6898      	ldr	r0, [r3, #8]
 800228c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002290:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
  vtp->func    = vtfunc;
 8002294:	e9cd 8105 	strd	r8, r1, [sp, #20]
  vtp->reload  = (sysinterval_t)0;
 8002298:	9507      	str	r5, [sp, #28]
 800229a:	d204      	bcs.n	80022a6 <main+0x436>
    dlp = dlp->next;
 800229c:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800229e:	1a12      	subs	r2, r2, r0
  while (likely(dlp->delta < delta)) {
 80022a0:	6898      	ldr	r0, [r3, #8]
 80022a2:	4290      	cmp	r0, r2
 80022a4:	d3fa      	bcc.n	800229c <main+0x42c>
  otp->state = newstate;
 80022a6:	f04f 0e08 	mov.w	lr, #8
  ntp->state = CH_STATE_CURRENT;
 80022aa:	f04f 0c01 	mov.w	ip, #1
  dlp->prev       = dlp->next->prev;
 80022ae:	f8d3 9004 	ldr.w	r9, [r3, #4]
  dlp->delta      = delta;
 80022b2:	9204      	str	r2, [sp, #16]
  dlp->delta -= delta;
 80022b4:	6898      	ldr	r0, [r3, #8]
  dlp->prev->next = dlp;
 80022b6:	eb0d 0a0e 	add.w	sl, sp, lr
  dlp->prev       = dlp->next->prev;
 80022ba:	e9cd 3902 	strd	r3, r9, [sp, #8]
  dlp->prev->next = dlp;
 80022be:	f8c9 a000 	str.w	sl, [r9]
  dlp->delta -= delta;
 80022c2:	1a82      	subs	r2, r0, r2
  ch_priority_queue_t *p = pqp->next;
 80022c4:	6820      	ldr	r0, [r4, #0]
  dlp->delta -= delta;
 80022c6:	e9c3 a201 	strd	sl, r2, [r3, #4]
  otp->state = newstate;
 80022ca:	f881 e024 	strb.w	lr, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 80022ce:	6803      	ldr	r3, [r0, #0]
  dlhp->delta = (sysinterval_t)-1;
 80022d0:	61a6      	str	r6, [r4, #24]
  pqp->next->prev = pqp;
 80022d2:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80022d4:	f880 c024 	strb.w	ip, [r0, #36]	@ 0x24
  pqp->next       = p->next;
 80022d8:	6023      	str	r3, [r4, #0]
  __instance_set_currthread(oip, ntp);
 80022da:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80022dc:	f7fd ffb0 	bl	8000240 <__port_switch>
  return (bool)(vtp->dlist.next != NULL);
 80022e0:	9b02      	ldr	r3, [sp, #8]
    if (chVTIsArmedI(&vt)) {
 80022e2:	b13b      	cbz	r3, 80022f4 <main+0x484>
  dlp->prev->next = dlp->next;
 80022e4:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
  vtp->dlist.next->delta += vtp->dlist.delta;
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	4402      	add	r2, r0
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	600b      	str	r3, [r1, #0]
  dlp->next->prev = dlp->prev;
 80022f0:	6059      	str	r1, [r3, #4]
  vtlp->dlist.delta = (sysinterval_t)-1;
 80022f2:	61a6      	str	r6, [r4, #24]
 80022f4:	f385 8811 	msr	BASEPRI, r5
}
 80022f8:	e7c3      	b.n	8002282 <main+0x412>
 80022fa:	bf00      	nop
 80022fc:	08000841 	.word	0x08000841
 8002300:	08000861 	.word	0x08000861
 8002304:	08000881 	.word	0x08000881
 8002308:	080008a1 	.word	0x080008a1
 800230c:	20001c1c 	.word	0x20001c1c
 8002310:	08001341 	.word	0x08001341
 8002314:	20001288 	.word	0x20001288
 8002318:	080008e1 	.word	0x080008e1
 800231c:	20000998 	.word	0x20000998
 8002320:	08000451 	.word	0x08000451

08002324 <memset>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	0786      	lsls	r6, r0, #30
 8002328:	d047      	beq.n	80023ba <memset+0x96>
 800232a:	1e54      	subs	r4, r2, #1
 800232c:	2a00      	cmp	r2, #0
 800232e:	d03e      	beq.n	80023ae <memset+0x8a>
 8002330:	4603      	mov	r3, r0
 8002332:	b2ca      	uxtb	r2, r1
 8002334:	e001      	b.n	800233a <memset+0x16>
 8002336:	3c01      	subs	r4, #1
 8002338:	d339      	bcc.n	80023ae <memset+0x8a>
 800233a:	f803 2b01 	strb.w	r2, [r3], #1
 800233e:	079d      	lsls	r5, r3, #30
 8002340:	d1f9      	bne.n	8002336 <memset+0x12>
 8002342:	2c03      	cmp	r4, #3
 8002344:	d92c      	bls.n	80023a0 <memset+0x7c>
 8002346:	b2cd      	uxtb	r5, r1
 8002348:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800234c:	2c0f      	cmp	r4, #15
 800234e:	461a      	mov	r2, r3
 8002350:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8002354:	d934      	bls.n	80023c0 <memset+0x9c>
 8002356:	f1a4 0c10 	sub.w	ip, r4, #16
 800235a:	f02c 060f 	bic.w	r6, ip, #15
 800235e:	f103 0e10 	add.w	lr, r3, #16
 8002362:	44b6      	add	lr, r6
 8002364:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8002368:	e9c2 5500 	strd	r5, r5, [r2]
 800236c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8002370:	3210      	adds	r2, #16
 8002372:	4572      	cmp	r2, lr
 8002374:	d1f8      	bne.n	8002368 <memset+0x44>
 8002376:	f10c 0201 	add.w	r2, ip, #1
 800237a:	f014 0f0c 	tst.w	r4, #12
 800237e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002382:	f004 0c0f 	and.w	ip, r4, #15
 8002386:	d013      	beq.n	80023b0 <memset+0x8c>
 8002388:	f1ac 0304 	sub.w	r3, ip, #4
 800238c:	f023 0303 	bic.w	r3, r3, #3
 8002390:	3304      	adds	r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	f842 5b04 	str.w	r5, [r2], #4
 8002398:	4293      	cmp	r3, r2
 800239a:	d1fb      	bne.n	8002394 <memset+0x70>
 800239c:	f00c 0403 	and.w	r4, ip, #3
 80023a0:	b12c      	cbz	r4, 80023ae <memset+0x8a>
 80023a2:	b2c9      	uxtb	r1, r1
 80023a4:	441c      	add	r4, r3
 80023a6:	f803 1b01 	strb.w	r1, [r3], #1
 80023aa:	42a3      	cmp	r3, r4
 80023ac:	d1fb      	bne.n	80023a6 <memset+0x82>
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	4664      	mov	r4, ip
 80023b2:	4613      	mov	r3, r2
 80023b4:	2c00      	cmp	r4, #0
 80023b6:	d1f4      	bne.n	80023a2 <memset+0x7e>
 80023b8:	e7f9      	b.n	80023ae <memset+0x8a>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4614      	mov	r4, r2
 80023be:	e7c0      	b.n	8002342 <memset+0x1e>
 80023c0:	46a4      	mov	ip, r4
 80023c2:	e7e1      	b.n	8002388 <memset+0x64>
