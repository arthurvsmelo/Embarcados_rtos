GAS LISTING /tmp/ccCNCjxp.s 			page 1


   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/arthur/Documentos/Embarcados_rtos/lista1-usart/",100,0,2,.Ltext0
   8               		.stabs	"main.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"__int128:t(0,6)=@s128;r(0,6);02000000000000000000000000000000000000000000;0177777777777777
  18               		.stabs	"__int128 unsigned:t(0,7)=@s128;r(0,7);0;03777777777777777777777777777777777777777777;",128
  19               		.stabs	"long long int:t(0,8)=@s64;r(0,8);01000000000000000000000;00777777777777777777777;",128,0,0
  20               		.stabs	"long long unsigned int:t(0,9)=@s64;r(0,9);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,10)=r(0,10);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,11)=r(0,11);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,12)=@s8;r(0,12);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,15)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,16)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"short _Fract:t(0,17)=r(0,1);1;0;",128,0,0,0
  29               		.stabs	"_Fract:t(0,18)=r(0,1);2;0;",128,0,0,0
  30               		.stabs	"long _Fract:t(0,19)=r(0,1);4;0;",128,0,0,0
  31               		.stabs	"long long _Fract:t(0,20)=r(0,1);8;0;",128,0,0,0
  32               		.stabs	"unsigned short _Fract:t(0,21)=r(0,1);1;0;",128,0,0,0
  33               		.stabs	"unsigned _Fract:t(0,22)=r(0,1);2;0;",128,0,0,0
  34               		.stabs	"unsigned long _Fract:t(0,23)=r(0,1);4;0;",128,0,0,0
  35               		.stabs	"unsigned long long _Fract:t(0,24)=r(0,1);8;0;",128,0,0,0
  36               		.stabs	"_Sat short _Fract:t(0,25)=r(0,1);1;0;",128,0,0,0
  37               		.stabs	"_Sat _Fract:t(0,26)=r(0,1);2;0;",128,0,0,0
  38               		.stabs	"_Sat long _Fract:t(0,27)=r(0,1);4;0;",128,0,0,0
  39               		.stabs	"_Sat long long _Fract:t(0,28)=r(0,1);8;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned short _Fract:t(0,29)=r(0,1);1;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned _Fract:t(0,30)=r(0,1);2;0;",128,0,0,0
  42               		.stabs	"_Sat unsigned long _Fract:t(0,31)=r(0,1);4;0;",128,0,0,0
  43               		.stabs	"_Sat unsigned long long _Fract:t(0,32)=r(0,1);8;0;",128,0,0,0
  44               		.stabs	"short _Accum:t(0,33)=r(0,1);2;0;",128,0,0,0
  45               		.stabs	"_Accum:t(0,34)=r(0,1);4;0;",128,0,0,0
  46               		.stabs	"long _Accum:t(0,35)=r(0,1);8;0;",128,0,0,0
  47               		.stabs	"long long _Accum:t(0,36)=r(0,1);8;0;",128,0,0,0
  48               		.stabs	"unsigned short _Accum:t(0,37)=r(0,1);2;0;",128,0,0,0
  49               		.stabs	"unsigned _Accum:t(0,38)=r(0,1);4;0;",128,0,0,0
  50               		.stabs	"unsigned long _Accum:t(0,39)=r(0,1);8;0;",128,0,0,0
  51               		.stabs	"unsigned long long _Accum:t(0,40)=r(0,1);8;0;",128,0,0,0
  52               		.stabs	"_Sat short _Accum:t(0,41)=r(0,1);2;0;",128,0,0,0
  53               		.stabs	"_Sat _Accum:t(0,42)=r(0,1);4;0;",128,0,0,0
  54               		.stabs	"_Sat long _Accum:t(0,43)=r(0,1);8;0;",128,0,0,0
  55               		.stabs	"_Sat long long _Accum:t(0,44)=r(0,1);8;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned short _Accum:t(0,45)=r(0,1);2;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned _Accum:t(0,46)=r(0,1);4;0;",128,0,0,0
GAS LISTING /tmp/ccCNCjxp.s 			page 2


  58               		.stabs	"_Sat unsigned long _Accum:t(0,47)=r(0,1);8;0;",128,0,0,0
  59               		.stabs	"_Sat unsigned long long _Accum:t(0,48)=r(0,1);8;0;",128,0,0,0
  60               		.stabs	"void:t(0,49)=(0,49)",128,0,0,0
  61               		.stabs	"/usr/lib/avr/include/avr/io.h",130,0,0,0
  62               		.stabs	"/usr/lib/avr/include/avr/sfr_defs.h",130,0,0,0
  63               		.stabs	"/usr/lib/avr/include/inttypes.h",130,0,0,0
  64               		.stabs	"/usr/lib/gcc/avr/5.4.0/include/stdint.h",130,0,0,0
  65               		.stabs	"/usr/lib/avr/include/stdint.h",130,0,0,0
  66               		.stabs	"int8_t:t(5,1)=(0,12)",128,0,125,0
  67               		.stabs	"uint8_t:t(5,2)=(0,13)",128,0,126,0
  68               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,127,0
  69               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,128,0
  70               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,129,0
  71               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,130,0
  72               		.stabs	"int64_t:t(5,7)=(0,8)",128,0,132,0
  73               		.stabs	"uint64_t:t(5,8)=(0,9)",128,0,133,0
  74               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,146,0
  75               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,151,0
  76               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,163,0
  77               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,168,0
  78               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,173,0
  79               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,178,0
  80               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,183,0
  81               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,188,0
  82               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,196,0
  83               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,203,0
  84               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,217,0
  85               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,222,0
  86               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,227,0
  87               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,232,0
  88               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,237,0
  89               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,242,0
  90               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,250,0
  91               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,257,0
  92               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,277,0
  93               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,282,0
  94               		.stabn	162,0,0,0
  95               		.stabn	162,0,0,0
  96               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  97               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  98               		.stabn	162,0,0,0
  99               		.stabn	162,0,0,0
 100               		.stabs	"/usr/lib/avr/include/avr/fuse.h",130,0,0,0
 101               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,244,0
 102               		.stabn	162,0,0,0
 103               		.stabn	162,0,0,0
 104               		.stabs	"/usr/lib/avr/include/string.h",130,0,0,0
 105               		.stabs	"/usr/lib/gcc/avr/5.4.0/include/stddef.h",130,0,0,0
 106               		.stabs	"size_t:t(8,1)=(0,4)",128,0,216,0
 107               		.stabn	162,0,0,0
 108               		.stabn	162,0,0,0
 109               		.stabs	"CircularBuffer:t(0,50)=(0,51)=s67buffer:(0,52)=ar(0,53)=r(0,53);0;0177777;;0;63;(5,2),0,51
 110               		.stabs	"initBuffer:F(0,49)",36,0,161,initBuffer
 111               		.stabs	"cb:P(0,54)=*(0,50)",64,0,161,24
 112               	.global	initBuffer
 113               		.type	initBuffer, @function
 114               	initBuffer:
GAS LISTING /tmp/ccCNCjxp.s 			page 3


 115               		.stabd	46,0,0
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/cpufunc.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include <stdint.h>
   5:main.c        **** #include <string.h>
   6:main.c        **** 
   7:main.c        **** #define FOSC 16000000UL                  /* clock arduino nano */
   8:main.c        **** #define BAUD 9600U                       /* baud rate */ 
   9:main.c        **** #define UBRR (FOSC / (16 * BAUD) - 1)    /* freq transmissao/recepção */
  10:main.c        **** #define XON    0x11
  11:main.c        **** #define XOFF   0x13
  12:main.c        **** #define SYNC   0x7E
  13:main.c        **** #define ESCAPE 0x7D
  14:main.c        **** #define BUFFER_SIZE 64
  15:main.c        **** 
  16:main.c        **** typedef struct {
  17:main.c        ****     uint8_t buffer[BUFFER_SIZE];
  18:main.c        ****     uint8_t head;
  19:main.c        ****     uint8_t tail;
  20:main.c        ****     uint8_t count;
  21:main.c        **** } CircularBuffer;
  22:main.c        **** 
  23:main.c        **** static uint8_t binary_string[] = {0x00, 0x01, 0x11, 0x02, 0x13, 0x04, 0x7E, 0x05, 0x7D, 0x06};
  24:main.c        **** static uint8_t str1[] = "Universidade Federal de Pernambuco\nDepartamento de Eletronica e Sistemas"
  25:main.c        **** static uint8_t str2[] = "Desenvolvimento de sistemas embarcados";
  26:main.c        **** static uint8_t readBuffer[256] = {0};
  27:main.c        **** static volatile uint8_t flow = 0, esc = 0, receiver_flow = 1;
  28:main.c        **** static volatile unsigned long milisecond_count;
  29:main.c        **** CircularBuffer rxBuffer, txBuffer;
  30:main.c        **** 
  31:main.c        **** void initBuffer(CircularBuffer *cb);
  32:main.c        **** uint8_t isFull(CircularBuffer *cb);
  33:main.c        **** uint8_t isEmpty(CircularBuffer *cb);
  34:main.c        **** uint8_t enqueue(CircularBuffer *cb, uint8_t item);
  35:main.c        **** uint8_t dequeue(CircularBuffer *cb, uint8_t *item);
  36:main.c        **** uint8_t write(uint8_t *buf, uint8_t n, int8_t close_packet);
  37:main.c        **** uint8_t read(uint8_t *buf, uint8_t n);
  38:main.c        **** void flow_off(void);
  39:main.c        **** void flow_on(void);
  40:main.c        **** uint8_t is_flow_on(void);
  41:main.c        **** void USART_Transmit(uint8_t data);
  42:main.c        **** uint8_t USART_Receive(void);
  43:main.c        **** void usart_init(void);
  44:main.c        **** void initTimer1(void);
  45:main.c        **** void delay(unsigned long ms);
  46:main.c        **** 
  47:main.c        **** int main(void) {
  48:main.c        ****     uint8_t i, j = 20, k = 5, trash_data;
  49:main.c        ****     uint16_t received_bytes = 0;
  50:main.c        ****     DDRB |= (1 << PB5);   /* Configura pino 5 da porta B (led onboard) como saída */
  51:main.c        ****     PORTB &= ~(1 << PB5);  /* Configura o pino do led em estado LOW como default */
  52:main.c        **** 
  53:main.c        ****     usart_init();
  54:main.c        ****     initTimer1();
  55:main.c        ****     sei();
  56:main.c        **** 
GAS LISTING /tmp/ccCNCjxp.s 			page 4


  57:main.c        ****     /* Implemente os testes aqui. Veja o texto para os detalhes */
  58:main.c        ****     
  59:main.c        ****     /* Teste 2 */
  60:main.c        ****     write(str1, strlen((const char *)str1), (int8_t)1);
  61:main.c        ****     /* Teste 3 */
  62:main.c        ****     i = strlen((const char *)str1);
  63:main.c        ****     while(i){
  64:main.c        ****         if(i < 10){
  65:main.c        ****             write(str1, (uint8_t)10, (int8_t)1);  /* fecha o pacote */
  66:main.c        ****         }
  67:main.c        ****         else{
  68:main.c        ****             i -= (write(str1, (uint8_t)10, (int8_t)0));  /* continua enviando o pacote sem fechar *
  69:main.c        ****         }
  70:main.c        ****     }
  71:main.c        ****     /* Teste 4 */
  72:main.c        ****     while(received_bytes <= 300){
  73:main.c        ****         received_bytes += (read(readBuffer, 1) - 1);  /* read retorna 2 enquanto não receber carac
  74:main.c        ****     }
  75:main.c        ****     flow_off();
  76:main.c        **** 
  77:main.c        ****     while(j){
  78:main.c        ****         /* lê 20 bytes do buffer e descarta */
  79:main.c        ****         dequeue(&rxBuffer, &trash_data);
  80:main.c        ****         j--;
  81:main.c        ****     }
  82:main.c        ****     if(isEmpty(&rxBuffer)){
  83:main.c        ****         /* se buffer vazio, pisca o led por 5s a uma taxa de 1hz */
  84:main.c        ****         while(k--){
  85:main.c        ****             PORTB ^= (1 << PB5);
  86:main.c        ****             delay(1000);
  87:main.c        ****         }
  88:main.c        ****     }
  89:main.c        ****     else{
  90:main.c        ****         /* se ainda há dados no buffer, acende o led por 5 seg continuamente */
  91:main.c        ****         PORTB |= (1 << PB5);
  92:main.c        ****         delay(5000);
  93:main.c        ****         PORTB &= ~(1 << PB5);
  94:main.c        ****     }
  95:main.c        ****     j = 20;
  96:main.c        ****     /* Teste 5 */
  97:main.c        ****     PORTB &= ~(1 << PB5); /* apaga o led */
  98:main.c        ****     while(received_bytes <= 300){
  99:main.c        ****         received_bytes += (read(readBuffer, 1) - 1);
 100:main.c        ****     }
 101:main.c        ****     flow_off();
 102:main.c        ****     while(j){
 103:main.c        ****         /* lê 20 bytes do buffer e descarta */
 104:main.c        ****         dequeue(&rxBuffer, &trash_data);
 105:main.c        ****         j--;
 106:main.c        ****     }
 107:main.c        ****     if(isEmpty(&rxBuffer)){
 108:main.c        ****         /* se buffer vazio, pisca o led por 5s a uma taxa de 1hz */
 109:main.c        ****         while(k--){
 110:main.c        ****             PORTB ^= (1 << PB5);
 111:main.c        ****             delay(1000);
 112:main.c        ****         }
 113:main.c        ****     }
GAS LISTING /tmp/ccCNCjxp.s 			page 5


 114:main.c        ****     else{
 115:main.c        ****         /* se ainda há dados no buffer, acende o led por 5 seg continuamente */
 116:main.c        ****         PORTB |= (1 << PB5);
 117:main.c        ****         delay(5000);
 118:main.c        ****         PORTB &= ~(1 << PB5);
 119:main.c        ****     }
 120:main.c        ****     /* Teste 6 */
 121:main.c        ****     PORTB &= ~(1 << PB5); /* apaga o led */
 122:main.c        ****     /* envia a string binária sem fechar o pacote */
 123:main.c        ****     while(1){
 124:main.c        ****         if(write(binary_string, strlen((const char *)binary_string), (int8_t)0) == 0){
 125:main.c        ****             PORTB |= (1 << PB5); /* acende o led enquanto a função write retornar 0 (se o fluxo e
 126:main.c        ****         }
 127:main.c        ****         else if(write(binary_string, strlen((const char *)binary_string), (int8_t)0) == strlen((con
 128:main.c        ****             break; /* só sai do while quando toda a string for enviada */
 129:main.c        ****         }
 130:main.c        ****         else{
 131:main.c        ****             PORTB &= ~(1 << PB5); /* apaga o led se a função write retornar os bytes enviados */
 132:main.c        ****         }  
 133:main.c        ****     }
 134:main.c        ****     /* Loop infinito necessário em qualquer programa para embarcados */
 135:main.c        ****     while (1) {
 136:main.c        ****         /* Passo 7 (a) */
 137:main.c        ****         read(readBuffer, 254);
 138:main.c        ****         /* strcmp devolve 0 se as strings forem iguais */
 139:main.c        ****         if(!strcmp((const char *)str2, (const char *)readBuffer)){
 140:main.c        ****             PORTB |= (1 << PB5);  /* acende o led se forem iguais */
 141:main.c        ****         }
 142:main.c        ****         else{
 143:main.c        ****             PORTB &= ~(1 << PB5);  /* apaga o led se forem diferentes */
 144:main.c        ****         }
 145:main.c        ****         /* Passo 7 (b) */
 146:main.c        ****         while(read(readBuffer, 10) == 11); /* função read retorna n+1 se pacote não foi finaliza
 147:main.c        ****         /* strcmp devolve 0 se as strings forem iguais */
 148:main.c        ****         if(!strcmp((const char *)str2, (const char *)readBuffer)){
 149:main.c        ****             PORTB |= (1 << PB5);  /* acende o led se forem iguais */
 150:main.c        ****         }
 151:main.c        ****         else{
 152:main.c        ****             PORTB &= ~(1 << PB5);  /* apaga o led se forem diferentes */
 153:main.c        ****         }
 154:main.c        ****     }
 155:main.c        **** 
 156:main.c        ****     return 0;
 157:main.c        **** }
 158:main.c        **** 
 159:main.c        **** /* =============================================== Funções ======================================
 160:main.c        **** 
 161:main.c        **** void initBuffer(CircularBuffer *cb) {
 116               		.stabn	68,0,161,.LM0-.LFBB1
 117               	.LM0:
 118               	.LFBB1:
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 162:main.c        ****     cb->head = 0;
 123               		.stabn	68,0,162,.LM1-.LFBB1
GAS LISTING /tmp/ccCNCjxp.s 			page 6


 124               	.LM1:
 125 0000 FC01      		movw r30,r24
 126 0002 E05C      		subi r30,-64
 127 0004 FF4F      		sbci r31,-1
 128 0006 1082      		st Z,__zero_reg__
 163:main.c        ****     cb->tail = 0;
 129               		.stabn	68,0,163,.LM2-.LFBB1
 130               	.LM2:
 131 0008 3196      		adiw r30,1
 132 000a 1082      		st Z,__zero_reg__
 164:main.c        ****     cb->count = 0;
 133               		.stabn	68,0,164,.LM3-.LFBB1
 134               	.LM3:
 135 000c 3196      		adiw r30,1
 136 000e 1082      		st Z,__zero_reg__
 137 0010 0895      		ret
 138               		.size	initBuffer, .-initBuffer
 139               	.Lscope1:
 140               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 141               		.stabd	78,0,0
 142               		.stabs	"isFull:F(5,2)",36,0,167,isFull
 143               		.stabs	"cb:P(0,54)",64,0,167,24
 144               	.global	isFull
 145               		.type	isFull, @function
 146               	isFull:
 147               		.stabd	46,0,0
 165:main.c        **** }
 166:main.c        **** 
 167:main.c        **** uint8_t isFull(CircularBuffer *cb) {
 148               		.stabn	68,0,167,.LM4-.LFBB2
 149               	.LM4:
 150               	.LFBB2:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 0 */
 154               	.L__stack_usage = 0
 168:main.c        ****     if(cb->count == BUFFER_SIZE) return 1;
 155               		.stabn	68,0,168,.LM5-.LFBB2
 156               	.LM5:
 157 0012 FC01      		movw r30,r24
 158 0014 EE5B      		subi r30,-66
 159 0016 FF4F      		sbci r31,-1
 160 0018 81E0      		ldi r24,lo8(1)
 161 001a 9081      		ld r25,Z
 162 001c 9034      		cpi r25,lo8(64)
 163 001e 01F0      		breq .L3
 164 0020 80E0      		ldi r24,0
 165               	.L3:
 169:main.c        ****     else return 0;
 170:main.c        **** }
 166               		.stabn	68,0,170,.LM6-.LFBB2
 167               	.LM6:
 168 0022 0895      		ret
 169               		.size	isFull, .-isFull
 170               	.Lscope2:
 171               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 172               		.stabd	78,0,0
GAS LISTING /tmp/ccCNCjxp.s 			page 7


 173               		.stabs	"isEmpty:F(5,2)",36,0,172,isEmpty
 174               		.stabs	"cb:P(0,54)",64,0,172,24
 175               	.global	isEmpty
 176               		.type	isEmpty, @function
 177               	isEmpty:
 178               		.stabd	46,0,0
 171:main.c        **** 
 172:main.c        **** uint8_t isEmpty(CircularBuffer *cb) {
 179               		.stabn	68,0,172,.LM7-.LFBB3
 180               	.LM7:
 181               	.LFBB3:
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
 173:main.c        ****     if(cb->count == 0) return 1;
 186               		.stabn	68,0,173,.LM8-.LFBB3
 187               	.LM8:
 188 0024 FC01      		movw r30,r24
 189 0026 EE5B      		subi r30,-66
 190 0028 FF4F      		sbci r31,-1
 191 002a 81E0      		ldi r24,lo8(1)
 192 002c 9081      		ld r25,Z
 193 002e 9111      		cpse r25,__zero_reg__
 194 0030 80E0      		ldi r24,0
 195               	.L9:
 174:main.c        ****     else return 0;
 175:main.c        **** }
 196               		.stabn	68,0,175,.LM9-.LFBB3
 197               	.LM9:
 198 0032 0895      		ret
 199               		.size	isEmpty, .-isEmpty
 200               	.Lscope3:
 201               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 202               		.stabd	78,0,0
 203               		.stabs	"enqueue:F(5,2)",36,0,177,enqueue
 204               		.stabs	"cb:P(0,54)",64,0,177,24
 205               		.stabs	"item:P(5,2)",64,0,177,22
 206               	.global	enqueue
 207               		.type	enqueue, @function
 208               	enqueue:
 209               		.stabd	46,0,0
 176:main.c        **** 
 177:main.c        **** uint8_t enqueue(CircularBuffer *cb, uint8_t item) {
 210               		.stabn	68,0,177,.LM10-.LFBB4
 211               	.LM10:
 212               	.LFBB4:
 213 0034 CF93      		push r28
 214 0036 DF93      		push r29
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 2 */
 218               	.L__stack_usage = 2
 219               	.LBB23:
 220               	.LBB24:
 168:main.c        ****     else return 0;
 221               		.stabn	68,0,168,.LM11-.LFBB4
GAS LISTING /tmp/ccCNCjxp.s 			page 8


 222               	.LM11:
 223 0038 FC01      		movw r30,r24
 224 003a EE5B      		subi r30,-66
 225 003c FF4F      		sbci r31,-1
 226 003e 4081      		ld r20,Z
 227 0040 4034      		cpi r20,lo8(64)
 228 0042 01F4      		brne .L14
 229               	.LBE24:
 230               	.LBE23:
 178:main.c        ****     if (isFull(cb)) {
 179:main.c        ****         return 0; /* buffer está cheio */
 231               		.stabn	68,0,179,.LM12-.LFBB4
 232               	.LM12:
 233 0044 80E0      		ldi r24,0
 234 0046 00C0      		rjmp .L16
 235               	.L14:
 180:main.c        ****     }
 181:main.c        ****     cb->buffer[cb->head] = item;
 236               		.stabn	68,0,181,.LM13-.LFBB4
 237               	.LM13:
 238 0048 DC01      		movw r26,r24
 239 004a A05C      		subi r26,-64
 240 004c BF4F      		sbci r27,-1
 241 004e 2C91      		ld r18,X
 242 0050 30E0      		ldi r19,0
 243 0052 EC01      		movw r28,r24
 244 0054 C20F      		add r28,r18
 245 0056 D31F      		adc r29,r19
 246 0058 6883      		st Y,r22
 182:main.c        ****     cb->head = (cb->head + 1) % BUFFER_SIZE; /* se o índice chegar ao fim do buffer, retorna ao co
 247               		.stabn	68,0,182,.LM14-.LFBB4
 248               	.LM14:
 249 005a 2F5F      		subi r18,-1
 250 005c 3F4F      		sbci r19,-1
 251 005e 2F73      		andi r18,63
 252 0060 3327      		clr r19
 253 0062 2C93      		st X,r18
 183:main.c        ****     cb->count++;
 254               		.stabn	68,0,183,.LM15-.LFBB4
 255               	.LM15:
 256 0064 4F5F      		subi r20,lo8(-(1))
 257 0066 4083      		st Z,r20
 184:main.c        ****     return 1;
 258               		.stabn	68,0,184,.LM16-.LFBB4
 259               	.LM16:
 260 0068 81E0      		ldi r24,lo8(1)
 261               	.L16:
 262               	/* epilogue start */
 185:main.c        **** }
 263               		.stabn	68,0,185,.LM17-.LFBB4
 264               	.LM17:
 265 006a DF91      		pop r29
 266 006c CF91      		pop r28
 267 006e 0895      		ret
 268               		.size	enqueue, .-enqueue
 269               	.Lscope4:
 270               		.stabs	"",36,0,0,.Lscope4-.LFBB4
GAS LISTING /tmp/ccCNCjxp.s 			page 9


 271               		.stabd	78,0,0
 272               		.stabs	"dequeue:F(5,2)",36,0,187,dequeue
 273               		.stabs	"cb:P(0,54)",64,0,187,24
 274               		.stabs	"item:P(0,55)=*(5,2)",64,0,187,22
 275               	.global	dequeue
 276               		.type	dequeue, @function
 277               	dequeue:
 278               		.stabd	46,0,0
 186:main.c        **** 
 187:main.c        **** uint8_t dequeue(CircularBuffer *cb, uint8_t *item) {
 279               		.stabn	68,0,187,.LM18-.LFBB5
 280               	.LM18:
 281               	.LFBB5:
 282 0070 CF93      		push r28
 283 0072 DF93      		push r29
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 2 */
 287               	.L__stack_usage = 2
 288               	.LBB31:
 289               	.LBB32:
 173:main.c        ****     else return 0;
 290               		.stabn	68,0,173,.LM19-.LFBB5
 291               	.LM19:
 292 0074 FC01      		movw r30,r24
 293 0076 EE5B      		subi r30,-66
 294 0078 FF4F      		sbci r31,-1
 295 007a 2081      		ld r18,Z
 296 007c 2223      		tst r18
 297 007e 01F0      		breq .L20
 298               	.LBE32:
 299               	.LBE31:
 300               	.LBB33:
 301               	.LBB34:
 188:main.c        ****     if (isEmpty(cb)) {
 189:main.c        ****         return 0; /* buffer está vazio */
 190:main.c        ****     }
 191:main.c        ****     *item = cb->buffer[cb->tail];
 302               		.stabn	68,0,191,.LM20-.LFBB5
 303               	.LM20:
 304 0080 DC01      		movw r26,r24
 305 0082 AF5B      		subi r26,-65
 306 0084 BF4F      		sbci r27,-1
 307 0086 2C91      		ld r18,X
 308 0088 EC01      		movw r28,r24
 309 008a C20F      		add r28,r18
 310 008c D11D      		adc r29,__zero_reg__
 311 008e 8881      		ld r24,Y
 312 0090 EB01      		movw r28,r22
 313 0092 8883      		st Y,r24
 192:main.c        ****     cb->tail = (cb->tail + 1) % BUFFER_SIZE; /* se índice chegar ao fim do buffer, retorna ao come
 314               		.stabn	68,0,192,.LM21-.LFBB5
 315               	.LM21:
 316 0094 8C91      		ld r24,X
 317 0096 90E0      		ldi r25,0
 318 0098 0196      		adiw r24,1
 319 009a 8F73      		andi r24,63
GAS LISTING /tmp/ccCNCjxp.s 			page 10


 320 009c 9927      		clr r25
 321 009e 8C93      		st X,r24
 193:main.c        ****     cb->count--;
 322               		.stabn	68,0,193,.LM22-.LFBB5
 323               	.LM22:
 324 00a0 8081      		ld r24,Z
 325 00a2 8150      		subi r24,lo8(-(-1))
 326 00a4 8083      		st Z,r24
 327 00a6 21E0      		ldi r18,lo8(1)
 328               	.L20:
 329               	.LBE34:
 330               	.LBE33:
 194:main.c        ****     return 1;
 195:main.c        **** }
 331               		.stabn	68,0,195,.LM23-.LFBB5
 332               	.LM23:
 333 00a8 822F      		mov r24,r18
 334               	/* epilogue start */
 335 00aa DF91      		pop r29
 336 00ac CF91      		pop r28
 337 00ae 0895      		ret
 338               		.size	dequeue, .-dequeue
 339               	.Lscope5:
 340               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 341               		.stabd	78,0,0
 342               		.stabs	"__vector_18:F(0,49)",36,0,197,__vector_18
 343               	.global	__vector_18
 344               		.type	__vector_18, @function
 345               	__vector_18:
 346               		.stabd	46,0,0
 196:main.c        **** 
 197:main.c        **** ISR(USART_RX_vect) {
 347               		.stabn	68,0,197,.LM24-.LFBB6
 348               	.LM24:
 349               	.LFBB6:
 350 00b0 1F92      		push r1
 351 00b2 0F92      		push r0
 352 00b4 0FB6      		in r0,__SREG__
 353 00b6 0F92      		push r0
 354 00b8 1124      		clr __zero_reg__
 355 00ba 2F93      		push r18
 356 00bc 3F93      		push r19
 357 00be 4F93      		push r20
 358 00c0 5F93      		push r21
 359 00c2 6F93      		push r22
 360 00c4 7F93      		push r23
 361 00c6 8F93      		push r24
 362 00c8 9F93      		push r25
 363 00ca AF93      		push r26
 364 00cc BF93      		push r27
 365 00ce EF93      		push r30
 366 00d0 FF93      		push r31
 367               	/* prologue: Signal */
 368               	/* frame size = 0 */
 369               	/* stack size = 15 */
 370               	.L__stack_usage = 15
 198:main.c        ****     uint8_t data = UDR0;
GAS LISTING /tmp/ccCNCjxp.s 			page 11


 371               		.stabn	68,0,198,.LM25-.LFBB6
 372               	.LM25:
 373 00d2 6091 C600 		lds r22,198
 199:main.c        ****     /* caractere de escape recebido: descarta o caractere e sobe a flag de escape */
 200:main.c        ****     if(data == ESCAPE)
 374               		.stabn	68,0,200,.LM26-.LFBB6
 375               	.LM26:
 376 00d6 6D37      		cpi r22,lo8(125)
 377 00d8 01F4      		brne .L22
 201:main.c        ****     {
 202:main.c        ****         esc = 1;
 378               		.stabn	68,0,202,.LM27-.LFBB6
 379               	.LM27:
 380 00da 81E0      		ldi r24,lo8(1)
 381 00dc 8093 0000 		sts esc,r24
 382 00e0 00C0      		rjmp .L21
 383               	.L22:
 203:main.c        ****     }
 204:main.c        ****     /* caractere XON recebido sem um caractere de escape o precedendo: descarta o caractere de cont
 205:main.c        ****     else if(data == XON && esc == 0){
 384               		.stabn	68,0,205,.LM28-.LFBB6
 385               	.LM28:
 386 00e2 6131      		cpi r22,lo8(17)
 387 00e4 01F4      		brne .L24
 388               		.stabn	68,0,205,.LM29-.LFBB6
 389               	.LM29:
 390 00e6 8091 0000 		lds r24,esc
 391 00ea 8111      		cpse r24,__zero_reg__
 392 00ec 00C0      		rjmp .L28
 206:main.c        ****         flow = 1;
 393               		.stabn	68,0,206,.LM30-.LFBB6
 394               	.LM30:
 395 00ee 81E0      		ldi r24,lo8(1)
 396 00f0 8093 0000 		sts flow,r24
 397 00f4 00C0      		rjmp .L21
 398               	.L24:
 207:main.c        ****     }
 208:main.c        ****     /* caractere XOFF recebido sem um escape o precedendo: descarta o caractere e desliga o fluxo *
 209:main.c        ****     else if(data == XOFF && esc == 0){
 399               		.stabn	68,0,209,.LM31-.LFBB6
 400               	.LM31:
 401 00f6 6331      		cpi r22,lo8(19)
 402 00f8 01F4      		brne .L26
 403               		.stabn	68,0,209,.LM32-.LFBB6
 404               	.LM32:
 405 00fa 8091 0000 		lds r24,esc
 406 00fe 8111      		cpse r24,__zero_reg__
 407 0100 00C0      		rjmp .L28
 210:main.c        ****         flow = 0;
 408               		.stabn	68,0,210,.LM33-.LFBB6
 409               	.LM33:
 410 0102 1092 0000 		sts flow,__zero_reg__
 411 0106 00C0      		rjmp .L21
 412               	.L28:
 211:main.c        ****     }
 212:main.c        ****     /* caractere de sincronismo recebido, sem caractere de escape o precedendo: informa o fim do pa
 213:main.c        ****     else if(data == SYNC && esc == 0){
GAS LISTING /tmp/ccCNCjxp.s 			page 12


 214:main.c        ****         enqueue(&rxBuffer, data);
 215:main.c        ****     }
 216:main.c        ****     /* caractere especial recebido, sendo precedido de escape: adiciona o valor ao buffer */
 217:main.c        ****     else if((data == XON    && esc == 1) ||
 218:main.c        ****             (data == XOFF   && esc == 1) ||
 219:main.c        ****             (data == ESCAPE && esc == 1) ||
 220:main.c        ****             (data == SYNC   && esc == 1)){
 413               		.stabn	68,0,220,.LM34-.LFBB6
 414               	.LM34:
 415 0108 8091 0000 		lds r24,esc
 416 010c 8130      		cpi r24,lo8(1)
 417 010e 01F4      		brne .L30
 221:main.c        ****                 esc = 0;
 418               		.stabn	68,0,221,.LM35-.LFBB6
 419               	.LM35:
 420 0110 1092 0000 		sts esc,__zero_reg__
 421               	.L30:
 222:main.c        ****                 enqueue(&rxBuffer, data);
 223:main.c        ****     }
 224:main.c        ****     else{
 225:main.c        ****         enqueue(&rxBuffer, data);
 422               		.stabn	68,0,225,.LM36-.LFBB6
 423               	.LM36:
 424 0114 80E0      		ldi r24,lo8(rxBuffer)
 425 0116 90E0      		ldi r25,hi8(rxBuffer)
 426 0118 0E94 0000 		call enqueue
 226:main.c        ****     }
 227:main.c        **** }
 427               		.stabn	68,0,227,.LM37-.LFBB6
 428               	.LM37:
 429 011c 00C0      		rjmp .L21
 430               	.L26:
 213:main.c        ****         enqueue(&rxBuffer, data);
 431               		.stabn	68,0,213,.LM38-.LFBB6
 432               	.LM38:
 433 011e 6E37      		cpi r22,lo8(126)
 434 0120 01F4      		brne .L30
 213:main.c        ****         enqueue(&rxBuffer, data);
 435               		.stabn	68,0,213,.LM39-.LFBB6
 436               	.LM39:
 437 0122 8091 0000 		lds r24,esc
 438 0126 8111      		cpse r24,__zero_reg__
 439 0128 00C0      		rjmp .L28
 214:main.c        ****     }
 440               		.stabn	68,0,214,.LM40-.LFBB6
 441               	.LM40:
 442 012a 6EE7      		ldi r22,lo8(126)
 443 012c 00C0      		rjmp .L30
 444               	.L21:
 445               	/* epilogue start */
 446               		.stabn	68,0,227,.LM41-.LFBB6
 447               	.LM41:
 448 012e FF91      		pop r31
 449 0130 EF91      		pop r30
 450 0132 BF91      		pop r27
 451 0134 AF91      		pop r26
 452 0136 9F91      		pop r25
GAS LISTING /tmp/ccCNCjxp.s 			page 13


 453 0138 8F91      		pop r24
 454 013a 7F91      		pop r23
 455 013c 6F91      		pop r22
 456 013e 5F91      		pop r21
 457 0140 4F91      		pop r20
 458 0142 3F91      		pop r19
 459 0144 2F91      		pop r18
 460 0146 0F90      		pop r0
 461 0148 0FBE      		out __SREG__,r0
 462 014a 0F90      		pop r0
 463 014c 1F90      		pop r1
 464 014e 1895      		reti
 465               		.size	__vector_18, .-__vector_18
 466               		.stabs	"data:r(5,2)",64,0,198,22
 467               		.stabn	192,0,0,.LFBB6-.LFBB6
 468               		.stabn	224,0,0,.Lscope6-.LFBB6
 469               	.Lscope6:
 470               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 471               		.stabd	78,0,0
 472               		.stabs	"__vector_19:F(0,49)",36,0,229,__vector_19
 473               	.global	__vector_19
 474               		.type	__vector_19, @function
 475               	__vector_19:
 476               		.stabd	46,0,0
 228:main.c        **** 
 229:main.c        **** ISR(USART_UDRE_vect) {
 477               		.stabn	68,0,229,.LM42-.LFBB7
 478               	.LM42:
 479               	.LFBB7:
 480 0150 1F92      		push r1
 481 0152 0F92      		push r0
 482 0154 0FB6      		in r0,__SREG__
 483 0156 0F92      		push r0
 484 0158 1124      		clr __zero_reg__
 485 015a 2F93      		push r18
 486 015c 3F93      		push r19
 487 015e 4F93      		push r20
 488 0160 5F93      		push r21
 489 0162 6F93      		push r22
 490 0164 7F93      		push r23
 491 0166 8F93      		push r24
 492 0168 9F93      		push r25
 493 016a AF93      		push r26
 494 016c BF93      		push r27
 495 016e EF93      		push r30
 496 0170 FF93      		push r31
 497 0172 CF93      		push r28
 498 0174 DF93      		push r29
 499 0176 1F92      		push __zero_reg__
 500 0178 CDB7      		in r28,__SP_L__
 501 017a DEB7      		in r29,__SP_H__
 502               	/* prologue: Signal */
 503               	/* frame size = 1 */
 504               	/* stack size = 18 */
 505               	.L__stack_usage = 18
 506               	.LBB35:
 507               	.LBB36:
GAS LISTING /tmp/ccCNCjxp.s 			page 14


 173:main.c        ****     else return 0;
 508               		.stabn	68,0,173,.LM43-.LFBB7
 509               	.LM43:
 510 017c 8091 0000 		lds r24,txBuffer+66
 511 0180 8111      		cpse r24,__zero_reg__
 512 0182 00C0      		rjmp .L44
 513               	.LBE36:
 514               	.LBE35:
 230:main.c        ****     /* se o buffer de transmissão estiver vazio, desabilita a interrupção UDRIE0 */
 231:main.c        ****     if (isEmpty(&txBuffer)) {
 232:main.c        ****         UCSR0B &= ~(1 << UDRIE0);
 515               		.stabn	68,0,232,.LM44-.LFBB7
 516               	.LM44:
 517 0184 8091 C100 		lds r24,193
 518 0188 8F7D      		andi r24,lo8(-33)
 519 018a 8093 C100 		sts 193,r24
 520 018e 00C0      		rjmp .L40
 521               	.L44:
 522               	.LBB37:
 233:main.c        ****     }
 234:main.c        ****     /* se houver dados no buffer de transmissão, envia o dado mais antigo */
 235:main.c        ****     else{
 236:main.c        ****         uint8_t data;
 237:main.c        ****         dequeue(&txBuffer, &data);
 523               		.stabn	68,0,237,.LM45-.LFBB7
 524               	.LM45:
 525 0190 BE01      		movw r22,r28
 526 0192 6F5F      		subi r22,-1
 527 0194 7F4F      		sbci r23,-1
 528 0196 80E0      		ldi r24,lo8(txBuffer)
 529 0198 90E0      		ldi r25,hi8(txBuffer)
 530 019a 0E94 0000 		call dequeue
 238:main.c        ****         UDR0 = data;
 531               		.stabn	68,0,238,.LM46-.LFBB7
 532               	.LM46:
 533 019e 8981      		ldd r24,Y+1
 534 01a0 8093 C600 		sts 198,r24
 535               	.L40:
 536               	/* epilogue start */
 537               	.LBE37:
 239:main.c        ****     }
 240:main.c        **** }
 538               		.stabn	68,0,240,.LM47-.LFBB7
 539               	.LM47:
 540 01a4 0F90      		pop __tmp_reg__
 541 01a6 DF91      		pop r29
 542 01a8 CF91      		pop r28
 543 01aa FF91      		pop r31
 544 01ac EF91      		pop r30
 545 01ae BF91      		pop r27
 546 01b0 AF91      		pop r26
 547 01b2 9F91      		pop r25
 548 01b4 8F91      		pop r24
 549 01b6 7F91      		pop r23
 550 01b8 6F91      		pop r22
 551 01ba 5F91      		pop r21
 552 01bc 4F91      		pop r20
GAS LISTING /tmp/ccCNCjxp.s 			page 15


 553 01be 3F91      		pop r19
 554 01c0 2F91      		pop r18
 555 01c2 0F90      		pop r0
 556 01c4 0FBE      		out __SREG__,r0
 557 01c6 0F90      		pop r0
 558 01c8 1F90      		pop r1
 559 01ca 1895      		reti
 560               		.size	__vector_19, .-__vector_19
 561               		.stabs	"data:(5,2)",128,0,236,1
 562               		.stabn	192,0,0,.LBB37-.LFBB7
 563               		.stabn	224,0,0,.LBE37-.LFBB7
 564               	.Lscope7:
 565               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 566               		.stabd	78,0,0
 567               		.stabs	"__vector_11:F(0,49)",36,0,242,__vector_11
 568               	.global	__vector_11
 569               		.type	__vector_11, @function
 570               	__vector_11:
 571               		.stabd	46,0,0
 241:main.c        **** 
 242:main.c        **** ISR(TIMER1_COMPA_vect)
 243:main.c        **** {
 572               		.stabn	68,0,243,.LM48-.LFBB8
 573               	.LM48:
 574               	.LFBB8:
 575 01cc 1F92      		push r1
 576 01ce 0F92      		push r0
 577 01d0 0FB6      		in r0,__SREG__
 578 01d2 0F92      		push r0
 579 01d4 1124      		clr __zero_reg__
 580 01d6 8F93      		push r24
 581 01d8 9F93      		push r25
 582 01da AF93      		push r26
 583 01dc BF93      		push r27
 584               	/* prologue: Signal */
 585               	/* frame size = 0 */
 586               	/* stack size = 7 */
 587               	.L__stack_usage = 7
 244:main.c        ****     milisecond_count++;
 588               		.stabn	68,0,244,.LM49-.LFBB8
 589               	.LM49:
 590 01de 8091 0000 		lds r24,milisecond_count
 591 01e2 9091 0000 		lds r25,milisecond_count+1
 592 01e6 A091 0000 		lds r26,milisecond_count+2
 593 01ea B091 0000 		lds r27,milisecond_count+3
 594 01ee 0196      		adiw r24,1
 595 01f0 A11D      		adc r26,__zero_reg__
 596 01f2 B11D      		adc r27,__zero_reg__
 597 01f4 8093 0000 		sts milisecond_count,r24
 598 01f8 9093 0000 		sts milisecond_count+1,r25
 599 01fc A093 0000 		sts milisecond_count+2,r26
 600 0200 B093 0000 		sts milisecond_count+3,r27
 601               	/* epilogue start */
 245:main.c        **** }
 602               		.stabn	68,0,245,.LM50-.LFBB8
 603               	.LM50:
 604 0204 BF91      		pop r27
GAS LISTING /tmp/ccCNCjxp.s 			page 16


 605 0206 AF91      		pop r26
 606 0208 9F91      		pop r25
 607 020a 8F91      		pop r24
 608 020c 0F90      		pop r0
 609 020e 0FBE      		out __SREG__,r0
 610 0210 0F90      		pop r0
 611 0212 1F90      		pop r1
 612 0214 1895      		reti
 613               		.size	__vector_11, .-__vector_11
 614               	.Lscope8:
 615               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 616               		.stabd	78,0,0
 617               		.stabs	"is_flow_on:F(5,2)",36,0,316,is_flow_on
 618               	.global	is_flow_on
 619               		.type	is_flow_on, @function
 620               	is_flow_on:
 621               		.stabd	46,0,0
 246:main.c        **** 
 247:main.c        **** uint8_t write(uint8_t *buf, uint8_t n, int8_t close_packet){
 248:main.c        ****     uint8_t data, counter = 0;
 249:main.c        ****     static uint8_t position = 0;
 250:main.c        ****     while(n--){
 251:main.c        ****         if(!is_flow_on()){
 252:main.c        ****             return 0;
 253:main.c        ****         }
 254:main.c        ****         else if(position > strlen((const char *)buf) || buf[position] == '\0'){
 255:main.c        ****             position = 0;
 256:main.c        ****             break;
 257:main.c        ****         }
 258:main.c        ****         else{
 259:main.c        ****             data = buf[position];
 260:main.c        ****             /* se transmitir valor de caractere de controle, envia um caractere de escape antes */
 261:main.c        ****             if(data == XON || data == XOFF || data == SYNC || data == ESCAPE){
 262:main.c        ****                 USART_Transmit(ESCAPE);
 263:main.c        ****                 USART_Transmit(data);
 264:main.c        ****             }
 265:main.c        ****             else USART_Transmit(data);
 266:main.c        ****             counter++;
 267:main.c        ****             position++;
 268:main.c        ****         }
 269:main.c        ****     }
 270:main.c        ****     if(close_packet){
 271:main.c        ****         USART_Transmit(SYNC);
 272:main.c        ****         position = 0;
 273:main.c        ****     }
 274:main.c        ****     return counter;
 275:main.c        **** }
 276:main.c        **** 
 277:main.c        **** uint8_t read(uint8_t *buf, uint8_t n){
 278:main.c        ****     uint8_t data, counter = 0;
 279:main.c        ****     static uint8_t position = 0;
 280:main.c        ****     while(n--){
 281:main.c        ****         data = USART_Receive();
 282:main.c        ****         if(!receiver_flow){
 283:main.c        ****             return 0;
 284:main.c        ****         }
 285:main.c        ****         else if(data == SYNC){
GAS LISTING /tmp/ccCNCjxp.s 			page 17


 286:main.c        ****             buf[position] = '\0';  /* fecha a string */ 
 287:main.c        ****             position = 0;  /* fim do pacote, reseta a posição do índice do buffer */
 288:main.c        ****             return counter;
 289:main.c        ****         }
 290:main.c        ****         else if(position > strlen((const char *)buf)){
 291:main.c        ****             buf[position] = '\0';  /* se buffer estourar, fecha a string e reseta o índice */
 292:main.c        ****             position = 0;
 293:main.c        ****             break;
 294:main.c        ****         }
 295:main.c        ****         else{
 296:main.c        ****             buf[position] = data; 
 297:main.c        ****             counter++;
 298:main.c        ****             position++;
 299:main.c        ****         }
 300:main.c        ****     }
 301:main.c        ****     return n + 1;        
 302:main.c        **** }
 303:main.c        **** 
 304:main.c        **** void flow_off(void){
 305:main.c        ****     /* envia o caractere de controle XOFF para desabilitar o fluxo de dados no outro dispositivo */
 306:main.c        ****     USART_Transmit(XOFF);
 307:main.c        ****     receiver_flow = 0;
 308:main.c        **** }
 309:main.c        **** 
 310:main.c        **** void flow_on(void){
 311:main.c        ****     /* envia o caractere de controle XON para habilitar o fluxo no outro dispositivo */
 312:main.c        ****     USART_Transmit(XON);
 313:main.c        ****     receiver_flow = 1;
 314:main.c        **** }
 315:main.c        **** 
 316:main.c        **** uint8_t is_flow_on(void){
 622               		.stabn	68,0,316,.LM51-.LFBB9
 623               	.LM51:
 624               	.LFBB9:
 625               	/* prologue: function */
 626               	/* frame size = 0 */
 627               	/* stack size = 0 */
 628               	.L__stack_usage = 0
 317:main.c        ****     /* verifica se houve o recebimento de um caractere de controle de fluxo */
 318:main.c        ****     if(flow) 
 629               		.stabn	68,0,318,.LM52-.LFBB9
 630               	.LM52:
 631 0216 9091 0000 		lds r25,flow
 632 021a 81E0      		ldi r24,lo8(1)
 633 021c 9111      		cpse r25,__zero_reg__
 634 021e 00C0      		rjmp .L47
 635 0220 80E0      		ldi r24,0
 636               	.L47:
 319:main.c        ****         return (uint8_t)1;
 320:main.c        ****     else
 321:main.c        ****         return (uint8_t)0;
 322:main.c        **** }
 637               		.stabn	68,0,322,.LM53-.LFBB9
 638               	.LM53:
 639 0222 0895      		ret
 640               		.size	is_flow_on, .-is_flow_on
 641               	.Lscope9:
GAS LISTING /tmp/ccCNCjxp.s 			page 18


 642               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 643               		.stabd	78,0,0
 644               		.stabs	"USART_Transmit:F(0,49)",36,0,324,USART_Transmit
 645               		.stabs	"data:P(5,2)",64,0,324,24
 646               	.global	USART_Transmit
 647               		.type	USART_Transmit, @function
 648               	USART_Transmit:
 649               		.stabd	46,0,0
 323:main.c        **** 
 324:main.c        **** void USART_Transmit(uint8_t data){
 650               		.stabn	68,0,324,.LM54-.LFBB10
 651               	.LM54:
 652               	.LFBB10:
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 0 */
 656               	.L__stack_usage = 0
 657               	.LBB38:
 658               	.LBB39:
 168:main.c        ****     else return 0;
 659               		.stabn	68,0,168,.LM55-.LFBB10
 660               	.LM55:
 661 0224 9091 0000 		lds r25,txBuffer+66
 662 0228 9034      		cpi r25,lo8(64)
 663 022a 01F4      		brne .L52
 664               	.L51:
 665 022c 00C0      		rjmp .L51
 666               	.L52:
 667 022e 682F      		mov r22,r24
 668               	.LBE39:
 669               	.LBE38:
 325:main.c        ****     /* não faz nada enquanto o buffer TX estiver cheio */
 326:main.c        ****     while (isFull(&txBuffer));
 327:main.c        ****     /* se buffer tx tiver espaço, enfileira o byte para transmissão */
 328:main.c        ****     enqueue(&txBuffer, data);
 670               		.stabn	68,0,328,.LM56-.LFBB10
 671               	.LM56:
 672 0230 80E0      		ldi r24,lo8(txBuffer)
 673 0232 90E0      		ldi r25,hi8(txBuffer)
 674 0234 0E94 0000 		call enqueue
 329:main.c        ****     /* habilita a interrupção para o envio de um byte */
 330:main.c        ****     UCSR0B |= (1 << UDRIE0);
 675               		.stabn	68,0,330,.LM57-.LFBB10
 676               	.LM57:
 677 0238 8091 C100 		lds r24,193
 678 023c 8062      		ori r24,lo8(32)
 679 023e 8093 C100 		sts 193,r24
 680 0242 0895      		ret
 681               		.size	USART_Transmit, .-USART_Transmit
 682               	.Lscope10:
 683               		.stabs	"",36,0,0,.Lscope10-.LFBB10
 684               		.stabd	78,0,0
 685               		.stabs	"write:F(5,2)",36,0,247,write
 686               		.stabs	"buf:P(0,55)",64,0,247,14
 687               		.stabs	"n:P(5,2)",64,0,247,29
 688               		.stabs	"close_packet:P(5,1)",64,0,247,13
 689               	.global	write
GAS LISTING /tmp/ccCNCjxp.s 			page 19


 690               		.type	write, @function
 691               	write:
 692               		.stabd	46,0,0
 247:main.c        ****     uint8_t data, counter = 0;
 693               		.stabn	68,0,247,.LM58-.LFBB11
 694               	.LM58:
 695               	.LFBB11:
 696 0244 DF92      		push r13
 697 0246 EF92      		push r14
 698 0248 FF92      		push r15
 699 024a 0F93      		push r16
 700 024c 1F93      		push r17
 701 024e CF93      		push r28
 702 0250 DF93      		push r29
 703               	/* prologue: function */
 704               	/* frame size = 0 */
 705               	/* stack size = 7 */
 706               	.L__stack_usage = 7
 707 0252 7C01      		movw r14,r24
 708 0254 D62F      		mov r29,r22
 709 0256 D42E      		mov r13,r20
 248:main.c        ****     static uint8_t position = 0;
 710               		.stabn	68,0,248,.LM59-.LFBB11
 711               	.LM59:
 712 0258 10E0      		ldi r17,0
 713               	.L54:
 250:main.c        ****         if(!is_flow_on()){
 714               		.stabn	68,0,250,.LM60-.LFBB11
 715               	.LM60:
 716 025a 1D17      		cp r17,r29
 717 025c 01F0      		breq .L58
 251:main.c        ****             return 0;
 718               		.stabn	68,0,251,.LM61-.LFBB11
 719               	.LM61:
 720 025e 0E94 0000 		call is_flow_on
 721 0262 8823      		tst r24
 722 0264 01F0      		breq .L55
 254:main.c        ****             position = 0;
 723               		.stabn	68,0,254,.LM62-.LFBB11
 724               	.LM62:
 725 0266 0091 0000 		lds r16,position.1864
 726 026a 802F      		mov r24,r16
 727 026c 90E0      		ldi r25,0
 728 026e F701      		movw r30,r14
 729               		0:
 730 0270 0190      		ld __tmp_reg__,Z+
 731 0272 0020      		tst __tmp_reg__
 732 0274 01F4      		brne 0b
 733 0276 3197      		sbiw r30,1
 734 0278 EE19      		sub r30,r14
 735 027a FF09      		sbc r31,r15
 736 027c E817      		cp r30,r24
 737 027e F907      		cpc r31,r25
 738 0280 00F0      		brlo .L56
 254:main.c        ****             position = 0;
 739               		.stabn	68,0,254,.LM63-.LFBB11
 740               	.LM63:
GAS LISTING /tmp/ccCNCjxp.s 			page 20


 741 0282 F701      		movw r30,r14
 742 0284 E80F      		add r30,r24
 743 0286 F91F      		adc r31,r25
 744 0288 C081      		ld r28,Z
 745 028a C111      		cpse r28,__zero_reg__
 746 028c 00C0      		rjmp .L57
 747               	.L56:
 255:main.c        ****             break;
 748               		.stabn	68,0,255,.LM64-.LFBB11
 749               	.LM64:
 750 028e 1092 0000 		sts position.1864,__zero_reg__
 256:main.c        ****         }
 751               		.stabn	68,0,256,.LM65-.LFBB11
 752               	.LM65:
 753 0292 D12F      		mov r29,r17
 754 0294 00C0      		rjmp .L58
 755               	.L57:
 261:main.c        ****                 USART_Transmit(ESCAPE);
 756               		.stabn	68,0,261,.LM66-.LFBB11
 757               	.LM66:
 758 0296 8C2F      		mov r24,r28
 759 0298 8D7F      		andi r24,lo8(-3)
 760 029a 8131      		cpi r24,lo8(17)
 761 029c 01F0      		breq .L59
 261:main.c        ****                 USART_Transmit(ESCAPE);
 762               		.stabn	68,0,261,.LM67-.LFBB11
 763               	.LM67:
 764 029e 83E8      		ldi r24,lo8(-125)
 765 02a0 8C0F      		add r24,r28
 766 02a2 8230      		cpi r24,lo8(2)
 767 02a4 00F4      		brsh .L60
 768               	.L59:
 262:main.c        ****                 USART_Transmit(data);
 769               		.stabn	68,0,262,.LM68-.LFBB11
 770               	.LM68:
 771 02a6 8DE7      		ldi r24,lo8(125)
 772 02a8 0E94 0000 		call USART_Transmit
 773               	.L60:
 265:main.c        ****             counter++;
 774               		.stabn	68,0,265,.LM69-.LFBB11
 775               	.LM69:
 776 02ac 8C2F      		mov r24,r28
 777 02ae 0E94 0000 		call USART_Transmit
 266:main.c        ****             position++;
 778               		.stabn	68,0,266,.LM70-.LFBB11
 779               	.LM70:
 780 02b2 1F5F      		subi r17,lo8(-(1))
 267:main.c        ****         }
 781               		.stabn	68,0,267,.LM71-.LFBB11
 782               	.LM71:
 783 02b4 0F5F      		subi r16,lo8(-(1))
 784 02b6 0093 0000 		sts position.1864,r16
 785 02ba 00C0      		rjmp .L54
 786               	.L58:
 270:main.c        ****         USART_Transmit(SYNC);
 787               		.stabn	68,0,270,.LM72-.LFBB11
 788               	.LM72:
GAS LISTING /tmp/ccCNCjxp.s 			page 21


 789 02bc DD20      		tst r13
 790 02be 01F0      		breq .L63
 271:main.c        ****         position = 0;
 791               		.stabn	68,0,271,.LM73-.LFBB11
 792               	.LM73:
 793 02c0 8EE7      		ldi r24,lo8(126)
 794 02c2 0E94 0000 		call USART_Transmit
 272:main.c        ****     }
 795               		.stabn	68,0,272,.LM74-.LFBB11
 796               	.LM74:
 797 02c6 1092 0000 		sts position.1864,__zero_reg__
 798               	.L63:
 799 02ca 8D2F      		mov r24,r29
 800               	.L55:
 801               	/* epilogue start */
 275:main.c        **** 
 802               		.stabn	68,0,275,.LM75-.LFBB11
 803               	.LM75:
 804 02cc DF91      		pop r29
 805 02ce CF91      		pop r28
 806 02d0 1F91      		pop r17
 807 02d2 0F91      		pop r16
 808 02d4 FF90      		pop r15
 809 02d6 EF90      		pop r14
 810 02d8 DF90      		pop r13
 811 02da 0895      		ret
 812               		.size	write, .-write
 813               		.stabs	"position:V(5,2)",38,0,249,position.1864
 814               		.stabn	192,0,0,.LFBB11-.LFBB11
 815               		.stabn	224,0,0,.Lscope11-.LFBB11
 816               	.Lscope11:
 817               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 818               		.stabd	78,0,0
 819               		.stabs	"flow_off:F(0,49)",36,0,304,flow_off
 820               	.global	flow_off
 821               		.type	flow_off, @function
 822               	flow_off:
 823               		.stabd	46,0,0
 304:main.c        ****     /* envia o caractere de controle XOFF para desabilitar o fluxo de dados no outro dispositivo */
 824               		.stabn	68,0,304,.LM76-.LFBB12
 825               	.LM76:
 826               	.LFBB12:
 827               	/* prologue: function */
 828               	/* frame size = 0 */
 829               	/* stack size = 0 */
 830               	.L__stack_usage = 0
 306:main.c        ****     receiver_flow = 0;
 831               		.stabn	68,0,306,.LM77-.LFBB12
 832               	.LM77:
 833 02dc 83E1      		ldi r24,lo8(19)
 834 02de 0E94 0000 		call USART_Transmit
 307:main.c        **** }
 835               		.stabn	68,0,307,.LM78-.LFBB12
 836               	.LM78:
 837 02e2 1092 0000 		sts receiver_flow,__zero_reg__
 838 02e6 0895      		ret
 839               		.size	flow_off, .-flow_off
GAS LISTING /tmp/ccCNCjxp.s 			page 22


 840               	.Lscope12:
 841               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 842               		.stabd	78,0,0
 843               		.stabs	"flow_on:F(0,49)",36,0,310,flow_on
 844               	.global	flow_on
 845               		.type	flow_on, @function
 846               	flow_on:
 847               		.stabd	46,0,0
 310:main.c        ****     /* envia o caractere de controle XON para habilitar o fluxo no outro dispositivo */
 848               		.stabn	68,0,310,.LM79-.LFBB13
 849               	.LM79:
 850               	.LFBB13:
 851               	/* prologue: function */
 852               	/* frame size = 0 */
 853               	/* stack size = 0 */
 854               	.L__stack_usage = 0
 312:main.c        ****     receiver_flow = 1;
 855               		.stabn	68,0,312,.LM80-.LFBB13
 856               	.LM80:
 857 02e8 81E1      		ldi r24,lo8(17)
 858 02ea 0E94 0000 		call USART_Transmit
 313:main.c        **** }
 859               		.stabn	68,0,313,.LM81-.LFBB13
 860               	.LM81:
 861 02ee 81E0      		ldi r24,lo8(1)
 862 02f0 8093 0000 		sts receiver_flow,r24
 863 02f4 0895      		ret
 864               		.size	flow_on, .-flow_on
 865               	.Lscope13:
 866               		.stabs	"",36,0,0,.Lscope13-.LFBB13
 867               		.stabd	78,0,0
 868               		.stabs	"USART_Receive:F(5,2)",36,0,333,USART_Receive
 869               	.global	USART_Receive
 870               		.type	USART_Receive, @function
 871               	USART_Receive:
 872               		.stabd	46,0,0
 331:main.c        **** }
 332:main.c        **** 
 333:main.c        **** uint8_t USART_Receive(void){
 873               		.stabn	68,0,333,.LM82-.LFBB14
 874               	.LM82:
 875               	.LFBB14:
 876 02f6 CF93      		push r28
 877 02f8 DF93      		push r29
 878 02fa 1F92      		push __zero_reg__
 879 02fc CDB7      		in r28,__SP_L__
 880 02fe DEB7      		in r29,__SP_H__
 881               	/* prologue: function */
 882               	/* frame size = 1 */
 883               	/* stack size = 3 */
 884               	.L__stack_usage = 3
 885               	.LBB40:
 886               	.LBB41:
 173:main.c        ****     else return 0;
 887               		.stabn	68,0,173,.LM83-.LFBB14
 888               	.LM83:
 889 0300 8091 0000 		lds r24,rxBuffer+66
GAS LISTING /tmp/ccCNCjxp.s 			page 23


 890 0304 8111      		cpse r24,__zero_reg__
 891 0306 00C0      		rjmp .L76
 892               	.L75:
 893 0308 00C0      		rjmp .L75
 894               	.L76:
 895               	.LBE41:
 896               	.LBE40:
 334:main.c        ****     uint8_t data;
 335:main.c        ****     /* não faz nada se o buffer de leitura estiver vazio (sem dados para ler)*/
 336:main.c        ****     while (isEmpty(&rxBuffer));
 337:main.c        ****     /* quando tiver dados, desenfileira e retorna o byte */
 338:main.c        ****     dequeue(&rxBuffer, &data);
 897               		.stabn	68,0,338,.LM84-.LFBB14
 898               	.LM84:
 899 030a BE01      		movw r22,r28
 900 030c 6F5F      		subi r22,-1
 901 030e 7F4F      		sbci r23,-1
 902 0310 80E0      		ldi r24,lo8(rxBuffer)
 903 0312 90E0      		ldi r25,hi8(rxBuffer)
 904 0314 0E94 0000 		call dequeue
 339:main.c        ****     return data;
 340:main.c        **** }
 905               		.stabn	68,0,340,.LM85-.LFBB14
 906               	.LM85:
 907 0318 8981      		ldd r24,Y+1
 908               	/* epilogue start */
 909 031a 0F90      		pop __tmp_reg__
 910 031c DF91      		pop r29
 911 031e CF91      		pop r28
 912 0320 0895      		ret
 913               		.size	USART_Receive, .-USART_Receive
 914               		.stabs	"data:(5,2)",128,0,334,1
 915               		.stabn	192,0,0,.LFBB14-.LFBB14
 916               		.stabn	224,0,0,.Lscope14-.LFBB14
 917               	.Lscope14:
 918               		.stabs	"",36,0,0,.Lscope14-.LFBB14
 919               		.stabd	78,0,0
 920               		.stabs	"read:F(5,2)",36,0,277,read
 921               		.stabs	"buf:P(0,55)",64,0,277,16
 922               		.stabs	"n:P(5,2)",64,0,277,29
 923               	.global	read
 924               		.type	read, @function
 925               	read:
 926               		.stabd	46,0,0
 277:main.c        ****     uint8_t data, counter = 0;
 927               		.stabn	68,0,277,.LM86-.LFBB15
 928               	.LM86:
 929               	.LFBB15:
 930 0322 FF92      		push r15
 931 0324 0F93      		push r16
 932 0326 1F93      		push r17
 933 0328 CF93      		push r28
 934 032a DF93      		push r29
 935               	/* prologue: function */
 936               	/* frame size = 0 */
 937               	/* stack size = 5 */
 938               	.L__stack_usage = 5
GAS LISTING /tmp/ccCNCjxp.s 			page 24


 939 032c 8C01      		movw r16,r24
 940 032e D62F      		mov r29,r22
 280:main.c        ****         data = USART_Receive();
 941               		.stabn	68,0,280,.LM87-.LFBB15
 942               	.LM87:
 943 0330 C62F      		mov r28,r22
 944               	.L78:
 945 0332 FD2E      		mov r15,r29
 946 0334 FC1A      		sub r15,r28
 947 0336 CC23      		tst r28
 948 0338 01F0      		breq .L84
 281:main.c        ****         if(!receiver_flow){
 949               		.stabn	68,0,281,.LM88-.LFBB15
 950               	.LM88:
 951 033a 0E94 0000 		call USART_Receive
 282:main.c        ****             return 0;
 952               		.stabn	68,0,282,.LM89-.LFBB15
 953               	.LM89:
 954 033e 9091 0000 		lds r25,receiver_flow
 955 0342 9111      		cpse r25,__zero_reg__
 956 0344 00C0      		rjmp .L79
 957               	.L84:
 283:main.c        ****         }
 958               		.stabn	68,0,283,.LM90-.LFBB15
 959               	.LM90:
 960 0346 C0E0      		ldi r28,0
 961 0348 00C0      		rjmp .L80
 962               	.L79:
 963 034a 9091 0000 		lds r25,position.1874
 285:main.c        ****             buf[position] = '\0';  /* fecha a string */ 
 964               		.stabn	68,0,285,.LM91-.LFBB15
 965               	.LM91:
 966 034e 8E37      		cpi r24,lo8(126)
 967 0350 01F4      		brne .L81
 286:main.c        ****             position = 0;  /* fim do pacote, reseta a posição do índice do buffer */
 968               		.stabn	68,0,286,.LM92-.LFBB15
 969               	.LM92:
 970 0352 F801      		movw r30,r16
 971 0354 E90F      		add r30,r25
 972 0356 F11D      		adc r31,__zero_reg__
 973 0358 1082      		st Z,__zero_reg__
 287:main.c        ****             return counter;
 974               		.stabn	68,0,287,.LM93-.LFBB15
 975               	.LM93:
 976 035a 1092 0000 		sts position.1874,__zero_reg__
 288:main.c        ****         }
 977               		.stabn	68,0,288,.LM94-.LFBB15
 978               	.LM94:
 979 035e CF2D      		mov r28,r15
 980 0360 00C0      		rjmp .L80
 981               	.L81:
 290:main.c        ****             buf[position] = '\0';  /* se buffer estourar, fecha a string e reseta o índice */
 982               		.stabn	68,0,290,.LM95-.LFBB15
 983               	.LM95:
 984 0362 292F      		mov r18,r25
 985 0364 30E0      		ldi r19,0
 986 0366 F801      		movw r30,r16
GAS LISTING /tmp/ccCNCjxp.s 			page 25


 987               		0:
 988 0368 0190      		ld __tmp_reg__,Z+
 989 036a 0020      		tst __tmp_reg__
 990 036c 01F4      		brne 0b
 991 036e 3197      		sbiw r30,1
 992 0370 E01B      		sub r30,r16
 993 0372 F10B      		sbc r31,r17
 994 0374 4FEF      		ldi r20,lo8(-1)
 995 0376 4C0F      		add r20,r28
 996 0378 D801      		movw r26,r16
 997 037a A20F      		add r26,r18
 998 037c B31F      		adc r27,r19
 999 037e E217      		cp r30,r18
 1000 0380 F307      		cpc r31,r19
 1001 0382 00F4      		brsh .L82
 291:main.c        ****             position = 0;
 1002               		.stabn	68,0,291,.LM96-.LFBB15
 1003               	.LM96:
 1004 0384 1C92      		st X,__zero_reg__
 292:main.c        ****             break;
 1005               		.stabn	68,0,292,.LM97-.LFBB15
 1006               	.LM97:
 1007 0386 1092 0000 		sts position.1874,__zero_reg__
 293:main.c        ****         }
 1008               		.stabn	68,0,293,.LM98-.LFBB15
 1009               	.LM98:
 1010 038a 00C0      		rjmp .L80
 1011               	.L82:
 296:main.c        ****             counter++;
 1012               		.stabn	68,0,296,.LM99-.LFBB15
 1013               	.LM99:
 1014 038c 8C93      		st X,r24
 298:main.c        ****         }
 1015               		.stabn	68,0,298,.LM100-.LFBB15
 1016               	.LM100:
 1017 038e 9F5F      		subi r25,lo8(-(1))
 1018 0390 9093 0000 		sts position.1874,r25
 1019 0394 C42F      		mov r28,r20
 1020 0396 00C0      		rjmp .L78
 1021               	.L80:
 302:main.c        **** 
 1022               		.stabn	68,0,302,.LM101-.LFBB15
 1023               	.LM101:
 1024 0398 8C2F      		mov r24,r28
 1025               	/* epilogue start */
 1026 039a DF91      		pop r29
 1027 039c CF91      		pop r28
 1028 039e 1F91      		pop r17
 1029 03a0 0F91      		pop r16
 1030 03a2 FF90      		pop r15
 1031 03a4 0895      		ret
 1032               		.size	read, .-read
 1033               		.stabs	"data:r(5,2)",64,0,278,24
 1034               		.stabs	"counter:r(5,2)",64,0,278,15
 1035               		.stabs	"position:V(5,2)",38,0,279,position.1874
 1036               		.stabn	192,0,0,.LFBB15-.LFBB15
 1037               		.stabn	224,0,0,.Lscope15-.LFBB15
GAS LISTING /tmp/ccCNCjxp.s 			page 26


 1038               	.Lscope15:
 1039               		.stabs	"",36,0,0,.Lscope15-.LFBB15
 1040               		.stabd	78,0,0
 1041               		.stabs	"usart_init:F(0,49)",36,0,342,usart_init
 1042               	.global	usart_init
 1043               		.type	usart_init, @function
 1044               	usart_init:
 1045               		.stabd	46,0,0
 341:main.c        **** 
 342:main.c        **** void usart_init(void){
 1046               		.stabn	68,0,342,.LM102-.LFBB16
 1047               	.LM102:
 1048               	.LFBB16:
 1049               	/* prologue: function */
 1050               	/* frame size = 0 */
 1051               	/* stack size = 0 */
 1052               	.L__stack_usage = 0
 343:main.c        ****     /* configurações das portas RX e TX*/
 344:main.c        ****     DDRD &= ~(1 << PD1); // pino PD1 = RX (configurado como entrada)
 1053               		.stabn	68,0,344,.LM103-.LFBB16
 1054               	.LM103:
 1055 03a6 5198      		cbi 0xa,1
 345:main.c        ****     DDRD |= (1 << PD0);  // pino PD0 = TX (configurado como saída)
 1056               		.stabn	68,0,345,.LM104-.LFBB16
 1057               	.LM104:
 1058 03a8 509A      		sbi 0xa,0
 346:main.c        ****     /* configurações da USART */
 347:main.c        ****     UCSR0A = 0U; /* reset, baud rate normal */
 1059               		.stabn	68,0,347,.LM105-.LFBB16
 1060               	.LM105:
 1061 03aa 1092 C000 		sts 192,__zero_reg__
 348:main.c        **** 	UBRR0H = ((uint8_t)(UBRR >> 8) & 0xF); // conforme datasheet
 1062               		.stabn	68,0,348,.LM106-.LFBB16
 1063               	.LM106:
 1064 03ae 82E0      		ldi r24,lo8(2)
 1065 03b0 8093 C500 		sts 197,r24
 349:main.c        **** 	UBRR0L = ((uint8_t)(UBRR) & 0xFF);
 1066               		.stabn	68,0,349,.LM107-.LFBB16
 1067               	.LM107:
 1068 03b4 85EC      		ldi r24,lo8(-59)
 1069 03b6 8093 C400 		sts 196,r24
 350:main.c        ****     /* habilita tx, rx e habilita flag de interrupção para RX e TX */
 351:main.c        **** 	UCSR0B = (1 << RXEN0)|(1 << TXEN0)|(1 << RXCIE0)|(1 << TXCIE0|(1 << UDRIE0));
 1070               		.stabn	68,0,351,.LM108-.LFBB16
 1071               	.LM108:
 1072 03ba E1EC      		ldi r30,lo8(-63)
 1073 03bc F0E0      		ldi r31,0
 1074 03be 88EF      		ldi r24,lo8(-8)
 1075 03c0 8083      		st Z,r24
 352:main.c        ****     UCSR0B &= ~(1 << UCSZ02); 
 1076               		.stabn	68,0,352,.LM109-.LFBB16
 1077               	.LM109:
 1078 03c2 8081      		ld r24,Z
 1079 03c4 8B7F      		andi r24,lo8(-5)
 1080 03c6 8083      		st Z,r24
 353:main.c        **** 	/* configura frame format = 8bits, 1 stop bit, sem paridade, assincrono */
 354:main.c        **** 	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);
GAS LISTING /tmp/ccCNCjxp.s 			page 27


 1081               		.stabn	68,0,354,.LM110-.LFBB16
 1082               	.LM110:
 1083 03c8 86E0      		ldi r24,lo8(6)
 1084 03ca 8093 C200 		sts 194,r24
 1085               	.LBB42:
 1086               	.LBB43:
 162:main.c        ****     cb->tail = 0;
 1087               		.stabn	68,0,162,.LM111-.LFBB16
 1088               	.LM111:
 1089 03ce 1092 0000 		sts rxBuffer+64,__zero_reg__
 163:main.c        ****     cb->count = 0;
 1090               		.stabn	68,0,163,.LM112-.LFBB16
 1091               	.LM112:
 1092 03d2 1092 0000 		sts rxBuffer+65,__zero_reg__
 164:main.c        **** }
 1093               		.stabn	68,0,164,.LM113-.LFBB16
 1094               	.LM113:
 1095 03d6 1092 0000 		sts rxBuffer+66,__zero_reg__
 1096               	.LBE43:
 1097               	.LBE42:
 1098               	.LBB44:
 1099               	.LBB45:
 162:main.c        ****     cb->tail = 0;
 1100               		.stabn	68,0,162,.LM114-.LFBB16
 1101               	.LM114:
 1102 03da 1092 0000 		sts txBuffer+64,__zero_reg__
 163:main.c        ****     cb->count = 0;
 1103               		.stabn	68,0,163,.LM115-.LFBB16
 1104               	.LM115:
 1105 03de 1092 0000 		sts txBuffer+65,__zero_reg__
 164:main.c        **** }
 1106               		.stabn	68,0,164,.LM116-.LFBB16
 1107               	.LM116:
 1108 03e2 1092 0000 		sts txBuffer+66,__zero_reg__
 1109 03e6 0895      		ret
 1110               	.LBE45:
 1111               	.LBE44:
 1112               		.size	usart_init, .-usart_init
 1113               	.Lscope16:
 1114               		.stabs	"",36,0,0,.Lscope16-.LFBB16
 1115               		.stabd	78,0,0
 1116               		.stabs	"initTimer1:F(0,49)",36,0,360,initTimer1
 1117               	.global	initTimer1
 1118               		.type	initTimer1, @function
 1119               	initTimer1:
 1120               		.stabd	46,0,0
 355:main.c        ****     /* inicialização dos buffers rx e tx */
 356:main.c        ****     initBuffer(&rxBuffer);
 357:main.c        ****     initBuffer(&txBuffer);
 358:main.c        **** }
 359:main.c        **** 
 360:main.c        **** void initTimer1(void){ 
 1121               		.stabn	68,0,360,.LM117-.LFBB17
 1122               	.LM117:
 1123               	.LFBB17:
 1124               	/* prologue: function */
 1125               	/* frame size = 0 */
GAS LISTING /tmp/ccCNCjxp.s 			page 28


 1126               	/* stack size = 0 */
 1127               	.L__stack_usage = 0
 361:main.c        ****     TCCR1B |= (1 << WGM12);               /* Configura o Timer1 no modo CTC (Clear Timer on Compare
 1128               		.stabn	68,0,361,.LM118-.LFBB17
 1129               	.LM118:
 1130 03e8 E1E8      		ldi r30,lo8(-127)
 1131 03ea F0E0      		ldi r31,0
 1132 03ec 8081      		ld r24,Z
 1133 03ee 8860      		ori r24,lo8(8)
 1134 03f0 8083      		st Z,r24
 362:main.c        ****     TIMSK1 |= (1 << OCIE1A);              /* Habilita a interrupção do Timer1 no compare match A 
 1135               		.stabn	68,0,362,.LM119-.LFBB17
 1136               	.LM119:
 1137 03f2 AFE6      		ldi r26,lo8(111)
 1138 03f4 B0E0      		ldi r27,0
 1139 03f6 8C91      		ld r24,X
 1140 03f8 8260      		ori r24,lo8(2)
 1141 03fa 8C93      		st X,r24
 363:main.c        ****     TCCR1B |= (1 << CS11) | (1 << CS10);  /* Define o prescaler para 64 e inicia o Timer1 */
 1142               		.stabn	68,0,363,.LM120-.LFBB17
 1143               	.LM120:
 1144 03fc 8081      		ld r24,Z
 1145 03fe 8360      		ori r24,lo8(3)
 1146 0400 8083      		st Z,r24
 364:main.c        ****     OCR1A = 249;                          /* Define o valor de comparação para gerar uma interrup
 1147               		.stabn	68,0,364,.LM121-.LFBB17
 1148               	.LM121:
 1149 0402 89EF      		ldi r24,lo8(-7)
 1150 0404 90E0      		ldi r25,0
 1151 0406 9093 8900 		sts 136+1,r25
 1152 040a 8093 8800 		sts 136,r24
 1153 040e 0895      		ret
 1154               		.size	initTimer1, .-initTimer1
 1155               	.Lscope17:
 1156               		.stabs	"",36,0,0,.Lscope17-.LFBB17
 1157               		.stabd	78,0,0
 1158               		.stabs	"delay:F(0,49)",36,0,368,delay
 1159               		.stabs	"ms:P(0,5)",64,0,368,22
 1160               	.global	delay
 1161               		.type	delay, @function
 1162               	delay:
 1163               		.stabd	46,0,0
 365:main.c        **** }
 366:main.c        **** 
 367:main.c        **** /* função de delay em milissegundos usando o timer1 */
 368:main.c        **** void delay(unsigned long ms){
 1164               		.stabn	68,0,368,.LM122-.LFBB18
 1165               	.LM122:
 1166               	.LFBB18:
 1167 0410 CF92      		push r12
 1168 0412 DF92      		push r13
 1169 0414 EF92      		push r14
 1170 0416 FF92      		push r15
 1171 0418 0F93      		push r16
 1172 041a 1F93      		push r17
 1173               	/* prologue: function */
 1174               	/* frame size = 0 */
GAS LISTING /tmp/ccCNCjxp.s 			page 29


 1175               	/* stack size = 6 */
 1176               	.L__stack_usage = 6
 369:main.c        ****     unsigned long start_time = milisecond_count;
 1177               		.stabn	68,0,369,.LM123-.LFBB18
 1178               	.LM123:
 1179 041c 0091 0000 		lds r16,milisecond_count
 1180 0420 1091 0000 		lds r17,milisecond_count+1
 1181 0424 2091 0000 		lds r18,milisecond_count+2
 1182 0428 3091 0000 		lds r19,milisecond_count+3
 1183               	.L88:
 370:main.c        ****     while(milisecond_count - start_time < ms);
 1184               		.stabn	68,0,370,.LM124-.LFBB18
 1185               	.LM124:
 1186 042c C090 0000 		lds r12,milisecond_count
 1187 0430 D090 0000 		lds r13,milisecond_count+1
 1188 0434 E090 0000 		lds r14,milisecond_count+2
 1189 0438 F090 0000 		lds r15,milisecond_count+3
 1190 043c C01A      		sub r12,r16
 1191 043e D10A      		sbc r13,r17
 1192 0440 E20A      		sbc r14,r18
 1193 0442 F30A      		sbc r15,r19
 1194 0444 C616      		cp r12,r22
 1195 0446 D706      		cpc r13,r23
 1196 0448 E806      		cpc r14,r24
 1197 044a F906      		cpc r15,r25
 1198 044c 00F0      		brlo .L88
 1199               	/* epilogue start */
 371:main.c        **** }...
 1200               		.stabn	68,0,371,.LM125-.LFBB18
 1201               	.LM125:
 1202 044e 1F91      		pop r17
 1203 0450 0F91      		pop r16
 1204 0452 FF90      		pop r15
 1205 0454 EF90      		pop r14
 1206 0456 DF90      		pop r13
 1207 0458 CF90      		pop r12
 1208 045a 0895      		ret
 1209               		.size	delay, .-delay
 1210               		.stabs	"start_time:r(0,5)",64,0,369,16
 1211               		.stabn	192,0,0,.LFBB18-.LFBB18
 1212               		.stabn	224,0,0,.Lscope18-.LFBB18
 1213               	.Lscope18:
 1214               		.stabs	"",36,0,0,.Lscope18-.LFBB18
 1215               		.stabd	78,0,0
 1216               		.section	.text.startup,"ax",@progbits
 1217               		.stabs	"main:F(0,1)",36,0,47,main
 1218               	.global	main
 1219               		.type	main, @function
 1220               	main:
 1221               		.stabd	46,0,0
  47:main.c        **** int main(void) {
 1222               		.stabn	68,0,47,.LM126-.LFBB19
 1223               	.LM126:
 1224               	.LFBB19:
 1225 0000 CF93      		push r28
 1226 0002 DF93      		push r29
 1227 0004 1F92      		push __zero_reg__
GAS LISTING /tmp/ccCNCjxp.s 			page 30


 1228 0006 CDB7      		in r28,__SP_L__
 1229 0008 DEB7      		in r29,__SP_H__
 1230               	/* prologue: function */
 1231               	/* frame size = 1 */
 1232               	/* stack size = 3 */
 1233               	.L__stack_usage = 3
  50:main.c        ****     DDRB |= (1 << PB5);   /* Configura pino 5 da porta B (led onboard) como saída */
 1234               		.stabn	68,0,50,.LM127-.LFBB19
 1235               	.LM127:
 1236 000a 259A      		sbi 0x4,5
  51:main.c        ****     PORTB &= ~(1 << PB5);  /* Configura o pino do led em estado LOW como default */
 1237               		.stabn	68,0,51,.LM128-.LFBB19
 1238               	.LM128:
 1239 000c 2D98      		cbi 0x5,5
  53:main.c        ****     usart_init();
 1240               		.stabn	68,0,53,.LM129-.LFBB19
 1241               	.LM129:
 1242 000e 0E94 0000 		call usart_init
  54:main.c        ****     initTimer1();
 1243               		.stabn	68,0,54,.LM130-.LFBB19
 1244               	.LM130:
 1245 0012 0E94 0000 		call initTimer1
  55:main.c        ****     sei();
 1246               		.stabn	68,0,55,.LM131-.LFBB19
 1247               	.LM131:
 1248               	/* #APP */
 1249               	 ;  55 "main.c" 1
 1250 0016 7894      		sei
 1251               	 ;  0 "" 2
  60:main.c        ****     write(str1, strlen((const char *)str1), (int8_t)1);
 1252               		.stabn	68,0,60,.LM132-.LFBB19
 1253               	.LM132:
 1254               	/* #NOAPP */
 1255 0018 00E0      		ldi r16,lo8(str1)
 1256 001a 10E0      		ldi r17,hi8(str1)
 1257 001c F801      		movw r30,r16
 1258               		0:
 1259 001e 0190      		ld __tmp_reg__,Z+
 1260 0020 0020      		tst __tmp_reg__
 1261 0022 01F4      		brne 0b
 1262 0024 3197      		sbiw r30,1
 1263 0026 BF01      		movw r22,r30
 1264 0028 6050      		subi r22,lo8(str1)
 1265 002a 7040      		sbci r23,hi8(str1)
 1266 002c 41E0      		ldi r20,lo8(1)
 1267 002e C801      		movw r24,r16
 1268 0030 0E94 0000 		call write
  62:main.c        ****     i = strlen((const char *)str1);
 1269               		.stabn	68,0,62,.LM133-.LFBB19
 1270               	.LM133:
 1271 0034 F801      		movw r30,r16
 1272               		0:
 1273 0036 0190      		ld __tmp_reg__,Z+
 1274 0038 0020      		tst __tmp_reg__
 1275 003a 01F4      		brne 0b
 1276 003c 3197      		sbiw r30,1
 1277 003e E050      		subi r30,lo8(str1)
GAS LISTING /tmp/ccCNCjxp.s 			page 31


 1278 0040 F040      		sbci r31,hi8(str1)
 1279 0042 1E2F      		mov r17,r30
 1280               	.L91:
  63:main.c        ****     while(i){
 1281               		.stabn	68,0,63,.LM134-.LFBB19
 1282               	.LM134:
 1283 0044 1123      		tst r17
 1284 0046 01F0      		breq .L121
  64:main.c        ****         if(i < 10){
 1285               		.stabn	68,0,64,.LM135-.LFBB19
 1286               	.LM135:
 1287 0048 1A30      		cpi r17,lo8(10)
 1288 004a 00F4      		brsh .L92
  65:main.c        ****             write(str1, (uint8_t)10, (int8_t)1);  /* fecha o pacote */
 1289               		.stabn	68,0,65,.LM136-.LFBB19
 1290               	.LM136:
 1291 004c 41E0      		ldi r20,lo8(1)
 1292 004e 6AE0      		ldi r22,lo8(10)
 1293 0050 80E0      		ldi r24,lo8(str1)
 1294 0052 90E0      		ldi r25,hi8(str1)
 1295 0054 0E94 0000 		call write
 1296 0058 00C0      		rjmp .L91
 1297               	.L92:
  68:main.c        ****             i -= (write(str1, (uint8_t)10, (int8_t)0));  /* continua enviando o pacote sem fechar *
 1298               		.stabn	68,0,68,.LM137-.LFBB19
 1299               	.LM137:
 1300 005a 40E0      		ldi r20,0
 1301 005c 6AE0      		ldi r22,lo8(10)
 1302 005e 80E0      		ldi r24,lo8(str1)
 1303 0060 90E0      		ldi r25,hi8(str1)
 1304 0062 0E94 0000 		call write
 1305 0066 181B      		sub r17,r24
 1306 0068 00C0      		rjmp .L91
 1307               	.L121:
 1308 006a 00E0      		ldi r16,0
 1309 006c 10E0      		ldi r17,0
 1310               	.L95:
  73:main.c        ****         received_bytes += (read(readBuffer, 1) - 1);  /* read retorna 2 enquanto não receber carac
 1311               		.stabn	68,0,73,.LM138-.LFBB19
 1312               	.LM138:
 1313 006e 61E0      		ldi r22,lo8(1)
 1314 0070 80E0      		ldi r24,lo8(readBuffer)
 1315 0072 90E0      		ldi r25,hi8(readBuffer)
 1316 0074 0E94 0000 		call read
 1317 0078 90E0      		ldi r25,0
 1318 007a 0197      		sbiw r24,1
 1319 007c 080F      		add r16,r24
 1320 007e 191F      		adc r17,r25
  72:main.c        ****     while(received_bytes <= 300){
 1321               		.stabn	68,0,72,.LM139-.LFBB19
 1322               	.LM139:
 1323 0080 0D32      		cpi r16,45
 1324 0082 81E0      		ldi r24,1
 1325 0084 1807      		cpc r17,r24
 1326 0086 00F0      		brlo .L95
  75:main.c        ****     flow_off();
 1327               		.stabn	68,0,75,.LM140-.LFBB19
GAS LISTING /tmp/ccCNCjxp.s 			page 32


 1328               	.LM140:
 1329 0088 0E94 0000 		call flow_off
 1330 008c 14E1      		ldi r17,lo8(20)
 1331               	.L96:
  79:main.c        ****         dequeue(&rxBuffer, &trash_data);
 1332               		.stabn	68,0,79,.LM141-.LFBB19
 1333               	.LM141:
 1334 008e BE01      		movw r22,r28
 1335 0090 6F5F      		subi r22,-1
 1336 0092 7F4F      		sbci r23,-1
 1337 0094 80E0      		ldi r24,lo8(rxBuffer)
 1338 0096 90E0      		ldi r25,hi8(rxBuffer)
 1339 0098 0E94 0000 		call dequeue
 1340 009c 1150      		subi r17,lo8(-(-1))
  77:main.c        ****     while(j){
 1341               		.stabn	68,0,77,.LM142-.LFBB19
 1342               	.LM142:
 1343 009e 01F4      		brne .L96
 1344               	.LBB46:
 1345               	.LBB47:
 173:main.c        ****     if(cb->count == 0) return 1;
 1346               		.stabn	68,0,173,.LM143-.LFBB19
 1347               	.LM143:
 1348 00a0 8091 0000 		lds r24,rxBuffer+66
 1349 00a4 8111      		cpse r24,__zero_reg__
 1350 00a6 00C0      		rjmp .L97
 1351 00a8 16E0      		ldi r17,lo8(6)
 1352               	.LBE47:
 1353               	.LBE46:
  85:main.c        ****             PORTB ^= (1 << PB5);
 1354               		.stabn	68,0,85,.LM144-.LFBB19
 1355               	.LM144:
 1356 00aa 00E2      		ldi r16,lo8(32)
 1357               	.L98:
 1358 00ac 1150      		subi r17,lo8(-(-1))
  84:main.c        ****         while(k--){
 1359               		.stabn	68,0,84,.LM145-.LFBB19
 1360               	.LM145:
 1361 00ae 01F0      		breq .L122
  85:main.c        ****             PORTB ^= (1 << PB5);
 1362               		.stabn	68,0,85,.LM146-.LFBB19
 1363               	.LM146:
 1364 00b0 85B1      		in r24,0x5
 1365 00b2 8027      		eor r24,r16
 1366 00b4 85B9      		out 0x5,r24
  86:main.c        ****             delay(1000);
 1367               		.stabn	68,0,86,.LM147-.LFBB19
 1368               	.LM147:
 1369 00b6 68EE      		ldi r22,lo8(-24)
 1370 00b8 73E0      		ldi r23,lo8(3)
 1371 00ba 80E0      		ldi r24,0
 1372 00bc 90E0      		ldi r25,0
 1373 00be 0E94 0000 		call delay
 1374 00c2 00C0      		rjmp .L98
 1375               	.L122:
 1376 00c4 1FEF      		ldi r17,lo8(-1)
 1377               	.L112:
GAS LISTING /tmp/ccCNCjxp.s 			page 33


  97:main.c        ****     PORTB &= ~(1 << PB5); /* apaga o led */
 1378               		.stabn	68,0,97,.LM148-.LFBB19
 1379               	.LM148:
 1380 00c6 2D98      		cbi 0x5,5
 101:main.c        ****     flow_off();
 1381               		.stabn	68,0,101,.LM149-.LFBB19
 1382               	.LM149:
 1383 00c8 0E94 0000 		call flow_off
 1384 00cc 04E1      		ldi r16,lo8(20)
 1385               	.L100:
 104:main.c        ****         dequeue(&rxBuffer, &trash_data);
 1386               		.stabn	68,0,104,.LM150-.LFBB19
 1387               	.LM150:
 1388 00ce BE01      		movw r22,r28
 1389 00d0 6F5F      		subi r22,-1
 1390 00d2 7F4F      		sbci r23,-1
 1391 00d4 80E0      		ldi r24,lo8(rxBuffer)
 1392 00d6 90E0      		ldi r25,hi8(rxBuffer)
 1393 00d8 0E94 0000 		call dequeue
 1394 00dc 0150      		subi r16,lo8(-(-1))
 102:main.c        ****     while(j){
 1395               		.stabn	68,0,102,.LM151-.LFBB19
 1396               	.LM151:
 1397 00de 01F4      		brne .L100
 1398               	.LBB48:
 1399               	.LBB49:
 173:main.c        ****     if(cb->count == 0) return 1;
 1400               		.stabn	68,0,173,.LM152-.LFBB19
 1401               	.LM152:
 1402 00e0 8091 0000 		lds r24,rxBuffer+66
 1403 00e4 8111      		cpse r24,__zero_reg__
 1404 00e6 00C0      		rjmp .L101
 1405               	.LBE49:
 1406               	.LBE48:
 110:main.c        ****             PORTB ^= (1 << PB5);
 1407               		.stabn	68,0,110,.LM153-.LFBB19
 1408               	.LM153:
 1409 00e8 00E2      		ldi r16,lo8(32)
 1410               	.L102:
 1411 00ea 85B1      		in r24,0x5
 1412 00ec 8027      		eor r24,r16
 1413 00ee 85B9      		out 0x5,r24
 111:main.c        ****             delay(1000);
 1414               		.stabn	68,0,111,.LM154-.LFBB19
 1415               	.LM154:
 1416 00f0 68EE      		ldi r22,lo8(-24)
 1417 00f2 73E0      		ldi r23,lo8(3)
 1418 00f4 80E0      		ldi r24,0
 1419 00f6 90E0      		ldi r25,0
 1420 00f8 0E94 0000 		call delay
 1421 00fc 1150      		subi r17,lo8(-(-1))
 109:main.c        ****         while(k--){
 1422               		.stabn	68,0,109,.LM155-.LFBB19
 1423               	.LM155:
 1424 00fe 01F4      		brne .L102
 1425               	.L113:
 121:main.c        ****     PORTB &= ~(1 << PB5); /* apaga o led */
GAS LISTING /tmp/ccCNCjxp.s 			page 34


 1426               		.stabn	68,0,121,.LM156-.LFBB19
 1427               	.LM156:
 1428 0100 2D98      		cbi 0x5,5
 124:main.c        ****         if(write(binary_string, strlen((const char *)binary_string), (int8_t)0) == 0){
 1429               		.stabn	68,0,124,.LM157-.LFBB19
 1430               	.LM157:
 1431 0102 00E0      		ldi r16,lo8(binary_string)
 1432 0104 10E0      		ldi r17,hi8(binary_string)
 1433               	.L103:
 1434 0106 F801      		movw r30,r16
 1435               		0:
 1436 0108 0190      		ld __tmp_reg__,Z+
 1437 010a 0020      		tst __tmp_reg__
 1438 010c 01F4      		brne 0b
 1439 010e 3197      		sbiw r30,1
 1440 0110 BF01      		movw r22,r30
 1441 0112 6050      		subi r22,lo8(binary_string)
 1442 0114 7040      		sbci r23,hi8(binary_string)
 1443 0116 40E0      		ldi r20,0
 1444 0118 80E0      		ldi r24,lo8(binary_string)
 1445 011a 90E0      		ldi r25,hi8(binary_string)
 1446 011c 0E94 0000 		call write
 1447 0120 8111      		cpse r24,__zero_reg__
 1448 0122 00C0      		rjmp .L104
 125:main.c        ****             PORTB |= (1 << PB5); /* acende o led enquanto a função write retornar 0 (se o fluxo e
 1449               		.stabn	68,0,125,.LM158-.LFBB19
 1450               	.LM158:
 1451 0124 2D9A      		sbi 0x5,5
 1452 0126 00C0      		rjmp .L103
 1453               	.L104:
 127:main.c        ****         else if(write(binary_string, strlen((const char *)binary_string), (int8_t)0) == strlen((con
 1454               		.stabn	68,0,127,.LM159-.LFBB19
 1455               	.LM159:
 1456 0128 F801      		movw r30,r16
 1457               		0:
 1458 012a 0190      		ld __tmp_reg__,Z+
 1459 012c 0020      		tst __tmp_reg__
 1460 012e 01F4      		brne 0b
 1461 0130 3197      		sbiw r30,1
 1462 0132 BF01      		movw r22,r30
 1463 0134 6050      		subi r22,lo8(binary_string)
 1464 0136 7040      		sbci r23,hi8(binary_string)
 1465 0138 40E0      		ldi r20,0
 1466 013a 80E0      		ldi r24,lo8(binary_string)
 1467 013c 90E0      		ldi r25,hi8(binary_string)
 1468 013e 0E94 0000 		call write
 1469 0142 F801      		movw r30,r16
 1470               		0:
 1471 0144 0190      		ld __tmp_reg__,Z+
 1472 0146 0020      		tst __tmp_reg__
 1473 0148 01F4      		brne 0b
 1474 014a 3197      		sbiw r30,1
 1475 014c E050      		subi r30,lo8(binary_string)
 1476 014e F040      		sbci r31,hi8(binary_string)
 1477 0150 90E0      		ldi r25,0
 1478 0152 8E17      		cp r24,r30
 1479 0154 9F07      		cpc r25,r31
GAS LISTING /tmp/ccCNCjxp.s 			page 35


 1480 0156 01F0      		breq .L119
 131:main.c        ****             PORTB &= ~(1 << PB5); /* apaga o led se a função write retornar os bytes enviados */
 1481               		.stabn	68,0,131,.LM160-.LFBB19
 1482               	.LM160:
 1483 0158 2D98      		cbi 0x5,5
 1484 015a 00C0      		rjmp .L103
 1485               	.L107:
 143:main.c        ****             PORTB &= ~(1 << PB5);  /* apaga o led se forem diferentes */
 1486               		.stabn	68,0,143,.LM161-.LFBB19
 1487               	.LM161:
 1488 015c 2D98      		cbi 0x5,5
 1489               	.L109:
 146:main.c        ****         while(read(readBuffer, 10) == 11); /* função read retorna n+1 se pacote não foi finaliza
 1490               		.stabn	68,0,146,.LM162-.LFBB19
 1491               	.LM162:
 1492 015e 6AE0      		ldi r22,lo8(10)
 1493 0160 80E0      		ldi r24,lo8(readBuffer)
 1494 0162 90E0      		ldi r25,hi8(readBuffer)
 1495 0164 0E94 0000 		call read
 1496 0168 8B30      		cpi r24,lo8(11)
 1497 016a 01F0      		breq .L109
 148:main.c        ****         if(!strcmp((const char *)str2, (const char *)readBuffer)){
 1498               		.stabn	68,0,148,.LM163-.LFBB19
 1499               	.LM163:
 1500 016c 60E0      		ldi r22,lo8(readBuffer)
 1501 016e 70E0      		ldi r23,hi8(readBuffer)
 1502 0170 80E0      		ldi r24,lo8(str2)
 1503 0172 90E0      		ldi r25,hi8(str2)
 1504 0174 0E94 0000 		call strcmp
 1505 0178 892B      		or r24,r25
 1506 017a 01F4      		brne .L110
 149:main.c        ****             PORTB |= (1 << PB5);  /* acende o led se forem iguais */
 1507               		.stabn	68,0,149,.LM164-.LFBB19
 1508               	.LM164:
 1509 017c 2D9A      		sbi 0x5,5
 1510               	.L119:
 137:main.c        ****         read(readBuffer, 254);
 1511               		.stabn	68,0,137,.LM165-.LFBB19
 1512               	.LM165:
 1513 017e 6EEF      		ldi r22,lo8(-2)
 1514 0180 80E0      		ldi r24,lo8(readBuffer)
 1515 0182 90E0      		ldi r25,hi8(readBuffer)
 1516 0184 0E94 0000 		call read
 139:main.c        ****         if(!strcmp((const char *)str2, (const char *)readBuffer)){
 1517               		.stabn	68,0,139,.LM166-.LFBB19
 1518               	.LM166:
 1519 0188 60E0      		ldi r22,lo8(readBuffer)
 1520 018a 70E0      		ldi r23,hi8(readBuffer)
 1521 018c 80E0      		ldi r24,lo8(str2)
 1522 018e 90E0      		ldi r25,hi8(str2)
 1523 0190 0E94 0000 		call strcmp
 1524 0194 892B      		or r24,r25
 1525 0196 01F4      		brne .L107
 140:main.c        ****             PORTB |= (1 << PB5);  /* acende o led se forem iguais */
 1526               		.stabn	68,0,140,.LM167-.LFBB19
 1527               	.LM167:
 1528 0198 2D9A      		sbi 0x5,5
GAS LISTING /tmp/ccCNCjxp.s 			page 36


 1529 019a 00C0      		rjmp .L109
 1530               	.L110:
 152:main.c        ****             PORTB &= ~(1 << PB5);  /* apaga o led se forem diferentes */
 1531               		.stabn	68,0,152,.LM168-.LFBB19
 1532               	.LM168:
 1533 019c 2D98      		cbi 0x5,5
 1534 019e 00C0      		rjmp .L119
 1535               	.L97:
  91:main.c        ****         PORTB |= (1 << PB5);
 1536               		.stabn	68,0,91,.LM169-.LFBB19
 1537               	.LM169:
 1538 01a0 2D9A      		sbi 0x5,5
  92:main.c        ****         delay(5000);
 1539               		.stabn	68,0,92,.LM170-.LFBB19
 1540               	.LM170:
 1541 01a2 68E8      		ldi r22,lo8(-120)
 1542 01a4 73E1      		ldi r23,lo8(19)
 1543 01a6 80E0      		ldi r24,0
 1544 01a8 90E0      		ldi r25,0
 1545 01aa 0E94 0000 		call delay
  93:main.c        ****         PORTB &= ~(1 << PB5);
 1546               		.stabn	68,0,93,.LM171-.LFBB19
 1547               	.LM171:
 1548 01ae 2D98      		cbi 0x5,5
  48:main.c        ****     uint8_t i, j = 20, k = 5, trash_data;
 1549               		.stabn	68,0,48,.LM172-.LFBB19
 1550               	.LM172:
 1551 01b0 15E0      		ldi r17,lo8(5)
 1552 01b2 00C0      		rjmp .L112
 1553               	.L101:
 116:main.c        ****         PORTB |= (1 << PB5);
 1554               		.stabn	68,0,116,.LM173-.LFBB19
 1555               	.LM173:
 1556 01b4 2D9A      		sbi 0x5,5
 117:main.c        ****         delay(5000);
 1557               		.stabn	68,0,117,.LM174-.LFBB19
 1558               	.LM174:
 1559 01b6 68E8      		ldi r22,lo8(-120)
 1560 01b8 73E1      		ldi r23,lo8(19)
 1561 01ba 80E0      		ldi r24,0
 1562 01bc 90E0      		ldi r25,0
 1563 01be 0E94 0000 		call delay
 118:main.c        ****         PORTB &= ~(1 << PB5);
 1564               		.stabn	68,0,118,.LM175-.LFBB19
 1565               	.LM175:
 1566 01c2 2D98      		cbi 0x5,5
 1567 01c4 00C0      		rjmp .L113
 1568               		.size	main, .-main
 1569               		.stabs	"i:r(5,2)",64,0,48,17
 1570               		.stabs	"k:r(5,2)",64,0,48,17
 1571               		.stabs	"trash_data:(5,2)",128,0,48,1
 1572               		.stabs	"received_bytes:r(5,4)",64,0,49,16
 1573               		.stabn	192,0,0,.LFBB19-.LFBB19
 1574               		.stabn	224,0,0,.Lscope19-.LFBB19
 1575               	.Lscope19:
 1576               		.stabs	"",36,0,0,.Lscope19-.LFBB19
 1577               		.stabd	78,0,0
GAS LISTING /tmp/ccCNCjxp.s 			page 37


 1578               		.local	position.1874
 1579               		.comm	position.1874,1,1
 1580               		.local	position.1864
 1581               		.comm	position.1864,1,1
 1582               		.comm	txBuffer,67,1
 1583               		.comm	rxBuffer,67,1
 1584               		.local	milisecond_count
 1585               		.comm	milisecond_count,4,1
 1586               		.data
 1587               		.type	receiver_flow, @object
 1588               		.size	receiver_flow, 1
 1589               	receiver_flow:
 1590 0000 01        		.byte	1
 1591               		.local	esc
 1592               		.comm	esc,1,1
 1593               		.local	flow
 1594               		.comm	flow,1,1
 1595               		.local	readBuffer
 1596               		.comm	readBuffer,256,1
 1597               		.type	str2, @object
 1598               		.size	str2, 39
 1599               	str2:
 1600 0001 4465 7365 		.string	"Desenvolvimento de sistemas embarcados"
 1600      6E76 6F6C 
 1600      7669 6D65 
 1600      6E74 6F20 
 1600      6465 2073 
 1601               		.type	str1, @object
 1602               		.size	str1, 73
 1603               	str1:
 1604 0028 556E 6976 		.string	"Universidade Federal de Pernambuco\nDepartamento de Eletronica e Sistemas"
 1604      6572 7369 
 1604      6461 6465 
 1604      2046 6564 
 1604      6572 616C 
 1605               		.type	binary_string, @object
 1606               		.size	binary_string, 10
 1607               	binary_string:
 1608 0071 00        		.byte	0
 1609 0072 01        		.byte	1
 1610 0073 11        		.byte	17
 1611 0074 02        		.byte	2
 1612 0075 13        		.byte	19
 1613 0076 04        		.byte	4
 1614 0077 7E        		.byte	126
 1615 0078 05        		.byte	5
 1616 0079 7D        		.byte	125
 1617 007a 06        		.byte	6
 1618               		.stabs	"binary_string:S(0,56)=ar(0,53);0;9;(5,2)",38,0,23,binary_string
 1619               		.stabs	"str1:S(0,57)=ar(0,53);0;72;(5,2)",38,0,24,str1
 1620               		.stabs	"str2:S(0,58)=ar(0,53);0;38;(5,2)",38,0,25,str2
 1621               		.stabs	"readBuffer:S(0,59)=ar(0,53);0;255;(5,2)",38,0,26,readBuffer
 1622               		.stabs	"flow:S(0,60)=B(5,2)",38,0,27,flow
 1623               		.stabs	"esc:S(0,60)",38,0,27,esc
 1624               		.stabs	"receiver_flow:S(0,60)",38,0,27,receiver_flow
 1625               		.stabs	"milisecond_count:S(0,61)=B(0,5)",40,0,28,milisecond_count
 1626               		.stabs	"rxBuffer:G(0,50)",32,0,29,0
GAS LISTING /tmp/ccCNCjxp.s 			page 38


 1627               		.stabs	"txBuffer:G(0,50)",32,0,29,0
 1628               		.text
 1629               		.stabs	"",100,0,0,.Letext0
 1630               	.Letext0:
 1631               		.ident	"GCC: (GNU) 5.4.0"
 1632               	.global __do_copy_data
 1633               	.global __do_clear_bss
GAS LISTING /tmp/ccCNCjxp.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccCNCjxp.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccCNCjxp.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccCNCjxp.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccCNCjxp.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccCNCjxp.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccCNCjxp.s:114    .text:0000000000000000 initBuffer
     /tmp/ccCNCjxp.s:146    .text:0000000000000012 isFull
     /tmp/ccCNCjxp.s:177    .text:0000000000000024 isEmpty
     /tmp/ccCNCjxp.s:208    .text:0000000000000034 enqueue
     /tmp/ccCNCjxp.s:277    .text:0000000000000070 dequeue
     /tmp/ccCNCjxp.s:345    .text:00000000000000b0 __vector_18
     /tmp/ccCNCjxp.s:1585   .bss:0000000000000006 esc
     /tmp/ccCNCjxp.s:1592   .bss:0000000000000007 flow
                            *COM*:0000000000000043 rxBuffer
     /tmp/ccCNCjxp.s:475    .text:0000000000000150 __vector_19
                            *COM*:0000000000000043 txBuffer
     /tmp/ccCNCjxp.s:570    .text:00000000000001cc __vector_11
     /tmp/ccCNCjxp.s:1581   .bss:0000000000000002 milisecond_count
     /tmp/ccCNCjxp.s:620    .text:0000000000000216 is_flow_on
     /tmp/ccCNCjxp.s:648    .text:0000000000000224 USART_Transmit
     /tmp/ccCNCjxp.s:691    .text:0000000000000244 write
     /tmp/ccCNCjxp.s:1579   .bss:0000000000000001 position.1864
     /tmp/ccCNCjxp.s:822    .text:00000000000002dc flow_off
     /tmp/ccCNCjxp.s:1589   .data:0000000000000000 receiver_flow
     /tmp/ccCNCjxp.s:846    .text:00000000000002e8 flow_on
     /tmp/ccCNCjxp.s:871    .text:00000000000002f6 USART_Receive
     /tmp/ccCNCjxp.s:925    .text:0000000000000322 read
                             .bss:0000000000000000 position.1874
     /tmp/ccCNCjxp.s:1044   .text:00000000000003a6 usart_init
     /tmp/ccCNCjxp.s:1119   .text:00000000000003e8 initTimer1
     /tmp/ccCNCjxp.s:1162   .text:0000000000000410 delay
     /tmp/ccCNCjxp.s:1220   .text.startup:0000000000000000 main
     /tmp/ccCNCjxp.s:1603   .data:0000000000000028 str1
     /tmp/ccCNCjxp.s:1594   .bss:0000000000000008 readBuffer
     /tmp/ccCNCjxp.s:1607   .data:0000000000000071 binary_string
     /tmp/ccCNCjxp.s:1599   .data:0000000000000001 str2

UNDEFINED SYMBOLS
strcmp
__do_copy_data
__do_clear_bss
